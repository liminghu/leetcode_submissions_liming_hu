{"id":1362964053,"question_id":323,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724201147,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1362964053/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"17.3 MB","code":"/*\nYou have a graph of n nodes. You are given an integer n and an array edges where \nedges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.\nReturn the number of connected components in the graph.\n*/\nclass Solution {\npublic:\n    int countComponents(int n, vector<vector<int>>& edges) {\n        /*  1 <= n <= 2000\n            1 <= edges.length <= 5000\n            edges[i].length == 2\n            0 <= ai <= bi < n\n            ai != bi\n            There are no repeated edges.\n        */\n        \n        vector<bool> visited(n, false);\n        vector<int> adjList[n];\n        int res = 0;\n        for(int i=0; i<edges.size(); i++) {\n            adjList[ edges[i][0] ].push_back( edges[i][1] );\n            adjList[ edges[i][1] ].push_back( edges[i][0] );\n        }\n\n        for(int i=0; i<n; i++) {\n            if(visited[i] == true) \n                continue;\n            res++;\n            dfs(adjList, visited, i);\n        }\n        return res;       \n    }\n    void dfs(vector<int> adjList[], vector<bool>& visited, int start) {\n        visited[start] = true;\n        for(int i=0; i<adjList[start].size(); i++) {\n            if(visited[ adjList[start][i] ] == false)\n                dfs(adjList, visited, adjList[start][i]);\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false,"flag_type":1}