{"id":1510953365,"question_id":516,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1737070045,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/1510953365/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"76 MB","code":"class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int n = s.length();\n        vector<vector<int>> dp(n, vector<int>(n, -1)); //the longest palindromic subsequence's length of substring(i, j), here i, j represent left, right indexes in the string\n\n        return helper(s, 0, n-1, dp);\n    }\n    int helper(string& s, int i, int j,  vector<vector<int>>& dp) {\n        if(dp[i][j]!=-1)\n            return dp[i][j];\n        if(i>j) {\n            dp[i][j] = 0;\n            return 0;\n        }\n        if(i==j) {\n            dp[i][j] = 1;\n            return 1;\n        };\n        if(s[i]==s[j]) {\n            dp[i][j] = helper(s, i+1, j-1, dp)+2;\n        } else {\n            dp[i][j] = max(helper(s, i+1, j, dp), helper(s, i, j-1, dp));\n        }\n        return dp[i][j];\n    }\n    \n    int longestPalindromeSubseq1(string s) {\n        int n = s.length();\n        vector<vector<int>> dp(n, vector<int>(n, 0)); //the longest palindromic subsequence's length of substring(i, j), here i, j represent left, right indexes in the string\n\n        for(int i=n-1; i>=0; i--) {\n            dp[i][i] = 1;\n            for(int j=i+1; j<n; j++) {\n                if(s[i]==s[j])\n                    dp[i][j] = dp[i+1][j-1]+2;\n                else\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n        return dp[0][n-1];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence","has_notes":false,"flag_type":1}