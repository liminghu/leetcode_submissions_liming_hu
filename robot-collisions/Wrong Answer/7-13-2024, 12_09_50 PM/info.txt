{"id":1320011056,"question_id":2846,"lang":"cpp","lang_name":"C++","time":"6 months, 4 weeks","timestamp":1720897790,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1320011056/","is_pending":"Not Pending","title":"Robot Collisions","memory":"N/A","code":"/*There are n 1-indexed robots, each having a position on a line, health, and movement direction.\nYou are given 0-indexed integer arrays positions, healths, and a string directions (directions[i] is \neither 'L' for left or 'R' for right). All integers in positions are unique.\nAll robots start moving on the line simultaneously at the same speed in their given directions. If two \nrobots ever share the same position while moving, they will collide.\nIf two robots collide, the robot with lower health is removed from the line, and the health of the other \nrobot decreases by one. The surviving robot continues in the same direction it was going. If both robots \nhave the same health, they are both removed from the line.\nYour task is to determine the health of the robots that survive the collisions, in the same order that the \nrobots were given, i.e. final heath of robot 1 (if survived), final health of robot 2 (if survived), and so on. \nIf there are no survivors, return an empty array.\nReturn an array containing the health of the remaining robots (in the order they were given in the input), \nafter no further collisions can occur.\nNote: The positions may be unsorted.\n*/\nstruct robot {\n    int position;\n    int health;\n    char direction;\n    int id;\n};\nclass Solution {\npublic:\n    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {\n        /* \n            1 <= positions.length == healths.length == directions.length == n <= 105\n            1 <= positions[i], healths[i] <= 109\n            directions[i] == 'L' or directions[i] == 'R'\n            All values in positions are distinct\n        */\n        \n        stack<robot> st; //moving direction stack.\n        int sz = directions.length();\n        vector<robot> robots(sz, robot());\n        for(int i=0; i<sz; i++) {\n            robots[i].id = i;\n            robots[i].position = positions[i];\n            robots[i].health = healths[i];\n            robots[i].direction = directions[i];\n        };\n\n        sort(robots.begin(), robots.end(), [](robot first, robot second) {return first.position <= second.position;});\n        for(int i=0; i<sz; i++) {\n            //right: open; left: close.\n            if(!st.empty()) {\n                robot robot_top = st.top();\n                robot cur_robot = robots[i];\n                if(robot_top.direction == 'R' && cur_robot.direction == 'L') { //collide\n                    while(!st.empty() && robot_top.direction == 'R') { //collide\n                            st.pop();\n                            if(robot_top.health < cur_robot.health) {\n                                cur_robot.health--;\n                            } else if(robot_top.health > cur_robot.health) {\n                                robot_top.health--;\n                                st.push(robot_top);\n                                break;\n                            } else \n                                break;\n                            if(!st.empty())\n                                robot_top = st.top();\n                    };\n                    //after solving all the collide.\n                    if(cur_robot.health < robots[i].health && (st.empty() || !st.empty() && st.top().direction=='L')) \n                        st.push(cur_robot);\n                } else //no collide.\n                    st.push(robots[i]);  \n            } else\n                st.push(robots[i]);  \n        }\n        vector<robot> ans;\n        while(!st.empty()) {\n            ans.push_back(st.top());\n            st.pop();\n        };\n        sort(ans.begin(), ans.end(), [](robot first, robot second){return first.id <= second.id;} );\n        vector<int> health;\n        for(int i=0; i<ans.size(); i++) {\n            health.push_back(ans[i].health);\n        };\n\n        return health;\n    }\n};","compare_resulttitle_slug":"robot-collisions","has_notes":false,"flag_type":1}