{"id":1380233308,"question_id":891,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725558027,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1380233308/","is_pending":"Not Pending","title":"Score After Flipping Matrix","memory":"10.5 MB","code":"/*\nYou are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or \ncolumn (i.e., changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 20\ngrid[i][j] is either 0 or 1.\n*/\nclass Solution {\npublic:\n    int matrixScore(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int res = (1<<(m-1))*n;  //we need to first flip all the highest bit to 1 if it is not. if it is 0, we need to flip this row.\n        for(int j=1; j<m; j++) { //for other bits.\n            int val = 1 << (m-1-j); //the val of the other bit gained.\n            int set = 0;\n\n            for(int i=0; i<n; i++) { //for all the rows.\n                if(grid[i][j] == grid[i][0])  //if the other bit is the same as the highest bit.\n                    set++;\n            }\n            res += max(set, n-set)*val; //shall we flip the column?\n        }\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"score-after-flipping-matrix","has_notes":false,"flag_type":1}