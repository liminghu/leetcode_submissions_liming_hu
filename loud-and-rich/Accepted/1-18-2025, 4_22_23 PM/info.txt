{"id":1513027210,"question_id":881,"lang":"cpp","lang_name":"C++","time":"2 weeks, 5 days","timestamp":1737246143,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1513027210/","is_pending":"Not Pending","title":"Loud and Rich","memory":"52.1 MB","code":"class Solution {\npublic:\n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n        //richer[i] = [ai, bi] indicates that ai has more money than bi\n        int n = quiet.size();\n        //answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) \n        //among all people who definitely have equal to or more money than the person x.\n        vector<int> rets(n, -1);\n        unordered_map<int, vector<int>> mpPoorer;\n        vector<int> inDegree(n);\n        for(auto a: richer) {\n            mpPoorer[a[0]].push_back(a[1]);\n            inDegree[a[1]]++;\n        }\n        queue<int> q;\n        for(int i=0; i<n; i++) {\n            if(inDegree[i]==0)\n                q.push(i);\n            rets[i] = i;\n        };\n        while(!q.empty()) {\n            int cur = q.front();\n            q.pop();\n            for(int nxt: mpPoorer[cur]) {\n                if(quiet[rets[nxt]] > quiet[rets[cur]])\n                    rets[nxt] = rets[cur];\n                inDegree[nxt]--;\n                if(inDegree[nxt] == 0)\n                    q.push(nxt);\n            }\n        }\n        return rets;\n    }\n \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"loud-and-rich","has_notes":false,"flag_type":1}