{"id":1434617160,"question_id":410,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1729976379,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1434617160/","is_pending":"Not Pending","title":"Split Array Largest Sum","memory":"9.3 MB","code":"class Solution {\npublic:\n    int splitArray(vector<int>& nums, int K) {\n    long left = 0;\n    long right = INT_MAX;\n    //for(auto x: nums) {\n    //    left = max(left, x);\n    //    right += x;\n    //}\n    while (left < right ) {\n        long mid = left+(right-left)/2;\n        if(checkOK(nums, K, mid))\n            right = mid;\n        else\n            left = mid+1;\n    }\n    return (int)left;\n    /*    int N = nums.size();\n        auto dp = vector<vector<long>>(N+1, vector<long>(K+1, INT_MAX));\n        nums.insert(nums.begin(), 0);\n        dp[0][0] = 0;\n        for(int i=1; i<=N; i++) {\n            for(int k=1; k<=min(K, i); k++) {\n                long sum = 0;\n                for(int j=i; j>=k; j--) {\n                    sum += nums[j];\n                    dp[i][k] = min(dp[i][k], max(dp[j-1][k-1], sum));\n                }\n            }\n        }\n        return dp[N][K];*/\n    }\n    bool checkOK(vector<int>& nums, int K, long val) {\n        int count = 0;\n        for(int i=0; i<nums.size(); i++) {\n            if(nums[i] > val) \n                return false;\n            int j=i;\n            long sum = 0;\n            while(j<nums.size() && sum+(long)nums[j] <=val) {\n                sum += (long)nums[j];\n                j++;\n            }\n            count++;\n            i=j-1;\n        }\n        return count <= K;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"split-array-largest-sum","has_notes":false,"flag_type":1}