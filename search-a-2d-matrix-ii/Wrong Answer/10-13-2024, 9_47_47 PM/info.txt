{"id":1421651628,"question_id":240,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1728881267,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1421651628/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"N/A","code":"/*\nWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\n \nExample 1:\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n\nExample 2:\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n \nConstraints:\nm == matrix.length\nn == matrix[i].length\n1 <= n, m <= 300\n-109 <= matrix[i][j] <= 109\nAll the integers in each row are sorted in ascending order.\nAll the integers in each column are sorted in ascending order.\n-109 <= target <= 109\n*/\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int m = matrix.size();\n        if(m==0)\n            return false;\n        int n = matrix[0].size(); //column\n        if(n==0)\n            return false;\n        int left = 0;\n        int right = m*n-1;\n        int pivotIdx = 0;\n        int pivotVal = 0;\n        while(left <=right) {\n            pivotIdx = (left+right)/2;\n            int row = pivotIdx / n;\n            int col = pivotIdx % n;\n            pivotVal = matrix[row][col];\n            if(target == pivotVal)\n                return true;\n            else if(target < pivotVal)\n                right = pivotIdx-1;\n            else\n                left = pivotIdx+1;\n        }\n        return false;\n \n    }\n};","compare_result":"1111111111111111111111111111111111111011111111111111111111111111111111111111111111111111110111111110110011101101011011011011010100","title_slug":"search-a-2d-matrix-ii","has_notes":false,"flag_type":1}