{"id":1421659811,"question_id":240,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1728881869,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1421659811/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"17.7 MB","code":"/*\nWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\n \nExample 1:\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n\nExample 2:\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n \nConstraints:\nm == matrix.length\nn == matrix[i].length\n1 <= n, m <= 300\n-109 <= matrix[i][j] <= 109\nAll the integers in each row are sorted in ascending order.\nAll the integers in each column are sorted in ascending order.\n-109 <= target <= 109\n*/\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        if(matrix.size()==0 || matrix[0].size() == 0)\n            return false;\n        \n        int row = matrix.size()-1; //bottom left\n        int col = 0;\n        while( row >= 0 && col < matrix[0].size() ) {\n            if(matrix[row][col] > target) \n                row--;   //samller\n            else if(matrix[row][col] < target)\n                col++;   //bigger\n            else\n                return true;\n        }\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii","has_notes":false,"flag_type":1}