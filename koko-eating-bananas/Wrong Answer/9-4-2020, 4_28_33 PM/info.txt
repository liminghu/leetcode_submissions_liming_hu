{"id":391106741,"question_id":907,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599262113,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/391106741/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"N/A","code":"class Solution {\npublic:\n   //Time: O(N*log(M))\n    int minEatingSpeed(vector<int>& piles, int H) {\n        int left = 1;\n\t\tint right = 1;\n\t\t//max(piles);\n\t\tfor(int i=0; i<piles.size(); i++) {\n\t\t\tif (piles[i] > right )\n\t\t\t\tright = piles[i];\n\t\t}\n\t\t\n\t\twhile(left < right) {\n\t\t\tint mid = left+(right-left)/2;\n\t\t\t//contidion\n\t\t\tif (canEatInTime(piles, mid, H)) {\n\t\t\t\tright = mid -1;\n\t\t\t} else {\n\t\t\tleft = mid+1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn left;\n    }\nprivate:\nbool canEatInTime(vector<int>& piles, int k, int H) {\n\t//\n\tint hours = 0;\n\tfor (int pile: piles) {\n\t\tint div = pile/k;\n\t\thours += div;\n\t\tif(pile%k!=0) \n\t\t\thours++;\n\t}\n\treturn hours <=H;\n\t}\n};","compare_result":"1101001000011110001110000110011010001101101111101010001001101100101010111001001011001100100011111100000110111101100","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}