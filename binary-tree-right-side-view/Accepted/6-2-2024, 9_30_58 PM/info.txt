{"id":1275925429,"question_id":199,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717389058,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1275925429/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"14.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n \n    vector<int> rightSideView(TreeNode* root) {  //bfs\n        if (root == NULL) return vector<int>();\n\n        queue<TreeNode*> queue;\n        queue.push(root);\n        queue.push(NULL);\n        TreeNode *prev, *curr = root;\n        vector<int> rightside;\n\n        while (!queue.empty()) {\n            prev = curr;\n            curr = queue.front();\n            queue.pop();\n\n            while (curr != NULL) {\n                // add child nodes in the queue\n                if (curr->left != NULL) {\n                    queue.push(curr->left);\n                }\n                if (curr->right != NULL) {\n                    queue.push(curr->right);\n                }\n\n                prev = curr;\n                curr = queue.front();\n                queue.pop();\n            }\n\n            // the current level is finished\n            // and prev is its rightmost element\n            rightside.push_back(prev->val);\n\n            // add a sentinel to mark the end\n            // of the next level\n            if (!queue.empty()) queue.push(NULL);\n        }\n        return rightside;\n\n\n\n\n    /*    vector<int> ans;\n        queue<TreeNode*> q;\n        if(root==NULL)\n            return ans;\n        q.push(root);\n        q.push(NULL);\n        TreeNode* cur;\n        int layer = 0;\n        unordered_map<int,bool> layer_visited;\n        while(!q.empty()) {\n            cur = q.front();\n            q.pop();\n            if(cur==NULL ) {\n                layer++;\n            } else if(cur!=NULL) {\n                if(layer_visited.find(layer)==layer_visited.end()) {\n                    ans.push_back(cur->val);\n                    layer_visited[layer] = true;\n                }\n                if(cur->right == NULL  && cur->left!=NULL) {\n                    q.push(cur->left);\n                    q.push(NULL);\n                    \n                }\n                else if(cur->right != NULL && cur->left!=NULL)  {\n                    q.push(cur->right);\n                    q.push(cur->left);\n                    q.push(NULL);\n                    \n                } else if(cur->right != NULL && cur->left==NULL) {\n                    q.push(cur->right);\n                    q.push(NULL);\n                   \n                }\n            };\n        };\n        \n        return ans;\n        */\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}