{"id":1275892936,"question_id":199,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717386304,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1275892936/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int depth(TreeNode *root) {\n        int ans=0;\n        if(root==NULL)\n            return 0;\n        else if(root->left!=NULL && root->right!=NULL) {\n            int d_left = depth(root->left);\n            int d_right = depth(root->right);\n            if(d_left>d_right)\n                return d_left+1;\n            else\n                return d_right+1;\n        } else if(root->left==NULL) {\n            int d_right = depth(root->right);\n            return d_right+1;\n        } else if(root->right==NULL) {\n            int d_left = depth(root->left);\n            return d_left+1;\n        } else \n            return 1;\n            \n    }\n    vector<int> rightSideView(TreeNode* root) {  //bfs\n        vector<int> ans;\n        queue<TreeNode*> q;\n        if(root==NULL)\n            return ans;\n        q.push(root);\n        TreeNode* cur;\n        int layer = 0;\n        unordered_map<int, bool> layer_visited;\n        while(!q.empty()) {\n            cur = q.front();\n            q.pop();\n            layer = depth(cur);\n            if(layer_visited.find(layer)==layer_visited.end()) {\n                ans.push_back(cur->val);\n                layer_visited[layer] = true;\n                layer++;\n            }\n            if(cur->right == NULL  && cur->left!=NULL)\n                q.push(cur->left);\n            else if(cur->right != NULL && cur->left!=NULL)  {\n                q.push(cur->right);\n                q.push(cur->left);\n            } else if(cur->right != NULL && cur->left==NULL) \n                q.push(cur->right);\n\n        };\n        \n        return ans;\n    }\n};","compare_result":"111111000010100011100110100110100101111110100100000011110000010110111010010000111011001110010111000101101010111011111000100000100011110010010100010010011010011101001001101010010110010110111000101111101000100100100001","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}