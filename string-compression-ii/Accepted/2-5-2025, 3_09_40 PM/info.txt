{"id":1532923338,"question_id":1637,"lang":"cpp","lang_name":"C++","time":"1 day, 17 hours","timestamp":1738796980,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1532923338/","is_pending":"Not Pending","title":"String Compression II","memory":"10.5 MB","code":"class Solution {\n    // dp[left][k] means the minimal coding size for substring \n    // s[left:] and removing at most k chars\n    int dp[105][105];\n    string str;\n    int n;\n    inline int xs(int x) {\n        return x==1? 0: x<10? 1: x<100? 2: 3;\n    }\npublic:\n    int getLengthOfOptimalCompression(string s, int k) {//1 <= s.length <= 100\n        memset(dp, -1, sizeof(dp));\n        str = s;\n        n = s.length();\n        return solve(0, k);\n    }\n    int solve(int left, int k) {\n        if(k<0)\n            return 105; //invalid\n        if(left>=n || n-left<=k)\n            return 0; //empty\n        int& res = dp[left][k];\n        if(res!=-1)\n            return res;\n        res = 105;\n        int cnt[26] = {0};\n        // we try to make s[left:j] (both inculded) as one group,\n        // and all chars in this group should be the same.\n        // so we must keep the most chars in this range and remove others\n        // the range length is (j - left + 1)\n        // and the number of chars we need to remove is (j - left + 1 - most)   \n        for(int j=left, most = 0; j<n; j++) {\n            most = max(most, ++cnt[str[j]-'a']); // most = max(count(s[left:j]))\n            res = min(res, 1+xs(most)+solve(j+1, k-(j-left+1-most)));\n        }     \n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii","has_notes":false,"flag_type":1}