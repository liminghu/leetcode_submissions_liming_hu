{"id":1300273667,"question_id":1250,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719351682,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1300273667/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"25.7 MB","code":"class Solution {\npublic:\n/*\nGiven two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing \nthe relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\nA common subsequence of two strings is a subsequence that is common to both strings.\n*/\n    int longestCommonSubsequence(string text1, string text2) { //1 <= text1.length, text2.length <= 1000\n                                                                //text1 and text2 consist of only lowercase English characters.\n        int sz1 = text1.length();\n        int sz2 = text2.length();\n\n        vector<vector<int>> dp(sz1+1, vector<int>(sz2+1, 0));\n        dp[0][0] = 0;\n        dp[1][0] = 0;\n        dp[0][1] = 0;\n\n        for(int i=0; i<sz1; i++) {\n             for(int j=0; j<sz2; j++) {\n                if(text1[i]==text2[j])\n                    dp[i+1][j+1] = dp[i][j]+1;\n                else\n                    dp[i+1][j+1] = max( dp[i][j+1],  dp[i+1][j]);\n             }\n        }\n        return dp[sz1][sz2];\n\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"longest-common-subsequence","has_notes":false,"flag_type":1}