{"id":1443137059,"question_id":310,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730751858,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/1443137059/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"60.2 MB","code":"class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        if(n==1)\n            return {0};\n        if(n==2)\n            return {0, 1};\n        vector<vector<int>> next(n);\n        vector<int> degree(n);\n        for(auto edge: edges) {\n            int a = edge[0]; \n            int b = edge[1];\n            degree[a]++;\n            degree[b]++;\n            next[a].push_back(b);\n            next[b].push_back(a);\n        }    \n        queue<int> q;\n        for(int i=0; i<n; i++) {\n            if(degree[i] == 1)\n                q.push(i);\n        };\n        int count = 0;\n        while( !q.empty() ) {\n            int len = q.size();\n            while(len > 0) {\n                len--;\n                int cur = q.front();\n                q.pop();\n                count++;\n                for(int nxt: next[cur]) {\n                    degree[nxt]--;\n                    if(degree[nxt]==1)\n                        q.push(nxt);\n                }\n            }\n            if( count == n-1 || count == n-2 )\n                break;\n        }\n        vector<int> rets;\n        while(!q.empty()) {\n            rets.push_back(q.front());\n            q.pop();\n        }\n        return rets;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees","has_notes":false,"flag_type":1}