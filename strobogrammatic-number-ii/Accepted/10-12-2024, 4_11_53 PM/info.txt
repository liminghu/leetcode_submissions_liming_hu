{"id":1420436892,"question_id":247,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1728774713,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1420436892/","is_pending":"Not Pending","title":"Strobogrammatic Number II","memory":"33.8 MB","code":"/*\nGiven an integer n, return all the strobogrammatic numbers that are of length n. You may return the answer in any order.\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\n\nExample 1:\nInput: n = 2\nOutput: [\"11\",\"69\",\"88\",\"96\"]\n\nExample 2:\nInput: n = 1\nOutput: [\"0\",\"1\",\"8\"]\n \nConstraints:\n1 <= n <= 14\n*/\nclass Solution {\npublic:\n    unordered_map<char, char> mp;\n    vector<string> findStrobogrammatic(int n) {\n        mp['0'] = '0';\n        mp['1'] = '1';\n        mp['6'] = '9';\n        mp['9'] = '6';\n        mp['8'] = '8';\n        return generateStroboNumbers(n, n);\n    }\n    vector<string> generateStroboNumbers(int n, int finalLength) {\n        vector<string> res;\n        if( n == 0 )\n            return { \"\" };\n        if( n == 1 )\n            return { \"0\", \"1\", \"8\" };\n        vector<string> prevStroboNums = generateStroboNumbers(n-2, finalLength);\n        vector<string> curStrobeNums;\n        for(string& prevStroboNum: prevStroboNums) {\n            for(auto item: mp) {\n                if(! (item.first == '0' && n == finalLength) ) { // ||\n                    //except when the current reversible pair is '00' and n == finalLength \n                    //(because we can't append '0' at the beginning of a number) and push this new number in ans. \n                    curStrobeNums.push_back(item.first + prevStroboNum + item.second);\n                }\n            }\n        }\n        return curStrobeNums;\n    }\n};","compare_result":"11111111111111","title_slug":"strobogrammatic-number-ii","has_notes":false,"flag_type":1}