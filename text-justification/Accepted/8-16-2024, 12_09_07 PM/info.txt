{"id":1358183308,"question_id":68,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1723835347,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1358183308/","is_pending":"Not Pending","title":"Text Justification","memory":"9.1 MB","code":"/*Given an array of strings words and a width maxWidth, format the text such that each line has exactly \nmaxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. \nPad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a \nline does not divide evenly between words, the empty slots on the left will be assigned more spaces \nthan the slots on the right.\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\nNote:\n\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.\n*/\nclass Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n        /*  1 <= words.length <= 300\n            1 <= words[i].length <= 20\n            words[i] consists of only English letters and symbols.\n            1 <= maxWidth <= 100\n            words[i].length <= maxWidth\n        */\n        vector<string> rets;\n        for(int i=0; i<words.size(); i++) {  //suppose the current row: [words[i]...... words[j]]\n            int j = i; //the words in current row (adding the rows before)\n            int count = 0; //the filled letters per row.\n            while( j < words.size() && count <= maxWidth ) {\n                if(count == 0)\n                    count += words[j].size();\n                else \n                    count += 1 + words[j].size();\n                j++; //open interval.\n            }\n            j--; // close interval.\n            if( count > maxWidth ) {\n                count -= 1 + words[j].size();\n                j--;\n            }\n\n            if( j == words.size()-1 ) { //last word.\n                string temp;\n                for(int k=i; k<=j; k++) {\n                    temp += words[k] + \" \";\n                }\n                temp.pop_back(); //pop the last space.\n                temp += addspace(maxWidth-temp.size());\n                rets.push_back(temp);\n            } else {\n                rets.push_back(printline(words, maxWidth, i, j));\n            }\n            i = j;\n        }\n        return rets;\n    }\n    string printline(vector<string>& words, int maxWidth, int i, int j) {\n        if( i == j ) {\n            return words[i] + addspace(maxWidth - words[i].size());\n        };\n\n        int total = 0;\n        for(int k=i; k<=j; k++)\n            total += words[k].size();\n        int space = (maxWidth-total) / (j-i);\n        int extra = (maxWidth-total) - space * (j-i);\n\n        string ret;\n        for(int k=i; k < i+extra; k++) {\n            ret += words[k] + addspace(space+1);\n        };\n        for(int k=i+extra; k<j; k++) {\n            ret += words[k] + addspace(space);\n        }\n\n        ret += words[j];\n        \n        return ret;\n    }\n    string addspace(int k) {\n        string ret;\n        for(int i=0; i<k; i++) \n            ret+= \" \";\n        return ret;\n    }\n};","compare_result":"11111111111111111111111111111","title_slug":"text-justification","has_notes":false,"flag_type":1}