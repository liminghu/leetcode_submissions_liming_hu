{"id":1297326619,"question_id":3461,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719113499,"status":10,"status_display":"Accepted","runtime":"258 ms","url":"/submissions/detail/1297326619/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"132.2 MB","code":"class Solution {\npublic:\n/*\n    You are given a 2D binary array grid. Find a rectangle with horizontal and vertical sides with the smallest area, such that all the 1's in grid lie inside this rectangle.\nReturn the minimum possible area of the rectangle.\n*/\n    int minimumArea(vector<vector<int>>& grid) {\n        int left = 0;\n        int right = grid[0].size()-1; //2\n        int rows = grid.size();\n        int cols = grid[0].size();\n        \n        int top = 0;\n        int bottom = grid.size()-1; //1\n        \n        while(left<grid[0].size()) {  //left\n            //all columns are 0\n            int i=0;\n            for(; i<rows; i++) {\n                if(grid[i][left])\n                    break;                \n            }\n            if (i < rows && grid[i][left] )\n                    break;\n            left++;\n        };\n        \n        while(right>=0) {          //right\n            //all columns are 0\n            int i=0;\n            for(; i<rows; i++) {\n                if(grid[i][right])\n                    break;                \n            };\n            if(i < rows && grid[i][right] )\n                    break;   \n            right--;\n        };\n        \n        while(top<grid.size()) { //top\n            //all rows are 0\n            int j=0;\n            for(; j<cols; j++) {\n                if(grid[top][j])\n                    break;                \n            }\n            if(j < cols && grid[top][j]) break;\n            top++;\n        };\n        \n        while(bottom>=0) { //bottom\n            //all rows are 0\n            int j=0;\n            for(; j<cols; j++) {\n                if(grid[bottom][j])\n                    break;                \n            }\n            \n            if(j < cols && grid[bottom][j] ) break;\n            bottom--;\n        };\n        \n        int area = (right-left+1)*(bottom-top+1);\n        return area;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1}