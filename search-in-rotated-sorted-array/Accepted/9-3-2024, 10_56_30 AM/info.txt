{"id":1378004166,"question_id":33,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725386190,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1378004166/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"13.9 MB","code":"/*\nThere is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index \nk (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], \nnums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated \nat pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of \ntarget if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n*/\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        /*  1 <= nums.length <= 5000\n            -104 <= nums[i] <= 104\n            All values of nums are unique.\n            nums is an ascending array that is possibly rotated.\n            -104 <= target <= 104\n        */\n        int n = nums.size();\n        int left = 0;\n        int right = n-1;\n        \n        while(left <= right) {\n            int mid = ( left + right ) / 2;\n            if(nums[mid] == target)\n                return mid;\n\n            //subarray on mid's left is sorted\n            if(nums[mid] >= nums[left]) {\n                if( target >= nums[left] && target < nums[mid] )\n                    right = mid -1;\n                else\n                    left = mid + 1;\n            } else { //subarray on mid's right is sorted\n                if(target <=nums[right] && target > nums[mid])\n                    left = mid + 1;\n                else\n                    right = mid -1;            \n            };\n        }\n        return -1;\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}