{"id":1358358502,"question_id":1397,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1723853504,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/1358358502/","is_pending":"Not Pending","title":"Search Suggestions System","memory":"32.3 MB","code":"/*\nYou are given an array of strings products and a string searchWord.\nDesign a system that suggests at most three product names from products after each character \nof searchWord is typed. Suggested products should have common prefix with searchWord. If there \nare more than three products with a common prefix return the three lexicographically minimums products.\nReturn a list of lists of the suggested products after each character of searchWord is typed.\n*/\nstruct TrieNode {\n    bool isEnd;\n    TrieNode* child[26];\n    TrieNode() {\n        for(int i=0; i<26; i++) {\n            child[i] = NULL;\n        }\n        isEnd = false;\n    }\n};\n\nclass Solution {\n    TrieNode* root;\npublic:\n    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {\n        /*  1 <= products.length <= 1000\n            1 <= products[i].length <= 3000\n            1 <= sum(products[i].length) <= 2 * 104\n            All the strings of products are unique.\n            products[i] consists of lowercase English letters.\n            1 <= searchWord.length <= 1000\n            searchWord consists of lowercase English letters.\n        */\n      \n        sort(products.begin(), products.end());\n        vector<vector<string>> rets;\n        string pre = \"\";\n        for(int i=0; i<searchWord.size(); i++) {\n            pre.push_back(searchWord[i]);\n            vector<string> ret;\n            auto iter = lower_bound(products.begin(), products.end(), pre);\n            for(int k=0; k<3; k++) {\n                int len = pre.length();\n                if(iter == products.end())\n                    break;\n                if(iter->substr(0, len) != pre)\n                    break;\n                ret.push_back(*iter);\n                iter = next(iter,1);\n            }\n            rets.push_back(ret);\n        }\n        return rets;\n      \n    /*    root = new TrieNode();\n        for(auto product: products) {\n            TrieNode* node = root;\n            for(char ch:product) {\n                if(node->child[ch-'a'] == NULL) {\n                    node->child[ch-'a'] = new TrieNode();\n                }\n                node = node->child[ch-'a'];\n            };\n            node->isEnd = true; \n        }\n\n\n        vector<vector<string>> rets;\n        string pre= \"\";\n        TrieNode* node = root;\n        for(int i=0; i<searchWord.size(); i++) {\n            char ch = searchWord[i];\n            if(node->child[ch-'a'] == NULL) {\n                for(int j=i; j<searchWord.size(); j++) {\n                    rets.push_back({});\n                }\n                break;\n            }\n            node = node->child[ch-'a'];\n            pre.push_back(ch);\n\n            string str;\n            vector<string> ret;\n            DFS(node, str, ret);\n\n            for(int j=0; j<ret.size(); j++) {\n                ret[j] = pre + ret[j];\n            }\n            rets.push_back(ret);\n        }\n        return rets;*/\n    }\n\n    void DFS(TrieNode* node, string& str, vector<string>& ret) {\n        if(ret.size() == 3)\n            return;\n        if(node->isEnd == true)\n            ret.push_back(str);\n        \n        for(int i=0; i<26; i++) {\n            if(node->child[i] == NULL)\n                continue;\n            str.push_back('a'+i);\n            DFS(node->child[i], str, ret);\n            str.pop_back();\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"search-suggestions-system","has_notes":false,"flag_type":1}