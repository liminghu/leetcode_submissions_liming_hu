{"id":1415045229,"question_id":479,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728323193,"status":10,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/1415045229/","is_pending":"Not Pending","title":"Largest Palindrome Product","memory":"12.9 MB","code":"/*Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. \nSince the answer can be very large, return it modulo 1337.\n\n \n\nExample 1:\n\nInput: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\nExample 2:\n\nInput: n = 1\nOutput: 9\n \n\nConstraints:\n\n1 <= n <= 8\n*/\nclass Solution {\npublic:\n    int largestPalindrome(int n) { //1\n        //croner case\n        if(n==1)\n            return 9; //3*3\n        long long low = pow(10, n-1);  //1\n        long long high = low * 10 - 1; //9\n        for(long long i=high; i>=low; i--) { //10...1\n            long long p = createPalindrome(i);\n            for(int d = high; d>=sqrt(p); d--) {\n                if( p%d == 0 && p/d >=low)\n                    return p % 1337;\n            }\n        }\n        return -1;\n    }\n    long long createPalindrome( long long i) {\n        string s = to_string(i);\n        reverse(s.begin(), s.end());\n        return stoll(to_string(i) + s);\n    }\n};","compare_result":"11111111","title_slug":"largest-palindrome-product","has_notes":false,"flag_type":1}