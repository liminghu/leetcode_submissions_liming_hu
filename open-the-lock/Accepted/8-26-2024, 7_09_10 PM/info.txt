{"id":1369560073,"question_id":753,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724724550,"status":10,"status_display":"Accepted","runtime":"227 ms","url":"/submissions/detail/1369560073/","is_pending":"Not Pending","title":"Open the Lock","memory":"116.5 MB","code":"/*You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: \n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap \naround: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of \nturning one wheel one slot.\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\nYou are given a list of deadends dead ends, meaning if the lock displays any of these \ncodes, the wheels of the lock will stop turning and you will be unable to open it.\nGiven a target representing the value of the wheels that will unlock the lock, return \nthe minimum total number of turns required to open the lock, or -1 if it is impossible.\n*/\nclass Solution {\npublic:\n    int openLock(vector<string>& deadends, string target) {\n        /*  1 <= deadends.length <= 500\n            deadends[i].length == 4\n            target.length == 4\n            target will not be in the list deadends.\n            target and deadends[i] consist of digits only.\n        */\n        unordered_set<string> deads(deadends.begin(), deadends.end());\n        unordered_set<string> visited;\n        queue<string> q;\n\n        if(deads.find(\"0000\") !=deads.end() )\n            return -1;\n        q.push(\"0000\");\n        visited.insert(\"0000\");\n        if(target == \"0000\")\n            return 0;\n        int step = -1;\n        while(!q.empty()) {\n            step++;\n            int len = q.size();\n            while(len >0) {\n                len--;\n                string state = q.front();\n                q.pop();\n                for(string& next:scroll(state)) {\n                    if(visited.find(next)!=visited.end())\n                        continue;\n                    if(deads.find(next)!=deads.end())\n                        continue;\n                    if(next == target)\n                        return step+1;\n                    q.push(next);\n                    visited.insert(next);\n                }\n            }\n        }\n\n        return -1;\n    }\n    vector<string> scroll(string state) {\n        vector<string> rets;\n        for(int i=0; i<4; i++) {\n            for(int d=-1; d<=1; d+=2) {\n                int num = state[i]-'0';\n                num = (num+d+10)%10;\n                string temp = state;\n                temp[i] = '0'+num;\n                rets.push_back(temp);\n            }\n        }\n        return rets;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"open-the-lock","has_notes":false,"flag_type":1}