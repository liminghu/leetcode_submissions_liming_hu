{"id":1349354977,"question_id":921,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723153604,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1349354977/","is_pending":"Not Pending","title":"Spiral Matrix III","memory":"13.8 MB","code":"/*\nYou start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, \nand the southeast corner is at the last row and column.\n\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue \nour walk outside the grid (but may return to the grid boundary later.). \nEventually, we reach all rows * cols spaces of the grid.\n\nReturn an array of coordinates representing the positions of the grid in the order you visited them.\n*/\nclass Solution {\npublic:\n    vector<vector<int>> spiralMatrixIII(int rows, int cols, int rStart, int cStart) { //rows*cols\n        /*\n        1 <= rows, cols <= 100\n        0 <= rStart < rows\n        0 <= cStart < cols\n        */\n        vector<vector<int>> res;\n        int count = 1;\n        int cur_r = rStart;\n        int cur_c = cStart;\n        int step = 0;\n        int j = 0;\n        res.push_back({cur_r, cur_c});\n        auto dirs = vector<pair<int,int>>{ {0,1},{1,0},{0,-1},{-1,0} }; //right, down, left, up.\n        while(count < rows*cols) {\n            for(int k=0; k<step/2+1; k++) {\n                cur_r += dirs[j].first;\n                cur_c += dirs[j].second;\n                if(cur_r >=0 && cur_r < rows && cur_c >=0 && cur_c < cols) {\n                    res.push_back({cur_r, cur_c});\n                    count++;\n                }\n            }\n            step++;\n            j=(j+1)%4;\n        }\n        return res;\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"spiral-matrix-iii","has_notes":false,"flag_type":1}