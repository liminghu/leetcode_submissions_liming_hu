{"id":1409856788,"question_id":2026,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727906941,"status":10,"status_display":"Accepted","runtime":"398 ms","url":"/submissions/detail/1409856788/","is_pending":"Not Pending","title":"Merge Triplets to Form Target Triplet","memory":"167.5 MB","code":"/*\nA triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] \ndescribes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\n\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\n\nChoose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].\nFor example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to \n[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].\nReturn true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.\n\n1 <= triplets.length <= 105\ntriplets[i].length == target.length == 3\n1 <= ai, bi, ci, x, y, z <= 1000\n*/\nclass Solution {\npublic:\n    bool mergeTriplets(vector<vector<int>>& triplets, vector<int>& target) {\n        //triplets[i] = [ai, bi, ci]\n        //target = [x, y, z]\n        //Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].\n        bool reach_t1 = false;\n        bool reach_t2 = false;\n        bool reach_t3 = false;\n        int n = triplets.size();\n        for(auto triple: triplets) {\n            if(triple[0] == target[0] && triple[1] <= target[1] && triple[2] <= target[2] )\n                reach_t1 = true;   //this triple can be used to merget to target[0]\n            if(triple[1] == target[1] && triple[0] <= target[0] && triple[2] <= target[2] )\n                reach_t2 = true;   //this triple can be used to merget to target[1]\n            if(triple[2] == target[2] && triple[0] <= target[0] && triple[1] <= target[1] )\n                reach_t3 = true;   //this triple can be used to merget to target[2]\n        }\n        return reach_t1 == true && reach_t2 == true && reach_t3 == true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-triplets-to-form-target-triplet","has_notes":false,"flag_type":1}