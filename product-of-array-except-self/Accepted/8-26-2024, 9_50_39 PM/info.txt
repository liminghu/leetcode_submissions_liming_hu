{"id":1369662941,"question_id":238,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724734239,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1369662941/","is_pending":"Not Pending","title":"Product of Array Except Self","memory":"42.1 MB","code":"/*\nGiven an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n*/\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        /*\n            2 <= nums.length <= 105\n            -30 <= nums[i] <= 30\n            The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n        */\n        int n = nums.size();\n        vector<int> prefix(n,0);\n        prefix[0] = 1;\n        vector<int> suffix(n,0);\n        suffix[n-1] = 1;\n\n        for(int i=1; i<n; i++) {\n            prefix[i] = prefix[i-1] * nums[i-1]; //nums[n-1] is excluded.\n        };\n        for(int i=n-2; i>=0; i--) {\n            suffix[i] = suffix[i+1] * nums[i+1];\n        };\n\n        vector<int> res;\n        for(int i=0; i<n; i++) {\n            res.push_back(prefix[i] * suffix[i]);\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111","title_slug":"product-of-array-except-self","has_notes":false,"flag_type":1}