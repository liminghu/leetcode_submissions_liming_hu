{"id":1353557836,"question_id":2479,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1723491013,"status":10,"status_display":"Accepted","runtime":"273 ms","url":"/submissions/detail/1353557836/","is_pending":"Not Pending","title":"Meeting Rooms III","memory":"97.7 MB","code":"/*\nYou are given an integer n. There are n rooms numbered from 0 to n - 1.\n\nYou are given a 2D integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the \nhalf-closed time interval [starti, endi). All the values of starti are unique.\n\nMeetings are allocated to rooms in the following manner:\n\nEach meeting will take place in the unused room with the lowest number.\nIf there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the \nsame duration as the original meeting.\nWhen a room becomes unused, meetings that have an earlier original start time should be given the room.\nReturn the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number.\n\nA half-closed interval [a, b) is the interval between a and b including a and not including b.\n*/\nusing LL = long long;\nusing PLI = pair<LL, int>; //<avilable time, index>\n\nclass Solution {\npublic:\n    int mostBooked(int n, vector<vector<int>>& meetings) {\n        sort(meetings.begin(), meetings.end());\n\n        priority_queue<PLI, vector<PLI>, greater<PLI>> busy; //min queue.\n        priority_queue<int, vector<int>, greater<int>> free; //free available room, index.\n        for(int i=0; i<n; i++)\n            free.push(i);\n        \n        vector<LL> count(n, 0);\n\n        for(int i=0; i<meetings.size(); i++) {\n            LL start = meetings[i][0];\n            LL end = meetings[i][1];\n\n            while(!busy.empty() && busy.top().first <= start) { //put all the busy meetings which had finished into free.\n                free.push(busy.top().second);\n                busy.pop();\n            };\n\n            if(!free.empty()) {\n                int idx = free.top();\n                count[idx]++;\n                free.pop();\n                busy.push({end, idx});\n            }else { //wait.\n                auto [time, idx] = busy.top();\n                count[idx]++;\n                busy.pop();\n                busy.push({time+end-start, idx});\n            }\n        } \n\n        return max_element(count.begin(), count.end()) - count.begin();\n\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-iii","has_notes":false,"flag_type":1}