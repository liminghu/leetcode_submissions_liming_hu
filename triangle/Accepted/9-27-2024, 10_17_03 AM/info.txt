{"id":1404143197,"question_id":120,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727457423,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1404143197/","is_pending":"Not Pending","title":"Triangle","memory":"11.8 MB","code":"/*\nGiven a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, \nif you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n1 <= triangle.length <= 200\ntriangle[0].length == 1\ntriangle[i].length == triangle[i - 1].length + 1\n-104 <= triangle[i][j] <= 104\n \nFollow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?\n*/\nclass Solution {\npublic:\n    //[[2],                [[2]]\n    // [3,4],               [5,  6],\n    // [6,5,7],             [11, 10,  11],\n    // [4,1,8,3]]           [15, 11,  18, 14]]\n    int minimumTotal(vector<vector<int>>& triangle) {\n        int n = triangle.size();\n        //f[i][j] = mintotalof(i, j)\n        //f[i][j] = min(f[i-1][j], f[i-1][j-1]) + triangle[i-1][j-1];\n        vector<vector<int>> f(n+1, vector<int>(n+1, INT_MAX));\n        for(int i=1; i<=n; i++) {\n            for(int j=1; j<=i; j++) {\n                f[i][j] = triangle[i-1][j-1];\n                if(i==1 && j==1)\n                    continue;\n                if(j==1)\n                    f[i][j] += f[i-1][j];\n                else if(j==i)\n                    f[i][j] += f[i-1][j-1];\n                else\n                    f[i][j] += min(f[i-1][j-1], f[i-1][j]);\n            }\n        }\n        return *min_element(f[n].begin(), f[n].end());\n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"triangle","has_notes":false,"flag_type":1}