{"id":1350452248,"question_id":1713,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723243498,"status":10,"status_display":"Accepted","runtime":"157 ms","url":"/submissions/detail/1350452248/","is_pending":"Not Pending","title":"Dot Product of Two Sparse Vectors","memory":"172.5 MB","code":"/*Given two sparse vectors, compute their dot product.\n\nImplement class SparseVector:\n\nSparseVector(nums) Initializes the object with the vector nums\ndotProduct(vec) Compute the dot product between the instance of SparseVector and vec\nA sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.\n\nFollow up: What if only one of the vectors is sparse?\n*/\nclass SparseVector {\npublic:\n    unordered_map<int,int> sv; //idx, value\n    int sz;\n\n    SparseVector(vector<int> &nums) {\n        int sz = nums.size();\n        for(int i=0; i<sz; i++) {\n            if(nums[i]!=0) \n                sv[i] = nums[i];\n        }\n        this->sz = sz;\n        \n    }\n    \n    // Return the dotProduct of two sparse vectors\n    int dotProduct(SparseVector& vec) {\n        int res = 0;\n        for(int i=0; i<vec.sz; i++) {\n            if(vec.sv.find(i) != vec.sv.end() && this->sv.find(i) != this->sv.end())\n                res += vec.sv[i] * this->sv[i];\n        }\n        return res;\n        \n    }\n};\n\n// Your SparseVector object will be instantiated and called as such:\n// SparseVector v1(nums1);\n// SparseVector v2(nums2);\n// int ans = v1.dotProduct(v2);","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"dot-product-of-two-sparse-vectors","has_notes":false,"flag_type":1}