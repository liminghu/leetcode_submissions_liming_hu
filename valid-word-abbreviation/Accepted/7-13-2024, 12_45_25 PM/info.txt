{"id":1320038723,"question_id":408,"lang":"cpp","lang_name":"C++","time":"6 months, 4 weeks","timestamp":1720899925,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1320038723/","is_pending":"Not Pending","title":"Valid Word Abbreviation","memory":"7.8 MB","code":"/*\nA string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.\n\nFor example, a string such as \"substitution\" could be abbreviated as (but not limited to):\n\n\"s10n\" (\"s ubstitutio n\")\n\"sub4u4\" (\"sub stit u tion\")\n\"12\" (\"substitution\")\n\"su3i1u2on\" (\"su bst i t u ti on\")\n\"substitution\" (no substrings replaced)\nThe following are not valid abbreviations:\n\n\"s55n\" (\"s ubsti tutio n\", the replaced substrings are adjacent)\n\"s010n\" (has leading zeros)\n\"s0ubstitution\" (replaces an empty substring)\nGiven a string word and an abbreviation abbr, return whether the string matches the given abbreviation.\n\nA substring is a contiguous non-empty sequence of characters within a string.\n*/\nclass Solution {\npublic:\n    bool validWordAbbreviation(string word, string abbr) {\n        /*\n            1 <= word.length <= 20\n            word consists of only lowercase English letters.\n            1 <= abbr.length <= 10\n            abbr consists of lowercase English letters and digits.\n            All the integers in abbr will fit in a 32-bit integer.\n        */\n        int sz = word.length();\n        int a_sz = abbr.length();\n        int i = 0;\n        int j = 0;\n        while( i < sz  && j < a_sz) {\n            if( word[i] == abbr[j] ) {\n                i++; j++;\n            } else {\n                if(abbr[j]>='0' && abbr[j]<='9') {\n                    int digit = 0;\n                    while(abbr[j]>='0' && abbr[j]<='9' && j < a_sz) {\n                        if(abbr[j]=='0' && digit == 0) {\n                            return false;\n                        } else {\n                            digit = digit*10+abbr[j]-'0';\n                            j++;\n                        }\n                    }\n                    i = i + digit;\n                } else \n                    return false;\n            }\n\n        }\n\n        if(i==sz && j==a_sz)\n            return true;\n        else\n            return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-word-abbreviation","has_notes":false,"flag_type":1}