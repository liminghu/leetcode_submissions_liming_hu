{"id":1527933577,"question_id":540,"lang":"cpp","lang_name":"C++","time":"5 days, 19 hours","timestamp":1738445648,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1527933577/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"26.1 MB","code":"class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int n = nums.size();\n        int l=0;\n        int r = n-1;\n        while(l<r) {\n            int mid = (l+r)/2;\n            // for each pair, first element takes even position and second element takes odd position\n            //this pattern will be missed when single element is appeared in the array.\n            //if mid is even, then it's duplicate should be in next index.\n\t        //or if mid is odd, then it's duplicate  should be in previous index.\n            if(mid%2==0 &&nums[mid]==nums[mid+1] || mid%2==1 && nums[mid]==nums[mid-1])\n                l = mid+1; //check next half.\n            else\n                r = mid; //if condition is not satisfied, then the pattern is missed. so, single number must be before mid.\n        }\n        return nums[l];\n    }\n};","compare_result":"1111111111111111","title_slug":"single-element-in-a-sorted-array","has_notes":false,"flag_type":1}