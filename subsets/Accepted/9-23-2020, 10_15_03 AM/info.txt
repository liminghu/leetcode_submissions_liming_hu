{"id":399745250,"question_id":78,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1600881303,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/399745250/","is_pending":"Not Pending","title":"Subsets","memory":"7 MB","code":"class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) { //distinct.\n        //DFS+backtracking.\n\t\tvector<vector<int>> ans;\n\t\tvector<int> cur;\n\t\tfor(int i = 0; i <= nums.size(); i++)\n\t\t\tdfs(nums, i, 0, cur, ans);    //i:size.    0: start.\n\t\treturn ans;\n    }\nprivate: \n    //n: subset length.\n\t//s: starting element.\n\tvoid dfs(const vector<int>& nums, int n, int s, vector<int>& cur, vector<vector<int>>& ans) {\n\t\tif(cur.size() == n) {\n\t\t\tans.push_back(cur); //push back will make a copy.\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tfor(int i = s; i < nums.size(); i++) {\n\t\t\tcur.push_back(nums[i]);\n\t\t\tdfs(nums, n, i + 1, cur, ans);\n\t\t\tcur.pop_back();   //backtracking.\n\t\t}\n\t}\n};","compare_result":"1111111111","title_slug":"subsets","has_notes":false,"flag_type":1}