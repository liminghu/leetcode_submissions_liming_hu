{"id":1396070785,"question_id":214,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1726804350,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1396070785/","is_pending":"Not Pending","title":"Shortest Palindrome","memory":"11.7 MB","code":"/*\nYou are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\nExample 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\nExample 2:\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"\nConstraints:\n0 <= s.length <= 5 * 104\ns consists of lowercase English letters only.\n*/\nclass Solution {\npublic:\n    string shortestPalindrome(string s) {\n        string t = \"#\";\n        for (int i=0; i<s.size(); i++) {         //2*s.size()+1;   \n            t.push_back(s[i]);\n            t.push_back('#');\n        }\n\n        int n = t.size();\n        vector<int> P(n);\n        int maxCenter = -1;\n        int maxRight = -1;\n        int L = 1;\n        for (int i=0; i<n; i++) {\n            int r;\n            if ( i < maxRight) {\n                int j = maxCenter * 2 - i;\n                r = min(P[j], maxRight - i);\n            } else\n                r = 0;\n\n            while (i-r>=0 && i+r<n && t[i-r]==t[i+r])\n                r++;\n\n            P[i] = r-1;\n            if ( i+P[i] > maxRight ) {\n                maxRight = i+P[i];\n                maxCenter = i;\n            }\n\n            if ( i - P[i] == 0 )\n                L = P[i];\n        }\n        \n        string temp = s.substr(L);\n        reverse(temp.begin(), temp.end());\n        return temp + s; \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-palindrome","has_notes":false,"flag_type":1}