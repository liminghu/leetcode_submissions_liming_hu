{"id":1410952484,"question_id":83,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1727992418,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1410952484/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"16.5 MB","code":"/*\nGiven the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\nThe number of nodes in the list is in the range [0, 300].\n-100 <= Node.val <= 100\nThe list is guaranteed to be sorted in ascending order.\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(head == NULL || head->next == NULL)\n            return head;\n        ListNode* cur = head;\n        ListNode* prev = head;\n        while(cur) {\n            while( cur && prev->val == cur->val ) \n                cur = cur->next;\n            if( prev != cur )\n                prev->next = cur;\n            else if(prev == cur) \n                cur = cur->next;\n            prev = cur;\n        }\n        return head;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1}