{"id":1380325583,"question_id":286,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725562656,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1380325583/","is_pending":"Not Pending","title":"Walls and Gates","memory":"19.1 MB","code":"/*You are given an m x n grid rooms initialized with these three possible values.\n-1 A wall or an obstacle.\n0 A gate.\nINF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to \nrepresent INF as you may assume that the distance to a gate is less than 2147483647.\nFill each empty room with the distance to its nearest gate. \nIf it is impossible to reach a gate, it should be filled with INF.\nm == rooms.length\nn == rooms[i].length\n1 <= m, n <= 250\nrooms[i][j] is -1, 0, or 231 - 1.\n*/\n\nclass Solution {\npublic:\n    void wallsAndGates(vector<vector<int>>& rooms) {\n        const int EMPTY = 2147483647;\n        vector<pair<int,int>> dirs = {{1, 0}, {-1, 0}, {0,1}, {0, -1}};\n        int m = rooms.size();\n        int n = rooms[0].size();\n        // -1: wall, 0: gate, INT_MAX: empty.\n        queue<pair<int,int>> q;\n        vector<vector<int>> visited(m, vector<int>(n,0));\n        int count = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(rooms[i][j] == 0)  { //0: gate,\n                    q.push({i,j});\n                    count++;\n                    visited[i][j] = count;\n                    while(!q.empty()) {\n                        pair<int,int> cur = q.front();\n                        q.pop();\n                        for(auto dir:dirs) {\n                            int new_i = cur.first+dir.first;\n                            int new_j = cur.second+dir.second;\n                            if(new_i>=0 && new_i<m && new_j>=0 && new_j<n && rooms[new_i][new_j]!=-1 && rooms[new_i][new_j]!=0 && visited[new_i][new_j] < count) { //neither gate nor wall.\n                                rooms[new_i][new_j] = min(rooms[new_i][new_j], rooms[cur.first][cur.second]+1);\n                                visited[new_i][new_j] = count;\n                                q.push({new_i, new_j});\n                            }     \n                        }\n                    }\n                }\n            }\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates","has_notes":false,"flag_type":1}