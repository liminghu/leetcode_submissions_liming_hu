{"id":394021020,"question_id":22,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1599795397,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/394021020/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"14.9 MB","code":"\nclass Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n\t\t//Solution: DFS\n\t\t//Time complexity: O(2^n)\n\t\t//Space complexity: O(k + n)   \n/*\t\tvector<string> ans;\n\t\tstring cur;\n\t\tif (n > 0) \n\t\t\tdfs(n, n, cur, ans);\n\t\treturn ans;*/\n\t\t\n\t\t//https://leetcode.com/problems/generate-parentheses/discuss/817715/Easy-OptimizedConcise-and-Faster-Than-100.00-of-C%2B%2B-Submissions\n\t\tvector<string> v;\n\t\tok(v, \"\", 0, 0, n);\n\t\treturn v;\n\t\t\n    }\n\nprivate:\t\n\tvoid ok(vector<string> &v, string cur, int open, int close, int max) {\n\t\n\t\tif(cur.size() == max*2) {//we got the complete combination.\n\t\t\tv.push_back(cur);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(open < max) ok(v, cur+'(', open+1, close, max); //add opening.\n\t\tif(close < open) ok(v, cur+')', open, close+1, max); //add opening.\n\t}\n/*private:\n\tvoid dfs(int l, int r, string& s, vector<string>& ans) {\n\t\tif(l==0 && r == 0) {\n\t\t\tans.push_back(s);\n\t\t\treturn;\n\t\t};\n\t\tif(r<l) return;\n\t\tif(l>0) {\n\t\t\ts += \"(\";\n\t\t\tdfs(l-1,r, s, ans);\n\t\t\ts.pop_back();\n\t\t}\n\t\tif(r>0) {\n\t\t\ts+=\")\";\n\t\t\tdfs(l, r-1, s, ans);\n\t\t\ts.pop_back();\n\t\t};\n\t}*/\n\t\n};\n\n","compare_result":"11111111","title_slug":"generate-parentheses","has_notes":false,"flag_type":1}