{"id":1403432017,"question_id":101,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727394274,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1403432017/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"17.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        return isMirror(root, root);\n    }\n    bool isMirror(TreeNode* t1, TreeNode* t2) {\n        if(t1 == NULL && t2 == NULL)\n            return true;\n        if( t1 == NULL || t2 == NULL)\n            return false;\n        \n        return (t1->val == t2->val && isMirror(t1->right, t2->left) && isMirror( t1->left, t2->right));\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}