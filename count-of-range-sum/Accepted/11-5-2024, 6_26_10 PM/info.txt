{"id":1444369861,"question_id":327,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730859970,"status":10,"status_display":"Accepted","runtime":"490 ms","url":"/submissions/detail/1444369861/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"164.8 MB","code":"class Solution {\nint result;\npublic:\n    int countRangeSum(vector<int>& nums, int lower, int upper) {\n        int n = nums.size();\n        vector<long> presum(n+1, 0);\n        for(int i=0; i<n; i++)\n            presum[i+1] = presum[i] + nums[i];\n        divideConquer(presum, 0, n, lower, upper);\n        return result;\n    }\n    void divideConquer(vector<long>& presum, int a, int b, int lower, int upper) {\n        if( a >= b )\n            return;\n        int mid = a+(b-a)/2;\n        divideConquer(presum, a, mid, lower, upper);\n        divideConquer(presum, mid+1, b, lower, upper);\n        for(int i=a; i<=mid; i++) {\n            auto p1 = lower_bound(presum.begin()+mid+1, presum.begin()+b+1, presum[i]+lower);\n            auto p2 = upper_bound(presum.begin()+mid+1, presum.begin()+b+1, presum[i]+upper);\n            result += p2-p1;\n        }\n       // Merges two consecutive sorted ranges: [first,middle) and [middle,last), putting the result into the combined sorted range [first,last).\n        inplace_merge(presum.begin()+a, presum.begin()+mid+1, presum.begin()+b+1);\n    };\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1}