{"id":1404485994,"question_id":34,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727493092,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1404485994/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"16.3 MB","code":"/*\nGiven an array of integers nums sorted in non-decreasing order, \nfind the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\n0 <= nums.length <= 105\n-109 <= nums[i] <= 109\nnums is a non-decreasing array.\n-109 <= target <= 109\n*/\nclass Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        //nums sorted in non-decreasing order\n        //find the starting and ending position of a given target value.\n        int n = nums.size();\n        if(n==0)\n            return {-1,-1};\n        if(n==1) {\n            if(nums[0]==target)\n                return {0, 0};\n            else \n                return {-1, -1};\n        }\n        //at least 2 numbers.\n        int left = 0;\n        int right = n-1;\n        while(left <= right) {\n            int mid = left + (right-left+1)/2; //ceiling\n            if(nums[mid] < target)\n                left = mid+1;\n            else if(nums[mid] > target) \n                right = mid-1;\n            else { //found\n                vector<int> res(2,mid);\n                while(res[0]-1 >=0 && nums[ res[0]-1 ] == target)\n                    res[0]--;\n                while(res[1]+1 <n && nums[ res[1]+1 ] == target)\n                    res[1]++;\n                return res;\n            }\n        }\n        return {-1, -1};\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1}