{"id":1406695565,"question_id":74,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727667444,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1406695565/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"12 MB","code":"/*\nYou are given an m x n integer matrix matrix with the following two properties:\n\nEach row is sorted in non-decreasing order.\nThe first integer of each row is greater than the last integer of the previous row.\nGiven an integer target, return true if target is in matrix or false otherwise.\n\nYou must write a solution in O(log(m * n)) time complexity.\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-104 <= matrix[i][j], target <= 104\n*/\nclass Solution {\nprivate:\n    int m = 0;\n    int n = 0;\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        m = matrix.size();\n        if(m==0)\n            return false;\n        n = matrix[0].size(); //column\n        int left = 0;\n        int right = m*n-1;\n        int pivotIdx = 0;\n        int pivotVal = 0;\n        while(left <=right) {\n            pivotIdx = (left+right)/2;\n            int row = pivotIdx / n;\n            int col = pivotIdx % n;\n            pivotVal = matrix[row][col];\n            if(target == pivotVal)\n                return true;\n            else if(target < pivotVal)\n                right = pivotIdx-1;\n            else\n                left = pivotIdx+1;\n        }\n        return false;\n \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1}