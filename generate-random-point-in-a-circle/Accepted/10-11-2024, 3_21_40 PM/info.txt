{"id":1419441411,"question_id":915,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1728685300,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/1419441411/","is_pending":"Not Pending","title":"Generate Random Point in a Circle","memory":"32.1 MB","code":"/*\nGiven the radius and the position of the center of a circle, implement the function randPoint which \ngenerates a uniform random point inside the circle.\n\nImplement the Solution class:\nSolution(double radius, double x_center, double y_center) initializes the object with the radius of \nthe circle radius and the position of the center (x_center, y_center).\nrandPoint() returns a random point inside the circle. A point on the circumference of the circle is \nconsidered to be in the circle. The answer is returned as an array [x, y].\n \nExample 1:\nInput\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n \nConstraints:\n0 < radius <= 108\n-107 <= x_center, y_center <= 107\nAt most 3 * 104 calls will be made to randPoint.\n*/\nclass Solution {\npublic:\n    double radius;\n    double x_center;\n    double y_center;\n    //c++11 random floating point number generation\n    mt19937 rng{random_device{}()};\n    uniform_real_distribution<double> uni{0, 1};\n\n    Solution(double radius, double x_center, double y_center) {\n        this->radius = radius;\n        this->x_center = x_center;\n        this->y_center = y_center;\n    }\n    \n    vector<double> randPoint() {\n        double x0 = x_center - radius;\n        double y0 = y_center - radius;\n        while(true) {\n            double xg = x0 + uni(rng) *2 * radius;\n            double yg = y0 + uni(rng) *2 * radius;\n            if((xg-x_center)*(xg-x_center) + (yg-y_center)*(yg-y_center) <= radius*radius)\n                return {xg, yg};\n        }\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(radius, x_center, y_center);\n * vector<double> param_1 = obj->randPoint();\n */","compare_result":"11111111","title_slug":"generate-random-point-in-a-circle","has_notes":false,"flag_type":1}