{"id":1431898326,"question_id":505,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1729723958,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1431898326/","is_pending":"Not Pending","title":"The Maze II","memory":"N/A","code":"/*\nThere is a ball in a maze with empty spaces (represented as 0) and walls (represented as 1). The ball can go through the empty spaces by rolling up, down, \nleft or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\nGiven the m x n maze, the ball's start position and the destination, where start = [startrow, startcol] and destination = [destinationrow, destinationcol], \nreturn the shortest distance for the ball to stop at the destination. If the ball cannot stop at destination, return -1.\nThe distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).\nYou may assume that the borders of the maze are all walls (see examples).\n\n Example 1:\nInput: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]\nOutput: 12\nExplanation: One possible way is : left -> down -> left -> down -> right -> down -> right.\nThe length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\n\nExample 2:\nInput: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]\nOutput: -1\nExplanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.\n\nExample 3:\nInput: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]\nOutput: -1\n \nConstraints:\nm == maze.length\nn == maze[i].length\n1 <= m, n <= 100\nmaze[i][j] is 0 or 1.\nstart.length == 2\ndestination.length == 2\n0 <= startrow, destinationrow < m\n0 <= startcol, destinationcol < n\nBoth the ball and the destination exist in an empty space, and they will not be in the same position initially.\nThe maze contains at least 2 empty spaces.\n*/\nclass Solution {\n    vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\npublic:\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        return dijkstra(maze, start, destination);\n    }\n    int dijkstra(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        priority_queue< vector<int> > q; //{distance, x, y}\n        vector<vector<bool>> visited(maze.size(), vector<bool>(maze[0].size(), false));\n\n        q.push({0, start[0], start[1]});  \n        while( !q.empty() ) {\n            vector<int> t = q.top();\n            int dist = t[0];\n            int  r = t[1];\n            int  c = t[2];\n            q.pop();\n            if(visited[r][c] )\n                continue;\n            visited[r][c] = true;\n            if(r == destination[0] && c == destination[1])\n                return dist;\n\n\n            for(auto dir: dirs) {\n                int x = r;\n                int y = c;\n                int steps = 0;\n                while( x+dir[0] >= 0 && x+dir[0] < maze.size() && \n                       y+dir[1] >= 0 && y+dir[1] < maze[0].size() && \n                       maze[x+dir[0]] [y+dir[1]] == 0) {   //continue in one direction until wall.\n                    x += dir[0];\n                    y += dir[1];\n                    steps++;\n                }\n                if(!visited[x][y]) {\n                    vector<int> e(3);\n                    e[0] = dist + steps;\n                    e[1] = x;\n                    e[2] = y;\n                    q.push(e);\n                }\n            };\n        }\n        return -1;\n    }\n};\n/*class Solution {\n    vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\npublic:\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        vector<vector<int>> dist(maze.size(), vector<int>(maze[0].size(), INT_MAX));\n        dist[start[0]][start[1]] = 0;\n        dfs(maze, start, dist);\n        return dist[destination[0]][destination[1]]==INT_MAX? -1: dist[destination[0]][destination[1]];\n    }\n    void dfs(vector<vector<int>>& maze, vector<int>& start, vector<vector<int>>& dist) {\n        for(auto dir: dirs) {\n            int x = start[0];\n            int y = start[1];\n            int count = 0;\n            while( x+dir[0] >= 0 && x+dir[0] < maze.size() && \n                   y+dir[1] >= 0 && y+dir[1] < maze[0].size() && \n                   maze[x+dir[0]] [y+dir[1]] == 0) {   //continue in one direction until wall.\n                    x += dir[0];\n                    y += dir[1];\n                    count++;\n            }\n            if(dist [start[0] ][ start[1] ] + count < dist[x][y]) {\n                dist[x][y] = dist[ start[0] ][ start[1] ] + count;\n                vector<int> new_start(2);\n                new_start[0] = x;\n                new_start[1] = y;\n                dfs(maze, new_start, dist);\n            }\n        }\n    }\n};*/","compare_result":"1111000011111111001101111111000000001011111111000000000000000000000001111111110","title_slug":"the-maze-ii","has_notes":false,"flag_type":1}