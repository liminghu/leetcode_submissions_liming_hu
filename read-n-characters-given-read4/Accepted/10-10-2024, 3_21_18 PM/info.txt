{"id":1418502369,"question_id":157,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1728598878,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1418502369/","is_pending":"Not Pending","title":"Read N Characters Given Read4","memory":"8 MB","code":"/*\nGiven a file and assume that you can only read the file using a given method read4, implement a method to read n characters.\nMethod read4:\nThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\nThe return value is the number of actual characters read.\nNote that read4() has its own file pointer, much like FILE *fp in C.\n\nDefinition of read4:\n    Parameter:  char[] buf4\n    Returns:    int\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\nBelow is a high-level example of how read4 works:\nFile file(\"abcde\"); // File is \"abcde\", initially file pointer (fp) points to 'a'\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = \"abcd\", fp points to 'e'\nread4(buf4); // read4 returns 1. Now buf4 = \"e\", fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = \"\", fp points to end of file\n \nMethod read:\nBy using the read4 method, implement the method read that reads n characters from file and store it in the buffer array \nbuf. Consider that you cannot manipulate file directly.\nThe return value is the number of actual characters read.\nDefinition of read:\n    Parameters:\tchar[] buf, int n\n    Returns:\tint\nbuf[] is a destination, not a source. You will need to write the results to buf[].\nNote:\nConsider that you cannot manipulate the file directly. The file is only accessible for read4 but not for read.\nThe read function will only be called once for each test case.\nYou may assume the destination buffer array, buf, is guaranteed to have enough space for storing n characters.\n \nExample 1:\nInput: file = \"abc\", n = 4\nOutput: 3\nExplanation: After calling your read method, buf should contain \"abc\". We read a total of 3 characters from the file, so return 3.\nNote that \"abc\" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.\n\nExample 2:\nInput: file = \"abcde\", n = 5\nOutput: 5\nExplanation: After calling your read method, buf should contain \"abcde\". We read a total of 5 characters from the file, so return 5.\n\nExample 3:\nInput: file = \"abcdABCD1234\", n = 12\nOutput: 12\nExplanation: After calling your read method, buf should contain \"abcdABCD1234\". We read a total of 12 characters from the file, so return 12.\n \nConstraints:\n1 <= file.length <= 500\nfile consist of English letters and digits.\n1 <= n <= 1000\n*/\n/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char *buf4);\n */\n\nclass Solution {\npublic:\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    int read(char *buf, int n) {\n        int copiedChars = 0;\n        int readChars = 4;\n        char buf4[4];\n\n        while(copiedChars < n && readChars == 4) {\n            readChars = read4(buf4);\n            for(int i=0; i<readChars; i++) {\n                if(copiedChars == n )\n                    return copiedChars;\n                buf[copiedChars] = buf4[i];\n                copiedChars++;\n            }; \n        }\n        return copiedChars;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"read-n-characters-given-read4","has_notes":false,"flag_type":1}