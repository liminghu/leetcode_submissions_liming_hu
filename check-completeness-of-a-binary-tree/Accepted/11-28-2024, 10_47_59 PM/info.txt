{"id":1465584882,"question_id":998,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1732862879,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1465584882/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"13.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        if(root==NULL)\n            return true;\n        bool nullNodeFound = false;\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if(node == nullptr)\n                nullNodeFound = true;\n            else {\n                if(nullNodeFound)\n                    return false;\n                q.push(node->left);\n                q.push(node->right);\n            }\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}