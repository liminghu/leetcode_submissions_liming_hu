{"id":1465579022,"question_id":998,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1732862304,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1465579022/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        if(root==NULL)\n            return true;\n        if(root->left == NULL && root->right == NULL)\n            return true;\n        if(root->left == NULL && root->right !=NULL)\n            return false;\n        if(root->left != NULL) {\n            if(isCompleteTree(root->left))\n                return isCompleteTree(root->right);\n            else\n                return false;\n        }\n        return false;\n    }\n};","compare_result":"111111111100111111001101110111110011100111011001111010011111111101011001101111010001010010100101001010010100101001010100","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}