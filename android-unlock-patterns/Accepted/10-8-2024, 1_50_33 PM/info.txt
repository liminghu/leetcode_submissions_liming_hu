{"id":1416314887,"question_id":351,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728420633,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1416314887/","is_pending":"Not Pending","title":"Android Unlock Patterns","memory":"8.7 MB","code":"/*\nAndroid devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, \nforming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid \nunlock pattern if both of the following are true:\n\nAll the dots in the sequence are distinct.\nIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously \nappeared in the sequence. No jumps through the center non-selected dots are allowed.\nFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through \nthe center of either dot 5 or 6.\nHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\nHere are some example valid and invalid unlock patterns:\n\nThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\nThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\nThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously \nappeared in the sequence.\nThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously \nappeared in the sequence.\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\n\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.\n\nExample 1:\nInput: m = 1, n = 1\nOutput: 9\n\nExample 2:\nInput: m = 1, n = 2\nOutput: 65\n \nConstraints:\n1 <= m, n <= 9\n*/\nclass Solution {\npublic:\n    int numberOfPatterns(int m, int n) { //Given two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of\n    // at least m keys and at most n keys.\n        vector<vector<int>> skip = vector(10, vector(10,0));\n        skip[1][3] = skip[3][1] = 2;\n        skip[4][6] = skip[6][4] = 5;\n        skip[7][9] = skip[9][7] = 8;\n\n        skip[1][7] = skip[7][1] = 4;\n        skip[2][8] = skip[8][2] = 5;\n        skip[3][9] = skip[9][3] = 6;\n\n        skip[1][9] = skip[9][1] = 5;\n        skip[7][3] = skip[3][7] = 5;\n        \n        vector<bool> visited(10, false);\n        int res = 0;\n        for(int i=m; i<=n; i++) {\n            //1, 3, 7, 9 same.\n            res += dfs(visited, skip, 1, i-1)*4;\n            //2, 4, 6, 8 same\n            res += dfs(visited, skip, 2, i-1)*4;\n            //5\n            res += dfs(visited, skip, 5, i-1);\n        }\n        \n        return res;\n    }\n    int dfs(vector<bool>& visited, vector<vector<int>>& skip, int cur, int remain) {\n        if( remain < 0 )    \n            return 0;\n        if( remain == 0 )\n            return 1;\n        \n        visited[cur] = true;\n        int ret = 0;\n        for(int i=1; i<=9; i++) {\n            //i is not visited, && ( skip[cur][i] == 0, or visited [ skip[cur][i] ] )\n            if( !visited[i] && ( skip[cur][i] == 0 || visited[ skip[cur][i] ] ) )\n                ret += dfs(visited, skip, i, remain-1);\n        }\n        visited[cur] = false;\n        return ret;\n    }\n};","compare_result":"111111111111111111111111","title_slug":"android-unlock-patterns","has_notes":false,"flag_type":1}