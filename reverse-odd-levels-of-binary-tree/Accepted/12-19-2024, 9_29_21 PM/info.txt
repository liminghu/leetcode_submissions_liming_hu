{"id":1483471308,"question_id":2493,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1734672561,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1483471308/","is_pending":"Not Pending","title":"Reverse Odd Levels of Binary Tree","memory":"84 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        if(root==NULL)\n            return root;\n        if(root->left == NULL && root->right == NULL)\n            return root;\n        int level = 0;\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()) {\n            int sz = q.size();\n            vector<TreeNode*> curLevelNodes;\n            for(int i=0; i<sz; i++) {\n                TreeNode* cur = q.front();\n                q.pop();\n                curLevelNodes.push_back(cur);\n                if(cur->left)\n                    q.push(cur->left);\n                if(cur->right)\n                    q.push(cur->right);\n            }\n            if(level%2==1) {\n                int left = 0;\n                int right = curLevelNodes.size()-1;\n                while(left<right) {\n                    int temp = curLevelNodes[left]->val;\n                    curLevelNodes[left]->val = curLevelNodes[right]->val;\n                    curLevelNodes[right]->val = temp;\n                    left++;\n                    right--;\n                };\n            };\n            level++;\n        }\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-odd-levels-of-binary-tree","has_notes":false,"flag_type":1}