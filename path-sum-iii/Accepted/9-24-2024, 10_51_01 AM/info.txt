{"id":1401023691,"question_id":437,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727200261,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1401023691/","is_pending":"Not Pending","title":"Path Sum III","memory":"17.7 MB","code":"/*\nGiven the root of a binary tree and an integer targetSum, return the number of paths where \nthe sum of the values along the path equals targetSum.\nThe path does not need to start or end at the root or a leaf, but it must go downwards \n(i.e., traveling only from parent nodes to child nodes).\nThe number of nodes in the tree is in the range [0, 1000].\n-109 <= Node.val <= 109\n-1000 <= targetSum <= 1000\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ret = 0;\n    int pathSum(TreeNode* root, int targetSum) {\n        if(root) {\n            dfs(root, targetSum);\n            pathSum(root->left, targetSum);\n            pathSum(root->right, targetSum);\n        }\n        return ret;\n    }\n    void dfs(TreeNode* root, long long sum) {\n        if(root == NULL)\n            return;\n        if(root->val == sum )\n            ret++;\n        dfs(root->left,  sum-root->val);\n        dfs(root->right, sum-root->val);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-iii","has_notes":false,"flag_type":1}