{"id":1431714551,"question_id":1032,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1729707279,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1431714551/","is_pending":"Not Pending","title":"Satisfiability of Equality Equations","memory":"15.2 MB","code":"/*\nYou are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 \nand takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) \nthat represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\n\n Example 1:\nInput: equations = [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n\nExample 2:\nInput: equations = [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\n \nConstraints:\n1 <= equations.length <= 500\nequations[i].length == 4\nequations[i][0] is a lowercase letter.\nequations[i][1] is either '=' or '!'.\nequations[i][2] is '='.\nequations[i][3] is a lowercase letter.\n*/\nclass Solution {\npublic:\n    class DSU {\n        vector<int> father;\n    public:\n        DSU(int n) {\n            father.resize(n);\n            for(int i=0; i<n; i++) {\n                father[i] = i;\n            }\n\n        }\n        void Union(int x, int y) {\n            x = findFather(x);\n            y = findFather(y);\n            if( x < y )\n                father[y] = x;\n            else\n                father[x] = y;\n        }\n        int findFather(int x) {\n            if( father[x] != x ) {\n                father[x] = findFather(father[x]);\n            };\n            return father[x];\n        }\n    };\n    bool equationsPossible(vector<string>& equations) { //Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\n        int n = equations.size();\n        DSU dsu(26);\n        for(int i=0; i<n; i++) {\n            char a = equations[i][0];\n            char re = equations[i][1];   //=, !\n            char b = equations[i][3];\n            if(re == '=' )\n                dsu.Union(a-'a', b-'a'); \n        };\n        for(int i=0; i<n; i++) {\n            char a = equations[i][0];\n            char re = equations[i][1];   //=, !\n            char b = equations[i][3];\n            if(re == '!') { //!=\n                int fb = dsu.findFather(b-'a');\n                int fa = dsu.findFather(a-'a');\n                cout << \"1: \" <<a << \" fahter: \" <<char(fa+'a') << endl;\n                cout << \"2: \" <<b << \" fahter: \" <<char(fb+'a') << endl;\n                 \n                if( fa == fb )\n                    return false;\n            }\n        };        \n        return true;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"satisfiability-of-equality-equations","has_notes":false,"flag_type":1}