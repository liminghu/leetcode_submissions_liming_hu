{"id":1447155630,"question_id":363,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1731111172,"status":10,"status_display":"Accepted","runtime":"714 ms","url":"/submissions/detail/1447155630/","is_pending":"Not Pending","title":"Max Sum of Rectangle No Larger Than K","memory":"248.7 MB","code":"class Solution {\npublic:\n    int maxSumSubmatrix(vector<vector<int>>& matrix, int K) {\n        int m = matrix.size(); //rows\n        int n = matrix[0].size(); //cols.\n        int res = INT_MIN;\n        if(m>n) {\n            vector<vector<int>> matrix2(n, vector<int>(m,0));\n            for(int i=0; i<m; i++) \n                for(int j=0; j<n; j++)\n                    matrix2[j][i] = matrix[i][j];\n            return maxSumSubmatrix(matrix2, K);\n        };\n\n        for(int i=0; i<m; i++) {   //start row.\n            vector<int> row(n, 0);\n            for(int j=i; j<m; j++) {//end row.\n                for(int k=0; k<n; k++) \n                    row[k] = row[k] + matrix[j][k]; //compress all the rows to one row.\n                res = max(res, helper(row, K));    \n            } ;   \n        };\n        return res;\n    }\n    int helper(vector<int>& nums, int K) {\n        int n = nums.size();\n        int presum = 0;\n        multiset<int> Set({0});\n        int res = INT_MIN;\n        for(int j=0; j<n; j++) {\n            presum += nums[j];\n            auto iter = Set.lower_bound(presum-K);\n            if(iter != Set.end()) \n                res = max(res, presum-*iter);\n            Set.insert(presum);\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"max-sum-of-rectangle-no-larger-than-k","has_notes":false,"flag_type":1}