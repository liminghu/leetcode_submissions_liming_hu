{"id":1357154855,"question_id":636,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1723766589,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1357154855/","is_pending":"Not Pending","title":"Exclusive Time of Functions","memory":"N/A","code":"/*On a single-threaded CPU, we execute a program containing n functions. Each function has a \nunique ID between 0 and n-1.\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto \nthe stack, and when a function call ends, its ID is popped off the stack. The function whose ID \nis at the top of the stack is the current function being executed. Each time a function starts \nor ends, we write a log with the ID, whether it started or ended, and the timestamp.\n\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \n\"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function \ncall with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function \ncall with function ID 1 ended at the end of timestamp 2. Note that a function can be called \nmultiple times, possibly recursively.\n\nA function's exclusive time is the sum of execution times for all function calls in the program. \nFor example, if a function is called twice, one call executing for 2 time units and another call \nexecuting for 1 time unit, the exclusive time is 2 + 1 = 3.\n\nReturn the exclusive time of each function in an array, where the value at the ith index represents \nthe exclusive time for the function with ID i.\n*/\nclass Solution {\npublic:\n    vector<int> exclusiveTime(int n, vector<string>& logs) {\n        /*  1 <= n <= 100\n            1 <= logs.length <= 500\n            0 <= function_id < n\n            0 <= timestamp <= 109\n            No two start events will happen at the same timestamp.\n            No two end events will happen at the same timestamp.\n            Each function has an \"end\" log for each \"start\" log.\n        */\n        \n        //string: \"{function_id}:{\"start\" | \"end\"}:{timestamp}\"\n        vector<int> et(n, 0);\n        stack<pair<int, int>> process; //id, timestamp.\n        for(int i=0; i<logs.size(); i++) {\n            //string: \"{function_id}:{\"start\" | \"end\"}:{timestamp}\"\n            string item = logs[i];\n            int start_end_pos = logs[i].find(\":\",0);\n            string id = logs[i].substr(0, start_end_pos);\n            int id_i = stoi(id);\n            int timestamp_pos = logs[i].find(\":\", start_end_pos+1);\n            string start_end = logs[i].substr(start_end_pos+1, timestamp_pos-start_end_pos-1);\n            string timestamp = logs[i].substr(timestamp_pos+1, logs[i].size() - timestamp_pos+1);\n            int timestamp_i = stoi(timestamp); \n            //cout << id << \"start_end= \" << start_end << \" timestamp= \" << timestamp << endl;\n            if(start_end == \"start\") {\n                process.push({id_i, timestamp_i});\n            } else if(start_end == \"end\") {\n                pair<int, int> t = process.top();\n                //id: t.first, timestamp: t.second\n                if(t.first == id_i) {\n                    et[t.first] += timestamp_i - t.second+1;\n                    process.pop();                  \n                    if(!process.empty()) {\n                        int prevId = process.top().second;\n                        et[prevId] -= timestamp_i - t.second+1;\n                    }\n                } else {\n                   cout << id << \"start_end= \" << start_end << \" timestamp= \" << timestamp << endl;\n                   cout << \"sth wrong!\"<<endl; \n                }\n            }\n        }\n\n        return et;\n\n\n    }\n};","compare_result":"111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"exclusive-time-of-functions","has_notes":false,"flag_type":1}