{"id":1422491990,"question_id":2487,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1728940597,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1422491990/","is_pending":"Not Pending","title":"Optimal Partition of String","memory":"54.7 MB","code":"/*\nGiven a string s, partition the string into one or more substrings such that the characters in each substring are unique. \nThat is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.\n\n Example 1:\nInput: s = \"abacaba\"\nOutput: 4\nExplanation:\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed.\n\nExample 2:\nInput: s = \"ssssss\"\nOutput: 6\nExplanation:\nThe only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\").\n \nConstraints:\n1 <= s.length <= 105\ns consists of only English lowercase letters.\n*/\nclass Solution {\npublic:\n    int partitionString(string s) {\n        int n = s.length();\n        if( n <= 1 )\n            return 1;\n        int i = 0;\n        int res = 0;\n        while( i < n ) {\n            int j = i;\n            vector<int> count(26, 0);\n            bool endSub = false;\n            while( j < n && endSub == false) {\n                if(count[ s[j] - 'a' ] == 0) {\n                   count[ s[j] - 'a' ] = 1;\n                   j++;\n                } else {\n                    i = j;\n                    res++;\n                    endSub = true;\n                }\n            };\n            \n            if(j == n ) {\n                endSub = true;\n                res++;\n                i = j;\n            }\n        }\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"optimal-partition-of-string","has_notes":false,"flag_type":1}