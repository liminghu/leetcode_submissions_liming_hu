{"id":1518448933,"question_id":2176,"lang":"cpp","lang_name":"C++","time":"2Â weeks","timestamp":1737670622,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/1518448933/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"150.5 MB","code":"class Solution {\npublic:\n    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {\n        //n, which indicates that there are n courses labeled from 1 to n\n        //relations[j] = [prevCoursej, nextCoursej]\n        //time[i] denotes how many months it takes to complete the (i+1)th course.\n        \n        vector<int> inDegree(n, 0);\n        vector<vector<int>> next(n);\n        for(vector<int> relation: relations) {\n            int prevCoursej = relation[0]-1;\n            int nextCoursej = relation[1]-1;\n            next[prevCoursej].push_back(nextCoursej);\n            inDegree[nextCoursej]++;\n        } \n        queue<int> q;\n        vector<int> maxTime(n, 0);\n        for(int i=0; i<n; i++) {\n            if(inDegree[i]==0) {\n                q.push(i);\n                maxTime[i] = time[i];\n            }\n        };\n        while(!q.empty()) {\n            int cur = q.front();\n            q.pop();\n            for(int j=0; j<next[cur].size(); j++) {\n                int neighbor = next[cur][j];\n                maxTime[neighbor] = max(maxTime[neighbor], maxTime[cur]+time[neighbor]);\n                inDegree[next[cur][j]]--;\n                if(inDegree[next[cur][j]] == 0)\n                    q.push(next[cur][j]);\n            };\n        };\n        int ans = 0;\n        for(int node = 0; node<n; node++)\n            ans = max(ans, maxTime[node]);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false,"flag_type":1}