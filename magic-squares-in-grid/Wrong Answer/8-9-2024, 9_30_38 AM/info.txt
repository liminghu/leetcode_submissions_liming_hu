{"id":1350153231,"question_id":870,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723221038,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1350153231/","is_pending":"Not Pending","title":"Magic Squares In Grid","memory":"N/A","code":"/*\nA 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, \ncolumn, and both diagonals all have the same sum.\nGiven a row x col grid of integers, how many 3 x 3 contiguous magic square subgrids are there?\nNote: while a magic square can only contain numbers from 1 to 9, grid may contain numbers up to 15.\n*/\nclass Solution {\npublic:\n    int numMagicSquaresInside(vector<vector<int>>& grid) {\n        /*  row == grid.length\n            col == grid[i].length\n            1 <= row, col <= 10\n            0 <= grid[i][j] <= 15\n        */\n        int row = grid.size();\n        int col = grid[0].size();\n\n        if(row < 3 || col < 3)\n            return 0;\n        \n        int res = 0;\n\n        for(int i=0; i+2<=row-1; i++) {\n            for(int j=0; j+2<=col-1; j++) {\n                if (isMagicSquare(grid, i, j) )\n                res++;\n            }\n        }\n        return res;\n    }\n\n    bool isMagicSquare(vector<vector<int>>& grid, int startr, int startc) {\n        int row = grid.size();\n        int col = grid[0].size();\n\n        if(startr+2 >row-1 || startc+2 > col-1)\n            return false;\n\n        //are they all distinct?\n        unordered_set<int> s;\n       for(int i=0; i<3; i++) {\n            for(int j=0; j<3; j++) {\n                if(s.find(grid[startr+i][startc+j]) == s.end())\n                    s.insert(grid[startr+i][startc+j]);\n                else\n                    return false;\n            }\n        }\n\n        //check row\n        int first_sum = -1;\n        for(int i=0; i<3; i++) {\n            int sum = 0;\n            for(int j=0; j<3; j++) {\n                sum += grid[startr+i][startc+j]; \n            }\n            if(first_sum < 0)\n                first_sum = sum;\n            if(sum!=first_sum)\n                return false;\n        }\n\n        //check diagonals\n        int sum = 0;\n        for(int i=0, j=0; i<3; i++, j++) {\n            sum += grid[startr+i][startc+j]; \n        }\n        if(sum!=first_sum)\n            return false;\n\n        //check anti-diagonals\n        sum = 0;\n        for(int i=0, j=2; i<3; i++, j--) {\n            sum += grid[startr+i][startc+j]; \n        }\n       if(sum!=first_sum)\n            return false;\n        //check col   \n       for(int j=0; j<3; j++) {\n            int sum = 0;\n            for(int i=0; i<3; i++) {\n                sum += grid[startr+i][startc+j]; \n            }\n            if(sum!=first_sum)\n                return false;\n        }    \n\n        return true;         \n    }\n};","compare_result":"111111111111101010011111000000011010010011100000000111100000011000000001100000000110000000110","title_slug":"magic-squares-in-grid","has_notes":false,"flag_type":1}