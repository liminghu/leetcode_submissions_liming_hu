{"id":1369253598,"question_id":236,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724694744,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1369253598/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"16.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        /*  The number of nodes in the tree is in the range [2, 105].\n            -109 <= Node.val <= 109\n            All Node.val are unique.\n            p != q\n            p and q will exist in the tree.\n        */\n        if(root == NULL)\n            return root;\n        if(root == p)\n            return p;\n        if(root == q)\n            return q;\n        \n        TreeNode *leftAnce = lowestCommonAncestor(root->left, p, q);       \n        TreeNode *rightAnce = lowestCommonAncestor(root->right, p, q);\n        if( leftAnce != NULL && rightAnce != NULL )\n            return root;\n        \n        if(leftAnce != NULL)\n            return leftAnce;\n        else \n            return rightAnce;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}