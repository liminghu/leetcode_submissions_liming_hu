{"id":1317926115,"question_id":1298,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1720723768,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1317926115/","is_pending":"Not Pending","title":"Reverse Substrings Between Each Pair of Parentheses","memory":"N/A","code":"/*You are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.\n */\nclass Solution {\npublic:\n    string reverseParentheses(string s) {\n        /*1 <= s.length <= 2000\n            s only contains lower case English characters and parentheses.\n            It is guaranteed that all parentheses are balanced. \n        */\n        int sz = s.length();\n        if(sz <=1)\n            return s;\n        \n        stack<int> st;\n        queue<int> qu;\n        string ans = s;\n        for(int i=0; i<sz; i++) {\n            if(s[i] == '(')\n                st.push(i);\n            else if(s[i] == ')')\n                qu.push(i);\n        };\n\n        if(st.size() != qu.size()) {\n            return \"\";\n        }\n\n        while(!qu.empty()) {\n            int close_i = qu.front();\n            qu.pop();\n\n            int open_i = st.top();\n            st.pop();\n\n            //reverse open_i+1, close_i-1;\n            int start = open_i+1;\n            int end = close_i -1;\n            while(start<end) {\n                swap(ans[start], ans[end]);\n                start++;\n                end--;\n            };\n        }\n\n        string final_ans = \"\";\n        for(int i=0; i<ans.length(); i++) {\n            if(ans[i] == '(' || ans[i] == ')')\n                continue;\n            final_ans += ans[i];\n        };\n\n        return final_ans;\n        \n    }\n};","compare_result":"11111111111110010111101000001000000000","title_slug":"reverse-substrings-between-each-pair-of-parentheses","has_notes":false,"flag_type":1}