{"id":1317941604,"question_id":1298,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1720724792,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1317941604/","is_pending":"Not Pending","title":"Reverse Substrings Between Each Pair of Parentheses","memory":"7.6 MB","code":"/*You are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.\n */\nclass Solution {\npublic:\n    string reverseParentheses(string s) {\n        /*1 <= s.length <= 2000\n            s only contains lower case English characters and parentheses.\n            It is guaranteed that all parentheses are balanced. \n        */\n        int sz = s.length();\n        if(sz <=1)\n            return s;\n        \n        stack<int> st;\n        for(int i=0; i<sz; i++) {\n            if(s[i] == '(')\n                st.push(i);\n        };\n\n        while(!st.empty()) {\n            int open_i = st.top();\n            st.pop();\n\n             int close_i = 0;\n            for(int i=open_i+1; i<sz; i++) {\n                if(s[i] == ')') {\n                    close_i = i;\n                    s[i] = '('; \n                    break;\n                }\n            };\n           \n            //reverse open_i+1, close_i-1;\n            int start = open_i+1;\n            int end = close_i-1;\n            while(start<end) {\n                swap(s[start], s[end]);\n                start++;\n                end--;\n            };\n        }\n\n        string final_ans = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s[i] == '(' || s[i] == ')')\n                continue;\n            final_ans += s[i];\n        };\n\n        return final_ans;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"reverse-substrings-between-each-pair-of-parentheses","has_notes":false,"flag_type":1}