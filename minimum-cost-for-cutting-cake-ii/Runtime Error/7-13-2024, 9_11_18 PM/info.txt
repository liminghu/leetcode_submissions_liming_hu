{"id":1320373908,"question_id":3500,"lang":"cpp","lang_name":"C++","time":"6 months, 4 weeks","timestamp":1720930278,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1320373908/","is_pending":"Not Pending","title":"Minimum Cost for Cutting Cake II","memory":"N/A","code":"/*\nThere is an m x n cake that needs to be cut into 1 x 1 pieces.\n\nYou are given integers m, n, and two arrays:\n\nhorizontalCut of size m - 1, where horizontalCut[i] represents the cost to cut along the horizontal line i.\nverticalCut of size n - 1, where verticalCut[j] represents the cost to cut along the vertical line j.\nIn one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts:\n\nCut along a horizontal line i at a cost of horizontalCut[i].\nCut along a vertical line j at a cost of verticalCut[j].\nAfter the cut, the piece of cake is divided into two distinct pieces.\n\nThe cost of a cut depends only on the initial cost of the line and does not change.\n\nReturn the minimum total cost to cut the entire cake into 1 x 1 pieces.\n*/\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        /*\n        1 <= m, n <= 105\n        horizontalCut.length == m - 1\n        verticalCut.length == n - 1\n        1 <= horizontalCut[i], verticalCut[i] <= 103\n        */\n\n        priority_queue<pair<int, int>> h_q;\n        for(int i=0; i<m-1; i++) {\n            h_q.push({horizontalCut[i], i});\n        }\n        priority_queue<pair<int, int>> v_q;\n        for(int j=0; j<n-1; j++) {\n            v_q.push({verticalCut[j], j});\n        }\n\n        int ans = 0;\n        int h_count = 1;\n        int v_count = 1;\n        while(!h_q.empty() || !v_q.empty() ) {\n            if(!h_q.empty() && !v_q.empty() ) {\n                pair<int, int> h_top = h_q.top();\n                pair<int, int> v_top = v_q.top();\n                if(h_top > v_top ) {\n                    h_q.pop();\n                    h_count++;\n                    ans += v_count*h_top.first;\n                } else {\n                    v_q.pop();\n                    v_count++;\n                    ans += h_count*v_top.first;\n                }\n            } else if (h_q.empty() && !v_q.empty() ) {\n                pair<int, int> v_top = v_q.top();\n                v_q.pop();\n                v_count++;\n                ans += h_count*v_top.first;\n            } else if (!h_q.empty() && v_q.empty() ) {\n                pair<int, int> h_top = h_q.top();\n                h_q.pop();\n                h_count++;\n                ans += v_count*h_top.first;\n            }; \n        };\n        \n        return ans;\n        \n    }\n};","compare_resulttitle_slug":"minimum-cost-for-cutting-cake-ii","has_notes":false,"flag_type":1}