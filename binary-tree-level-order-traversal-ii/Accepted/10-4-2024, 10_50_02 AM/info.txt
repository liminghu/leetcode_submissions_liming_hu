{"id":1411827160,"question_id":107,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728064202,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1411827160/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal II","memory":"14.2 MB","code":"/*\nGiven the root of a binary tree, return the bottom-up level order traversal of its nodes' \nvalues. (i.e., from left to right, level by level from leaf to root).\nExample 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\nExample 2:\n\nInput: root = [1]\nOutput: [[1]]\nExample 3:\n\nInput: root = []\nOutput: []\n \nConstraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\n        if(root == NULL)\n            return {};\n        \n        stack<int> st;\n        queue<TreeNode*> q;\n        vector<vector<int>> ans;\n        q.push(root);\n        while(!q.empty()) {\n            st.push(INT_MIN); //push a row split.\n            int size = q.size();\n            for(int i=0; i<size; i++) {\n                TreeNode* cur = q.front();\n                q.pop();\n                st.push(cur->val);\n                if(cur->right)\n                    q.push(cur->right);\n                if(cur->left)\n                    q.push(cur->left);\n            }\n        };\n        vector<int> curRow;\n        while(!st.empty()) {\n            int t = st.top();\n            //cout << \"stack top: \" << t << endl;\n            st.pop();\n            if(t == INT_MIN) {\n                if(curRow.size()>0) {\n                    ans.push_back(curRow);\n                    curRow.clear();\n                }\n            }\n            else\n                curRow.push_back(t);\n        };\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal-ii","has_notes":false,"flag_type":1}