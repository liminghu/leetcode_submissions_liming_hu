{"id":1407599203,"question_id":543,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727736441,"status":10,"status_display":"Accepted","runtime":"287 ms","url":"/submissions/detail/1407599203/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"22.7 MB","code":"/*\nGiven the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. \nThis path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\nThe number of nodes in the tree is in the range [1, 104].\n-100 <= Node.val <= 100\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        if(root == NULL)\n            return 0;\n        if(root->left == NULL && root->right==NULL)\n            return 0;\n\n        if(root->left == NULL) {\n            return max( diameterOfBinaryTree(root->right), depth(root)-1);\n        }\n        //left is not null.\n        if(root->right == NULL) {\n            return max( diameterOfBinaryTree(root->left), depth(root)-1);\n        }\n        ////left is not null. right is not null.\n        int diameter = 0;\n        int leftDepth = depth(root->left);\n        int rightDepth = depth(root->right);\n        diameter = leftDepth-1 + rightDepth-1 + 2; //if pass root.\n        return max( max(diameter, diameterOfBinaryTree(root->left)), diameterOfBinaryTree(root->right));\n    }\n    int depth(TreeNode* root) {\n        if(root == NULL)\n            return 0;\n        if(root->left == NULL && root->right==NULL)\n            return 1;\n        return max(depth(root->left)+1, depth(root->right)+1);        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}