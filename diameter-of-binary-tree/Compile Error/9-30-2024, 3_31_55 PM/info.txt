{"id":1407592025,"question_id":543,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727735515,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1407592025/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"N/A","code":"/*\nGiven the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. \nThis path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\nThe number of nodes in the tree is in the range [1, 104].\n-100 <= Node.val <= 100\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        \n    }\n};","compare_result":null,"title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}