{"id":1452824322,"question_id":860,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731606740,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1452824322/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"21.9 MB","code":"class MyCircularQueue {\npublic:\n    MyCircularQueue(int k) {\n        q.resize(k);\n        count = 0;\n        sz = k;\n        headIdx = 0;\n    }\n    \n    bool enQueue(int value) {\n        if(isFull())\n            return false;\n        q[(headIdx+count)%sz] = value;\n        count++;\n        return true;\n    }\n    \n    bool deQueue() {\n        if(isEmpty())\n            return false;\n        headIdx = (headIdx+1)%sz;\n        count--;\n        return true;       \n    }\n    \n    int Front() {\n        if(isEmpty())\n            return -1;\n        return q[headIdx];\n    }\n    \n    int Rear() {\n        if(isEmpty())\n            return -1;\n        return q[(headIdx+count-1)%sz];\n    }\n    \n    bool isEmpty() {\n        return count == 0;\n    }\n    \n    bool isFull() {\n        return count == sz;\n    }\nprivate:\n    int count;\n    int sz;\n    int headIdx;\n    vector<int> q;\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}