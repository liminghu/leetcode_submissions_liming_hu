{"id":1519346186,"question_id":2461,"lang":"cpp","lang_name":"C++","time":"1 week, 6 days","timestamp":1737743587,"status":10,"status_display":"Accepted","runtime":"349 ms","url":"/submissions/detail/1519346186/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"221.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nunordered_map<int, vector<int>> graph;\npublic:\n    int amountOfTime(TreeNode* root, int start) {\n        buildGraph(root);\n        queue<int> q;\n        q.push(start);\n        unordered_set<int> visited;\n        int ret = -1;\n        while(!q.empty()) {\n            ret++;\n            int sz = q.size();\n            for(int i=0; i<sz; i++) {\n                int cur = q.front();\n                q.pop();\n                visited.insert(cur);\n                for(int neighbor: graph[cur]) {\n                    if(!visited.count(neighbor))\n                        q.push(neighbor);\n                }\n            }\n        }\n        return ret;\n    }\n    void buildGraph(TreeNode* root) {\n        if(root==NULL)\n            return;\n        if(root->left) {\n            graph[root->val].push_back(root->left->val);\n            graph[root->left->val].push_back(root->val);\n        }\n        if(root->right) {\n            graph[root->val].push_back(root->right->val);\n            graph[root->right->val].push_back(root->val);\n        }      \n        buildGraph(root->left);\n        buildGraph(root->right);  \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false,"flag_type":1}