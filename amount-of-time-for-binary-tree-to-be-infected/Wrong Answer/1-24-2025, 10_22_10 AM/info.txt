{"id":1519335211,"question_id":2461,"lang":"cpp","lang_name":"C++","time":"1 week, 6 days","timestamp":1737742930,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1519335211/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    int res = 0; // maximum distance from the first infected node.\npublic:\n    int amountOfTime(TreeNode* root, int start) {\n        dfs(root, start);\n        return res;\n    }\n    pair<bool, int> dfs(TreeNode* root, int start) {\n        if(!root)\n            return {false, 0};\n        pair<bool, int> p1 = dfs(root->left, start);\n        pair<bool, int> p2 = dfs(root->right, start);\n        if(root->val == start) {\n            int temp = max(p1.second, p2.second);\n            res = max(res, temp);\n            return {true, 0};\n        }\n        if(p1.first) {\n            int sum = p1.second+p2.second+1;\n            res = max(res, sum);\n            return {true, p1.second+1};\n        } else {\n            int sum = p2.second+p1.second+1;\n            res = max(res, sum);\n            return {true, p2.second+1};            \n        }\n        int sum = max(p1.second, p2.second);\n        return {false, 1+sum};\n    }\n};","compare_result":"11111111111111111111111111111110111010111001101111110101111111110011101000001110","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false,"flag_type":1}