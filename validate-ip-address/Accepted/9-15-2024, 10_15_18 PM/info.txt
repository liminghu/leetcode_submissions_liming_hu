{"id":1391715245,"question_id":468,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1726463718,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1391715245/","is_pending":"Not Pending","title":"Validate IP Address","memory":"8 MB","code":"/*Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 \naddress or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain \nleading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \n\"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\n\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n\n1 <= xi.length <= 4\nxi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and \nupper-case English letters ('A' to 'F').\nLeading zeros are allowed in xi.\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are \nvalid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" \nare invalid IPv6 addresses.\n*/\nclass Solution {\npublic:\n    string validIPAddress(string IP) {\n        // 3 : or 7 :\n        return validIPv4(IP)? \"IPv4\": (validIPv6(IP)? \"IPv6\": \"Neither\");\n    }\n    bool validIPv4(string IP) {\n        if(count(IP.begin(), IP.end(), '.') != 3 )\n            return false;\n        vector<string> parts = split(IP, '.');\n        if(parts.size() !=4)\n            return false;\n\n        for(string part: parts) {\n            if(part.empty() || part.size()>3 || part.size() >1 && part[0]=='0')\n                return false;\n            for(char c:part) {\n                if (!isdigit(c))\n                    return false;\n            }\n            if(stoi(part)>255)\n                return false;\n        }\n        return true;\n    }\n\n    bool validIPv6(string IP) {\n        if(count(IP.begin(), IP.end(), ':') != 7 )\n            return false;\n        vector<string> parts = split(IP, ':');\n        if(parts.size() !=8)\n            return false;\n\n        for(string part: parts) {\n            if(part.empty() || part.size()>4)\n                return false;\n            for(char c:part) {\n                if (!isdigit(c) && !isalpha(c) || toupper(c) > 'F')\n                    return false;\n            }\n        }\n        return true;        \n    }\n    vector<string> split(string s, char c) {\n        vector<string> parts;\n        string part;\n        istringstream in(s);\n        while(getline(in, part, c))\n            parts.push_back(part);\n        return parts;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-ip-address","has_notes":false,"flag_type":1}