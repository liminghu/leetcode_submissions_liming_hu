{"id":1445199606,"question_id":336,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730930706,"status":10,"status_display":"Accepted","runtime":"1936 ms","url":"/submissions/detail/1445199606/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"578.8 MB","code":"class Solution {\npublic:\n    vector<vector<int>> palindromePairs(vector<string>& words) {\n         unordered_map<string, int> dict;\n         vector<vector<int>> ans;\n         // build dictionary\n         for(int i = 0; i < words.size(); i++) {\n             string key = words[i];\n             reverse(key.begin(), key.end());\n             dict[key] = i;\n         }\n         // edge case: if empty string \"\" exists, find all palindromes to become pairs (\"\", self)\n         if( dict.find(\"\") != dict.end() ) {\n             for(int i = 0; i < words.size(); i++) {\n                 if( i == dict[\"\"] ) \n                    continue;\n                 if( isPalindrome(words[i]) ) \n                    ans.push_back({dict[\"\"], i}); // 1) if self is palindrome, here ans covers concatenate(\"\", self) \n             }\n         }\n\n         for(int i = 0; i < words.size(); i++) {\n             for(int j = 0; j < words[i].size(); j++) {\n                 string left = words[i].substr(0, j); //[0, j)\n                 string right = words[i].substr(j, words[i].size() - j); //[j, ..)\n\n                 if(dict.find(left) != dict.end() && isPalindrome(right) && dict[left] != i) {\n                     ans.push_back( { i, dict[left] } );     // 2) when j = 0, left = \"\", right = self, so here covers concatenate(self, \"\")\n                 }\n\n                 if(dict.find(right) != dict.end() && isPalindrome(left) && dict[right] != i) {\n                     ans.push_back( { dict[right], i } );\n                 }\n             }\n         }\n\n         return ans;                \n    }\n     bool isPalindrome(string str){\n         int i = 0;\n         int j = str.size() - 1; \n\n         while(i < j) {\n             if(str[i] != str[j]) return false;\n             i++;\n             j--;\n         }\n\n         return true;\n     }    \n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}