{"id":1362888987,"question_id":1668,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724190937,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/1362888987/","is_pending":"Not Pending","title":"Find Longest Awesome Substring","memory":"13.7 MB","code":"class Solution {\npublic:\n    int longestAwesome(string s) {\n        /*  1 <= s.length <= 105\n            s consists only of digits.\n        */\n        unordered_map<int,int> mp; //prefix encode -> lowest idx.\n        mp[0] = -1; //????  j-mp[key]   0-mp[0] = 1.\n        vector<int> count(10, 0);\n        int ret = 0;\n        for(int j=0; j<s.length(); j++) {\n            count[s[j]-'0']++;\n            int key = count2key(count);\n            if(mp.find(key)!=mp.end()) {\n                ret = max(ret, j-mp[key]); //mp[key] is not included. open.\n            } else \n                mp[key] = j;\n\n            for(int k=0; k<10; k++) {\n                int newKey = key;\n                if( ((key>>k) & 1) == 0 )\n                    newKey += (1<<k);\n                else\n                    newKey -= (1<<k);\n                if(mp.find(newKey) != mp.end()) {\n                    ret = max(ret, j-mp[newKey]);\n                }\n            }\n        }\n        return ret;\n    }\n\n    int count2key(vector<int>& count) {\n        int key = 0;\n        for(int i=0; i<10; i++) {\n            key+= ((count[i]%2)<<i);\n        }\n        return key;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-longest-awesome-substring","has_notes":false,"flag_type":1}