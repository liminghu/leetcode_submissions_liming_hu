{"id":1378462819,"question_id":631,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725428332,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1378462819/","is_pending":"Not Pending","title":"Design Excel Sum Formula","memory":"N/A","code":"/*\nDesign the basic function of Excel and implement the function of the sum formula.\nImplement the Excel class:\nExcel(int height, char width) Initializes the object with the height and the width of \nthe sheet. The sheet is an integer matrix mat of size height x width with the row index \nin the range [1, height] and the column index in the range ['A', width]. All the values \nshould be zero initially.\nvoid set(int row, char column, int val) Changes the value at mat[row][column] to be val.\nint get(int row, char column) Returns the value at mat[row][column].\nint sum(int row, char column, List<String> numbers) Sets the value at mat[row][column] to \nbe the sum of cells represented by numbers and returns the value at mat[row][column]. This \nsum formula should exist until this cell is overlapped by another value or another sum formula. \nnumbers[i] could be on the format:\n\"ColRow\" that represents a single cell.\nFor example, \"F7\" represents the cell mat[7]['F'].\n\"ColRow1:ColRow2\" that represents a range of cells. The range will always be a rectangle where \n\"ColRow1\" represent the position of the top-left cell, and \"ColRow2\" represents the position of \nthe bottom-right cell.\nFor example, \"B3:F7\" represents the cells mat[i][j] for 3 <= i <= 7 and 'B' <= j <= 'F'.\nNote: You could assume that there will not be any circular sum reference.\n\nFor example, mat[1]['A'] == sum(1, \"B\") and mat[1]['B'] == sum(1, \"A\").\n*/\n\n/*1 <= height <= 26\n'A' <= width <= 'Z'\n1 <= row <= height\n'A' <= column <= width\n-100 <= val <= 100\n1 <= numbers.length <= 5\nnumbers[i] has the format \"ColRow\" or \"ColRow1:ColRow2\".\nAt most 100 calls will be made to set, get, and sum.\n*/\nclass Excel {\nprivate:\n    int height_;\n    char width_;\n    vector<vector<int>> matrix_;\n    unordered_map<string, vector<string>> mp; //pair<int, char>, formula\n    unordered_map<string, vector<string>> mp_dependant; //char, vector<char>\n\npublic:\n    Excel(int height, char width) {\n        height_ = height;\n        width_ = width;\n        vector<vector<int>> matrix(height, vector<int>(width-'A'+1, 0));\n        matrix_ = matrix;   \n        mp.clear();\n    }\n    \n    void set(int row, char column, int val) {\n        matrix_[row-1][column-'A'] = val;  \n        string key = column + to_string(row);\n        if(mp_dependant.find(key)!=mp_dependant.end()) {\n           vector<string> cells =  mp_dependant[key];\n            for(int i=0; i<cells.size(); i++) {\n                string formula_i = cells[i];\n                char column_i = formula_i[0];\n                int row_i = 0;\n                for(int j=1; j<formula_i.length(); j++) {\n                    row_i = row_i*10 + formula_i[j]-'0';\n                };\n                get(row_i, column_i);\n            }\n        }\n    }\n    \n    int get(int row, char column) {\n        string key = column + to_string(row);\n        //cout << \"key = \" << key << \" val \"<<  matrix_[row-1][column-'A'] << endl;\n        if(mp.find(key) == mp.end()) //no formula\n            return matrix_[row-1][column-'A'];     \n        else {\n\n            return sum(row, column, mp[key]);   \n        }\n    }\n    \n    int sum(int row, char column, vector<string> numbers) {\n        /*be the sum of cells represented by numbers and returns the value at mat[row][column]. \n        This sum formula should exist until this cell is overlapped by another value or another \n        sum formula. numbers[i] could be on the format:*/\n\n        /*\n        \"ColRow\" that represents a single cell.\n        For example, \"F7\" represents the cell mat[7]['F'].\n        \"ColRow1:ColRow2\" that represents a range of cells. The range will always be a rectangle \n        where \"ColRow1\" represent the position of the top-left cell, and \"ColRow2\" represents the position of the bottom-right cell.\n        For example, \"B3:F7\" represents the cells mat[i][j] for 3 <= i <= 7 and 'B' <= j <= 'F'.\n        */\n        int ret = 0;\n        string key = column + to_string(row);\n        mp[key] = numbers;\n        for(int i=0; i<numbers.size(); i++) {\n            string formula_i = numbers[i];\n            int div_pos = formula_i.find(':');\n            //cout << \"formula_i= \" << formula_i << endl;\n            //cout << \"div_pos = \" << div_pos << endl;\n            if(div_pos != -1) { //found ':'\n                string start = formula_i.substr(0, div_pos);\n                //cout << \"formula_i start= \" << start << endl;\n                char column_i_start = start[0];\n                int row_i_start = 0;\n                for(int i=1; i<start.length(); i++) {\n                    row_i_start = row_i_start*10 + start[i]-'0';\n                };\n\n\n                string end = formula_i.substr(div_pos+1);\n                //cout << \"formula_i end= \" << end << endl;\n                char column_i_end = end[0];\n                int row_i_end = 0;\n                for(int i=1; i<end.length(); i++) {\n                    row_i_end = row_i_end*10 + end[i]-'0';\n                };\n\n                int cell_sum = 0;\n                //cout << \"row_start \" << row_i_start << \" row end \" <<  row_i_end << endl;\n                //cout << \"col_start \" << column_i_start << \" col end \" <<  column_i_end << endl;\n                for(char c=column_i_start; c<=column_i_end; c++) {\n                    for(int r =row_i_start; r <=row_i_end; r++ ) {\n                        cell_sum += get(r, c);\n                    }\n                }\n                //cout << \"cell sum: \" << cell_sum << endl;\n                ret += cell_sum;\n\n            } else {\n                //formula_i    A26\n                char column_i = formula_i[0];\n                int row_i = 0;\n                for(int i=1; i<formula_i.length(); i++) {\n                    row_i = row_i*10 + formula_i[i]-'0';\n                };\n                ret += get(row_i, column_i);\n            }\n        }\n        set(row, column, ret);\n        return ret;  \n    }\n};\n\n/**\n * Your Excel object will be instantiated and called as such:\n * Excel* obj = new Excel(height, width);\n * obj->set(row,column,val);\n * int param_2 = obj->get(row,column);\n * int param_3 = obj->sum(row,column,numbers);\n */","compare_result":"111111111100010111100111","title_slug":"design-excel-sum-formula","has_notes":false,"flag_type":1}