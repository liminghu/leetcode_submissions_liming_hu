{"id":1378997476,"question_id":631,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725467235,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1378997476/","is_pending":"Not Pending","title":"Design Excel Sum Formula","memory":"14.6 MB","code":"/*\nDesign the basic function of Excel and implement the function of the sum formula.\nImplement the Excel class:\nExcel(int height, char width) Initializes the object with the height and the width of \nthe sheet. The sheet is an integer matrix mat of size height x width with the row index \nin the range [1, height] and the column index in the range ['A', width]. All the values \nshould be zero initially.\nvoid set(int row, char column, int val) Changes the value at mat[row][column] to be val.\nint get(int row, char column) Returns the value at mat[row][column].\nint sum(int row, char column, List<String> numbers) Sets the value at mat[row][column] to \nbe the sum of cells represented by numbers and returns the value at mat[row][column]. This \nsum formula should exist until this cell is overlapped by another value or another sum formula. \nnumbers[i] could be on the format:\n\"ColRow\" that represents a single cell.\nFor example, \"F7\" represents the cell mat[7]['F'].\n\"ColRow1:ColRow2\" that represents a range of cells. The range will always be a rectangle where \n\"ColRow1\" represent the position of the top-left cell, and \"ColRow2\" represents the position of \nthe bottom-right cell.\nFor example, \"B3:F7\" represents the cells mat[i][j] for 3 <= i <= 7 and 'B' <= j <= 'F'.\nNote: You could assume that there will not be any circular sum reference.\n\nFor example, mat[1]['A'] == sum(1, \"B\") and mat[1]['B'] == sum(1, \"A\").\n*/\n\n/*1 <= height <= 26\n'A' <= width <= 'Z'\n1 <= row <= height\n'A' <= column <= width\n-100 <= val <= 100\n1 <= numbers.length <= 5\nnumbers[i] has the format \"ColRow\" or \"ColRow1:ColRow2\".\nAt most 100 calls will be made to set, get, and sum.\n*/\nclass Excel {\nprivate:\n    vector<vector<int>> mat_;\n    map<pair<int, char>, vector<string>> formula_;\npublic:\n    Excel(int H, char W) {\n        formula_.clear();\n        mat_ = vector<vector<int>>(H, vector<int>(W-'A'+1, 0));\n    }\n    \n    void set(int r, char c, int val) {\n        if(formula_.count({r, c})) //erase formula first.\n            formula_.erase({r, c});\n        mat_[r-1][c-'A'] = val;\n    }\n    \n    int get(int r, char c) {\n        if(formula_.count({r, c})) //if find formula, use formula.\n            return sum(r, c, formula_[{r, c}]);\n        return mat_[r-1][c-'A'];\n    }\n    \n    int sum(int r, char c, vector<string> strs) {\n        int sum = 0;\n        for(string str : strs) {\n            if(str.find(':') == string::npos) {\n                char w = str[0];\n                int h = stoi(str.substr(1));\n                sum += get(h, w);\n            }else {\n                int pos = str.find(':');\n                int w1 = str[0] - 'A';\n                int h1 = stoi(str.substr(1, pos-1));\n                int w2 = str[pos+1] - 'A';\n                int h2 = stoi(str.substr(pos+2));\n                for(int i = h1; i <= h2; i++) {\n                    for(int j = w1; j <= w2; j++) {\n                        sum += get(i, j+'A');\n                    }\n                }\n            }\n        }\n        formula_[{r, c}] = strs;\n        return sum;\n    }\n};\n/**\n * Your Excel object will be instantiated and called as such:\n * Excel* obj = new Excel(height, width);\n * obj->set(row,column,val);\n * int param_2 = obj->get(row,column);\n * int param_3 = obj->sum(row,column,numbers);\n */","compare_result":"111111111111111111111111","title_slug":"design-excel-sum-formula","has_notes":false,"flag_type":1}