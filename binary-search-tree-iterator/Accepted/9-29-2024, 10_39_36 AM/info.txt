{"id":1406326023,"question_id":173,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727631576,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1406326023/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"29.1 MB","code":"/*\nImplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the \nconstructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\nConstraints:\nThe number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, and next.\nFollow up:\nCould you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree? \n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\nprivate:\n    stack<TreeNode*> st_;\n    void pushAllLeft(TreeNode* node) {\n        for(; node != NULL; node = node->left)\n            st_.push(node);\n    }\npublic:\n    BSTIterator(TreeNode* root) {\n        //The pointer should be initialized to a non-existent number smaller than any element in the BST.\n        pushAllLeft(root);\n        \n    }\n    \n    int next() {\n        if(hasNext()) {\n            TreeNode* t = st_.top();\n            st_.pop();\n            pushAllLeft( t->right );\n            return t->val;\n        }\n        return 0;\n    }\n    \n    bool hasNext() {\n        return !st_.empty();\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}