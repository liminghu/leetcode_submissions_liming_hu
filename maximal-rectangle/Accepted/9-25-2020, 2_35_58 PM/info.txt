{"id":400708937,"question_id":85,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1601069758,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/400708937/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"12.2 MB","code":"class Solution {\npublic:\n  int maximalRectangle(vector<vector<char> > &matrix) {\n\t  int row = matrix.size();\n\t  if(row == 0) return 0;\n\t  int col = matrix[0].size();\n\t  if(col == 0) return 0;\n\t  vector<int> heights(col, 0); //from top to current row, histogram height. \n\t  \n\t  int max_area = 0;\n\t  for(int i = 0; i< row; i++) {\n\t\tfor(int j = 0; j < col; j++) {\n\t\t\tif (matrix[i][j] == '1') {\n\t\t\t\theights[j] ++;\n\t\t\t} else {\n\t\t\t\theights[j] = 0;\n\t\t\t}\n\t\t}\n\t\tint area = largestRectangleArea(heights);\n\t\tmax_area = max(max_area, area);\n\t  }\n\t  \n\t  return max_area;\n   }\n   \n  int largestRectangleArea(vector<int>& heights) {\n        //https://www.youtube.com/watch?v=TH9UaZ6JGcA&t=182s\n        //increasing stack.\n        //less, calculate.\n        \n        if( heights.size() == 0) return 0;\n        if(heights.size()==1) return heights[0];\n        \n        int ans=0;\n        heights.push_back(0);\n        stack<int> mono_idx;\n        \n        \n        for(int i=0; i<heights.size(); i++) { //add 0 to the end.\n            while(!mono_idx.empty() && heights[mono_idx.top()]>heights[i]) {\n                //start decreasing.\n                int h = heights[mono_idx.top()]; mono_idx.pop();\n                int l = mono_idx.empty()? -1: mono_idx.top(); //when empty i-(-1)-1 = i.\n                ans = max(ans, h*(i-l-1)); //does not count i. \n            }\n            mono_idx.push(i);\n        }\n        return ans;\n        \n    }\n   \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false,"flag_type":1}