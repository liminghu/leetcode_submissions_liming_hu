{"id":1404393660,"question_id":85,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727479082,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1404393660/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"20.1 MB","code":"/*\nGiven a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\nrows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.\n*/\nclass Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        if(matrix.empty())\n            return 0;\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> hist(n,0);\n        int ans = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(matrix[i][j] == '1')\n                    hist[j] += 1;\n                else\n                    hist[j] = 0;\n            }\n            ans = max(ans, largestRectangle(hist));\n        }\n        return ans;        \n    }\n    int largestRectangle(vector<int> hist) {\n        hist.insert(hist.begin(), 0);\n        hist.push_back(0);\n        int n = hist.size();\n        stack<int> st;\n        int ret = 0;\n        for(int i=0; i<hist.size(); i++) {\n            while(!st.empty() && hist[st.top()] > hist[i]) {\n                int h = hist[st.top()];\n                st.pop();\n                int area = h*(i-st.top()-1);\n                ret = max(ret,area);\n            }\n            st.push(i); // hist[st.top()] <= hist[i]\n        }\n        return ret;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false,"flag_type":1}