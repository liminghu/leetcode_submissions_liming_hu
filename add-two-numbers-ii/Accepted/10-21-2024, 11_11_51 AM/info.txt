{"id":1429616411,"question_id":445,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1729534311,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1429616411/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"77.4 MB","code":"/*\nYou are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of \ntheir nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n Example 1:\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\nOutput: [7,8,0,7]\n\nExample 2:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [8,0,7]\n\nExample 3:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n \nConstraints:\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n \nFollow up: Could you solve it without reversing the input lists?\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        l1 = reverseList(l1);\n        l2 = reverseList(l2);\n        ListNode* res = new ListNode(0);\n        ListNode* cur = res;\n        //add the result\n        int carry = 0;\n        while(l1 && l2) {\n            int sum = (carry + l1->val + l2->val) % 10;\n            carry = (carry + l1->val + l2->val) / 10;\n            ListNode* newnode = new ListNode(sum);\n            cur->next = newnode;\n            cur = newnode;\n            l1 = l1->next;\n            l2 = l2->next;\n        };\n\n        while(l1) { //l2 is null\n            int sum = (carry + l1->val) % 10;\n            carry = (carry + l1->val) / 10;\n            ListNode* newnode = new ListNode(sum);\n            cur->next = newnode;\n            cur = newnode;\n            l1 = l1->next;     \n        };\n        while(l2) { //l1 is null\n            int sum = (carry + l2->val) % 10;\n            carry = (carry + l2->val) / 10;\n            ListNode* newnode = new ListNode(sum);\n            cur->next = newnode;\n            cur = newnode;\n            l2 = l2->next;     \n        };        \n        if(carry) {\n           ListNode* newnode = new ListNode(carry);\n            cur->next = newnode;\n            cur = newnode;              \n        }\n        res = res->next;\n\n        return reverseList(res);\n    }\n\n    ListNode* reverseList(ListNode* root) {\n        ListNode* cur = root;\n        ListNode* next;\n        ListNode* prev = NULL;\n        while(cur) {\n            next = cur->next; //keep the next.\n            cur->next = prev;\n            prev = cur;\n            cur = next;\n        };\n        return prev;\n    }\n};","compare_resulttitle_slug":"add-two-numbers-ii","has_notes":false,"flag_type":1}