{"id":1478212260,"question_id":2868,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1734136925,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/1478212260/","is_pending":"Not Pending","title":"Continuous Subarrays","memory":"111.8 MB","code":"class Solution {\npublic:\n    long long continuousSubarrays(vector<int>& nums) {\n        int n = nums.size();\n        long long res = 0;\n        int j = 0; //left\n        int i = 0;  //right\n        int curMin = 0;\n        int curMax = 0;\n        long long windowLen = 0;\n        curMin = curMax = nums[0];\n        for(; i<n; i++) {  //right\n            curMin = min(curMin, nums[i]);\n            curMax = max(curMax, nums[i]);\n            if(curMax-curMin > 2) {\n                //Add subarrays from the previous valid window\n                windowLen = i-j;\n                res += windowLen*(windowLen+1)/2;\n                // Start a new window at the current position\n                j = i;\n                curMin = curMax = nums[i];\n                // Expand left boundary while maintaining the condition\n                while(j>0 && abs(nums[i]-nums[j-1])<=2) {\n                    j--;\n                    curMin = min(curMin, nums[j]);\n                    curMax = max(curMax, nums[j]);\n                }\n                //Remove overcounted subarrays if left boundary expanded\n                if(j<i) {\n                    windowLen = i-j;\n                    res -= (windowLen+1)*windowLen/2;\n                }\n            }\n        };\n        // Add subarrays from the final window\n        windowLen = i-j;   //i=n\n        res += (windowLen+1)*windowLen/2;\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"continuous-subarrays","has_notes":false,"flag_type":1}