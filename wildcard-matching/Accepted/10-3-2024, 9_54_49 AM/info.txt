{"id":1410686214,"question_id":44,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727974489,"status":10,"status_display":"Accepted","runtime":"291 ms","url":"/submissions/detail/1410686214/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"32.5 MB","code":"/*\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).\n0 <= s.length, p.length <= 2000\ns contains only lowercase English letters.\np contains only lowercase English letters, '?' or '*'.\n */\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.length();\n        int n = p.length();\n        s = '#' + s;\n        p = '#' + p;\n        //the matching p[0...j] can cover the input string s[0...i]?\n        vector<vector<int>> dp(m+1, vector(n+1, 0));\n\n        dp[0][0] = 1; //# matches #\n        //dp[0][j]:  if p[j] == '*'\n        for(int j=1; j<=n; j++) {\n            if(p[j] != '*')\n                break;\n            dp[0][j] = 1;\n        }\n        //dp[i][0]: it will be all 0.\n\n        for(int i=1; i<=m; i++) {\n            for(int j=1; j<=n; j++) {\n                if(p[j] == '?')\n                    dp[i][j] = dp[i-1][j-1];\n                else if(s[i]==p[j]) {\n                    dp[i][j] = dp[i-1][j-1];\n                } else if(p[j] == '*') {\n                    for(int k=0; k<=i; k++) {\n                        //if(dp[k][j-1] == 1)\n                        //    dp[i][j] = 1;\n                        dp[i][j] = dp[i][j-1] || dp[i-1][j]; //dp[i][j-1]: ignore *. dp[i-1][j]: match one s[i], and continue. recursively\n                    }\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};","compare_resulttitle_slug":"wildcard-matching","has_notes":false,"flag_type":1}