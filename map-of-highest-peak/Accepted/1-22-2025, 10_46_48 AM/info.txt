{"id":1517203240,"question_id":1876,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1737571608,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/1517203240/","is_pending":"Not Pending","title":"Map of Highest Peak","memory":"112.8 MB","code":"class Solution {\nvector<pair<int,int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\npublic:\n    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {\n        int m = isWater.size();\n        int n = isWater[0].size();\n        //0: land; 1: water\n        vector<vector<int>> heights(m, vector<int>(n, -1));\n        queue<pair<int,int>> q;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(isWater[i][j]) {\n                    q.push({i, j});\n                    heights[i][j] = 0;\n                }\n            }\n        }\n        int heightLayer = 1;\n        while(!q.empty()) {\n            int sz = q.size();\n            for(int i=0; i<sz; i++) {\n                pair<int, int> cur = q.front();\n                q.pop();\n                for(auto dir: dirs) {\n                    int newX = cur.first + dir.first;\n                    int newY = cur.second + dir.second;\n                    if(newX>=0 && newX<m && newY>=0 && newY<n && heights[newX][newY]==-1) {\n                        heights[newX][newY] = heightLayer;\n                        q.push({newX, newY});\n                    }\n                }\n            }\n            heightLayer++;\n        }\n        return heights;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"map-of-highest-peak","has_notes":false,"flag_type":1}