{"id":1516074656,"question_id":2267,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1737483931,"status":10,"status_display":"Accepted","runtime":"137 ms","url":"/submissions/detail/1516074656/","is_pending":"Not Pending","title":"Minimum Difference in Sums After Removal of Elements","memory":"144.1 MB","code":"class Solution {\npublic:\n    long long minimumDifference(vector<int>& nums) { //0-indexed integer array nums consisting of 3 * n elements.\n        int n = nums.size()/3;\n        //Return the minimum difference possible between the sums of the two parts after the removal of n elements.\n        priority_queue<int> left;\n        priority_queue<int, vector<int>, greater<>> right;\n        long long leftSum = 0ll, rightSum = 0ll;\n        long long ans = LLONG_MAX;\n        vector<long long> maxSumRight(3*n);\n        for(int i=3*n-1; i>=n; i--) {\n            right.push(nums[i]);\n            rightSum += nums[i];\n            if(right.size()>n) {\n                rightSum -= right.top();\n                right.pop();\n            };\n            if(right.size()==n)\n                maxSumRight[i] = rightSum; //maxSumRight[i] is the maximum sum of n digits in 'nums[i:]'.\n        };\n        for(int i=0; i<2*n; i++) {\n            left.push(nums[i]);\n            leftSum += nums[i];\n            if(left.size()>n) {\n                leftSum -= left.top();\n                left.pop();\n            };\n            if(left.size()==n) //leftSum: the min sum of n digits in nums[0: i]\n                ans = min(ans, leftSum-maxSumRight[i+1]);\n        };\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-difference-in-sums-after-removal-of-elements","has_notes":false,"flag_type":1}