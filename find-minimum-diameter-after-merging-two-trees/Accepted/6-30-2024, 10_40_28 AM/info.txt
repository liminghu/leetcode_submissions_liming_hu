{"id":1305048235,"question_id":3439,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1719769228,"status":10,"status_display":"Accepted","runtime":"2363 ms","url":"/submissions/detail/1305048235/","is_pending":"Not Pending","title":"Find Minimum Diameter After Merging Two Trees","memory":"364 MB","code":"/*\nThere exist two undirected trees with n and m nodes, numbered from 0 to n - 1 and from 0 to m - 1, respectively. \nYou are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where \nedges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and \nedges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.\nYou must connect one node from the first tree with another node from the second tree with an edge.\n\nReturn the minimum possible diameter of the resulting tree.\n\nThe diameter of a tree is the length of the longest path between any two nodes in the tree.\n*/\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n                                                        /*\n                                                        1 <= n, m <= 105\n                                                        edges1.length == n - 1\n                                                        edges2.length == m - 1\n                                                        edges1[i].length == edges2[i].length == 2\n                                                        edges1[i] = [ai, bi]\n                                                        0 <= ai, bi < n\n                                                        edges2[i] = [ui, vi]\n                                                        0 <= ui, vi < m\n                                                        The input is generated such that edges1 and edges2 represent valid trees.\n                                                        */\n        int d1 = getDiameter(edges1);\n        int d2 = getDiameter(edges2);\n        return max(max(d1 - 1, d2 - 1), d1 / 2 + d2 / 2 + 1);\n    }\n\nprivate:\n    int getDiameter(vector<vector<int>>& edges) {\n        unordered_map<int, vector<int>> map;\n        for (auto& edge : edges) {\n            int i = edge[0];\n            int j = edge[1];\n            map[i].push_back(j);\n            map[j].push_back(i);\n        }\n\n        int res = 0;\n        dfs(0, -1, map, res);  //0: current node, -1: parent. \n\n        return res;\n    }\n\n    int dfs(int node, int parent, unordered_map<int, vector<int>>& map, int& res) {\n        int maxDepth = 1;\n        for (int neighbor : map[node]) {\n            if (neighbor == parent)\n                continue;\n            int depth = dfs(neighbor, node, map, res);\n            res = max(res, maxDepth + depth);\n            maxDepth = max(maxDepth, 1 + depth);\n        }\n        return maxDepth;\n    }\n};","compare_resulttitle_slug":"find-minimum-diameter-after-merging-two-trees","has_notes":false,"flag_type":1}