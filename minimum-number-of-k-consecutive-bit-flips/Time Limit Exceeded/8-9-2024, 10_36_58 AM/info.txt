{"id":1350226901,"question_id":1037,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723225018,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1350226901/","is_pending":"Not Pending","title":"Minimum Number of K Consecutive Bit Flips","memory":"N/A","code":"/*\nYou are given a binary array nums and an integer k.\nA k-bit flip is choosing a subarray of length k from nums and simultaneously changing \nevery 0 in the subarray to 1, and every 1 in the subarray to 0.\nReturn the minimum number of k-bit flips required so that there is no 0 in the array. \nIf it is not possible, return -1.\nA subarray is a contiguous part of an array.\n*/\nclass Solution {\npublic:\n    int minKBitFlips(vector<int>& nums, int k) {\n        //1 <= nums.length <= 105\n        //1 <= k <= nums.length\n        int sz = nums.size();\n        int res = 0;\n        for(int i=0; i<sz; i++) {\n            if(nums[i]==0 && i>=sz-k+1)\n                return -1;\n            if(nums[i] == 0) {\n                nums[i] = 1;\n                //i+1   i+k-1\n                for(int j=i+1; j<=i+k-1; j++) {\n                    nums[j] = 1 - nums[j]; \n                }\n                res++;\n            } else { //nums[i] == 1\n                //i+1   i+k-1\n               /* int j = i+1;\n                for(; j<=i+k-1 && j <sz; j++) {\n                    if(nums[j] == 0) {\n                        break;\n                    } \n                }\n                if(j==i+k) {\n                    i=i+k-1;\n                }*/\n            }\n\n        }\n\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"minimum-number-of-k-consecutive-bit-flips","has_notes":false,"flag_type":1}