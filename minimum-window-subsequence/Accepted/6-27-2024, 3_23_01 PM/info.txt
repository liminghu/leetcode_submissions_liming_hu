{"id":1302400438,"question_id":727,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719526981,"status":10,"status_display":"Accepted","runtime":"127 ms","url":"/submissions/detail/1302400438/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"91.1 MB","code":"class Solution {\npublic:\n/*\nGiven strings S and T, return the minimum contiguous substring part of S, so that T is a subsequence of the part.\nIf there is no such window in S that covers all characters in T, return the empty string \"\". If there are multiple \nsuch minimum-length windows, return the one with the left-most starting index.\n*/\n    string minWindow(string S, string T) { //1 <= S.length <= 2 * 104\n                                            //1 <= T.length <= 100\n                                            //S and T consist of lowercase English letters.\n        int S_len = S.length();\n        int T_len = T.length();\n\n        //minimum contiguous substring part of S, so that T is a subsequence of the part.\n        vector<vector<int>> dp(S_len+1, vector<int>(T_len+1, 0)); //length.\n        for(int j=1; j<=T_len; j++)\n            dp[0][j] = INT_MAX/2; //if S_len is 0 and T_len is non-zero, there is no way we can find a sunstring.\n        \n        for(int i=1; i<=S_len; i++) {\n            for(int j=1; j<=T_len; j++) {\n                if( S[i-1] == T[j-1] ) \n                    dp[i][j] = dp[i-1][j-1]+1;\n                else\n                    dp[i][j] = dp[i-1][j]+1;\n            }\n        } //end for\n\n        int min_len = INT_MAX/2;\n        int end_pos = -1;\n        for(int i=0; i<=S_len; i++) {\n            if(dp[i][T_len] < min_len) {\n                min_len = dp[i][T_len];\n                end_pos = i-1;\n            }\n        }\n\n        if (min_len == INT_MAX/2)\n            return \"\";\n        \n        return S.substr(end_pos-min_len+1, min_len);\n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-subsequence","has_notes":false,"flag_type":1}