{"id":1298980421,"question_id":216,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719248051,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1298980421/","is_pending":"Not Pending","title":"Combination Sum III","memory":"7.7 MB","code":"class Solution {\npublic:\n/*\nFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\nOnly numbers 1 through 9 are used.\nEach number is used at most once.\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n*/\n    vector<vector<int>> ans;\n    vector<int> path;\n    int pathSum = 0;\n    vector<vector<int>> combinationSum3(int k, int n) { //2 <= k <= 9; 1 <= n <= 60\n\n        int start = 1;\n        backtrack(k, n, start);\n\n        return ans;        \n    }\n\n    void backtrack(int k, int n, int start) {\n        if(path.size() == k) {\n            if(pathSum==n)\n                ans.push_back(path);            \n            return;\n        };\n\n        for(int i=start; i<=9; i++) {\n            path.push_back(i);\n            pathSum += i;\n            backtrack(k, n, i+1);\n            pathSum -=path.back();\n            path.pop_back();\n        }\n    };\n};","compare_result":"111111111111111111","title_slug":"combination-sum-iii","has_notes":false,"flag_type":1}