{"id":1298973956,"question_id":216,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719247687,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1298973956/","is_pending":"Not Pending","title":"Combination Sum III","memory":"9.4 MB","code":"class Solution {\npublic:\n/*\nFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\nOnly numbers 1 through 9 are used.\nEach number is used at most once.\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n*/\n    vector<vector<int>> ans;\n    vector<int> path;\n    vector<bool> used;\n    vector<vector<int>> combinationSum3(int k, int n) { //2 <= k <= 9; 1 <= n <= 60\n\n        int start = 1;\n        used = vector<bool>(10, false);\n        backtrack(k, n, start, used);\n\n        return ans;\n        \n    }\n\n    void backtrack(int k, int n, int start, vector<bool> used) {\n        if(path.size() == k) {\n            int sum = 0;\n            for(int i=0; i<k; i++) {\n                sum+=path[i];\n            }\n            if(sum==n)\n                ans.push_back(path);            \n            return;\n        };\n\n        for(int i=start; i<=9; i++) {\n            if(used[i] == false) {\n                used[i] = true;\n                path.push_back(i);\n                backtrack(k, n, i+1, used);\n                path.pop_back();\n                used[i] = false;\n\n            }\n\n        }\n\n    };\n};","compare_result":"111111111111111111","title_slug":"combination-sum-iii","has_notes":false,"flag_type":1}