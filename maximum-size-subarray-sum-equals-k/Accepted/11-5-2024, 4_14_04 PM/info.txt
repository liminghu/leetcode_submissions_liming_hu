{"id":1444307508,"question_id":325,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730852044,"status":10,"status_display":"Accepted","runtime":"163 ms","url":"/submissions/detail/1444307508/","is_pending":"Not Pending","title":"Maximum Size Subarray Sum Equals k","memory":"130.8 MB","code":"class Solution {\npublic:\n    int maxSubArrayLen(vector<int>& nums, int k) {\n        int longest = 0;\n        long long  prefixSum = 0;\n        unordered_map<long long, int> mp; // key: prefixSum, value: index.\n        for(int i=0; i<nums.size(); i++) {\n            prefixSum += nums[i];\n            if(prefixSum == k )\n                longest = i+1;\n            \n            long long  diff = prefixSum - k;   \n            if(mp.find(diff) != mp.end()) {\n                longest = max(longest, i - mp[diff]);\n            }  \n            if(mp.find(prefixSum) == mp.end()) //always recrod the first one, we want to max: i - mp[prefixSum - k]\n                mp[prefixSum] = i;\n        }\n        return longest;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"maximum-size-subarray-sum-equals-k","has_notes":false,"flag_type":1}