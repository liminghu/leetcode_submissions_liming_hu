{"id":1444301542,"question_id":325,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730851233,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1444301542/","is_pending":"Not Pending","title":"Maximum Size Subarray Sum Equals k","memory":"N/A","code":"class Solution {\npublic:\n    int maxSubArrayLen(vector<int>& nums, int k) {\n        int longest = 0;\n        int prefixSum = 0;\n        unordered_map<int, int> mp; // key: prefixSum, value: index.\n        for(int i=0; i<nums.size(); i++) {\n            prefixSum += nums[i];\n            if(prefixSum == k )\n                longest = i+1;\n            \n            int diff = prefixSum - k;   \n            if(mp.find(diff) != mp.end()) {\n                longest = max(longest, i - mp[diff]);\n            }  \n            if(mp.find(prefixSum) == mp.end())\n                mp[prefixSum] = i;\n        }\n        return longest;\n    }\n};","compare_result":"1111111111111111111111111111111111100","title_slug":"maximum-size-subarray-sum-equals-k","has_notes":false,"flag_type":1}