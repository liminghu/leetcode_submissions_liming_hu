{"id":1518511855,"question_id":820,"lang":"cpp","lang_name":"C++","time":"2Â weeks","timestamp":1737679136,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/1518511855/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"69.8 MB","code":"class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {//graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\n        int n = graph.size();\n        vector<int> outDegree(n, 0);\n        //Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\n        // A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\n        set<int> safe;\n        vector<vector<int>> parent(n);       \n        for(int i=0; i<n; i++) {\n            //graph[i][j]\n            outDegree[i] = graph[i].size();\n            if (outDegree[i]==0)\n                safe.insert(i);\n            for(int j=0; j<graph[i].size(); j++) {\n                int dest_node = graph[i][j];\n                parent[dest_node].push_back(i);\n            };    \n        };\n        queue<int> q;\n        for(auto& item: safe) {\n            q.push(item);\n        }\n        while(!q.empty()) {\n            int sz = q.size();\n            for(int i=0; i<sz; i++) {\n                int cur = q.front();\n                q.pop();\n                for(int j=0; j<parent[cur].size(); j++) {\n                    outDegree[ parent[cur][j] ] --;\n                    if(outDegree[ parent[cur][j] ] == 0) {\n                        q.push(parent[cur][j]);\n                        safe.insert(parent[cur][j]);\n                    };\n                }\n            }\n        };\n        vector<int> ans(safe.begin(), safe.end());\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}