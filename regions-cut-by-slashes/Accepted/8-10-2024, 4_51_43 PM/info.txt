{"id":1351450408,"question_id":999,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723333903,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1351450408/","is_pending":"Not Pending","title":"Regions Cut By Slashes","memory":"11.5 MB","code":"/*\nAn n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of \na '/', '\\', or blank space ' '. These characters divide the square into contiguous regions.\nGiven the grid grid represented as a string array, return the number of regions.\nNote that backslash characters are escaped, so a '\\' is represented as '\\\\'.\n*/\nclass Solution {\npublic:\n    vector<int> father;\n    int regionsBySlashes(vector<string>& grid) {\n        /*  n == grid.length == grid[i].length\n            1 <= n <= 30\n            grid[i][j] is either '/', '\\', or ' '.\n        */\n        int sz = grid.size();\n        int res = 1; //at least one area.\n        father.resize((sz+1)*(sz+1));\n\n        //initialize\n        for(int i=0; i<=sz; i++) {\n            for(int j=0; j<=sz; j++) {\n                int idx = i*(sz+1)+j;\n                father[idx] = idx;\n                if(i==0 || i==sz || j==0 || j==sz ) \n                    father[idx] = 0;\n            }\n        }\n\n       for(int i=0; i<sz; i++) {\n            for(int j=0; j<sz; j++) {\n                if(grid[i][j] == ' ')\n                    continue;\n                else if (grid[i][j] == '/') {\n                    int a = i*(sz+1) + (j+1);\n                    int b = (i+1)*(sz+1)+j;\n                    if(FindFather(a) == FindFather(b))\n                        res++;\n                    else\n                        Union(a,b);\n\n                } else if (grid[i][j] == '\\\\') {\n                    int a = i*(sz+1) + j;\n                    int b = (i+1)*(sz+1)+j+1;\n                    if(FindFather(a) == FindFather(b))\n                        res++;\n                    else\n                        Union(a,b);                    \n                }\n            }\n       }\n        return res; \n        \n    }\n    int FindFather(int x) {\n        if(father[x] != x)\n            father[x] = FindFather(father[x]);\n        return father[x];\n    }\n    void Union(int x, int y) {\n        x = FindFather(x);\n        y = FindFather(y);\n        if( x < y )\n            father[y] = x;\n        else\n            father[x] = y;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regions-cut-by-slashes","has_notes":false,"flag_type":1}