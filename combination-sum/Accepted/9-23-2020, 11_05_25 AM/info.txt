{"id":399762572,"question_id":39,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1600884325,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/399762572/","is_pending":"Not Pending","title":"Combination Sum","memory":"11.2 MB","code":"class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) { //All numbers (including target) will be positive integers.\n\t\tvector<vector<int>> ans;\n\t\tvector<int> cur;\n\t\tstd:sort(candidates.begin(), candidates.end()); //increasing.\n\t\tdfs(candidates, target, 0, cur, ans); //0: start\n\t\treturn ans;\n    }\nprivate:\n    //s: start.\n\tvoid dfs(vector<int>& candidates, int target, int s, vector<int>& cur, vector<vector<int>>& ans) {\n\t\tif(target == 0) {\n\t\tans.push_back(cur);\n\t\treturn;\n\t\t}\n\t\t\n\t\tfor(int i = s; i < candidates.size(); i++) {\n\t\t\tif(candidates[i] > target) break; //branch pruning, based on sorting.\n\t\t\tcur.push_back(candidates[i]);\n\t\t\tdfs(candidates, target-candidates[i], i, cur, ans);\n\t\t\tcur.pop_back();   //backtracking.\n\t\t}\n\t}\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}