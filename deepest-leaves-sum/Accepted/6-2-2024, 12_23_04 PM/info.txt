{"id":1275640352,"question_id":1254,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717356184,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/1275640352/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"58.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int depth(TreeNode *root) {\n        int ans =0;\n        if(root == NULL)\n            return ans;\n        int depthLeft = depth(root->left);\n        int depthRight = depth(root->right);\n        if(depthLeft > depthRight)\n            return depthLeft+1;\n        else\n            return depthRight+1;\n        \n    }\n    \n    int deepestLeavesSum(TreeNode* root) {  //dfs\n        int ans = 0;\n        //edge cases.\n        if(root == NULL) \n            return ans;\n        if(root->left == NULL & root->right==NULL)\n            return root->val;\n        else if(root->left == NULL) {\n            return deepestLeavesSum(root->right);\n        } if(root->right==NULL) {\n            return deepestLeavesSum(root->left);            \n        }\n        \n        int depthLeft = depth(root->left);\n        int depthRight = depth(root->right);\n        \n        if(depthLeft== depthRight) {\n            int deepestLeavesSumLeft = deepestLeavesSum(root->left);\n            int deepestLeavesSumRight = deepestLeavesSum(root->right);\n            ans = deepestLeavesSumLeft + deepestLeavesSumRight;\n            return ans;\n        } else if(depthLeft>depthRight) {\n            int deepestLeavesSumLeft = deepestLeavesSum(root->left);\n            return deepestLeavesSumLeft;\n        } else {\n            int deepestLeavesSumRight = deepestLeavesSum(root->right);\n            return deepestLeavesSumRight;\n        }\n            \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1}