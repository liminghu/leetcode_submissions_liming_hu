{"id":1293757314,"question_id":36,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718816370,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1293757314/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"24 MB","code":"class Solution {\npublic:\n/*\nDetermine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n*/\n    bool isValidSudoku(vector<vector<char>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n\n        //Each row must contain the digits 1-9 without repetition.        \n        for(int i=0; i<rows; i++) {\n            unordered_set<char> row_char;\n             for(int j=0; j<cols; j++) {\n                if(board[i][j] != '.') {\n                    if(row_char.find(board[i][j])==row_char.end())\n                        row_char.insert(board[i][j]);\n                    else\n                        return false;\n                }                \n             }\n             row_char.clear();\n        }\n\n        //Each column must contain the digits 1-9 without repetition.\n        for(int j=0; j<cols; j++) {\n            unordered_set<char> col_char;\n             for(int i=0; i<rows; i++) {\n                if(board[i][j] != '.') {\n                    if(col_char.find(board[i][j])==col_char.end())\n                        col_char.insert(board[i][j]);\n                    else\n                        return false;\n                }           \n             }\n             col_char.clear();\n        }\n        //Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n        for(int k=0; k<9; k++) {\n            unordered_set<char> grid_char;\n            for(int j=0+k/3*3; j<(3+k/3*3); j++) {            \n                for(int i=(0+k%3)*3; i<(1+k%3)*3; i++) {\n                    if(board[i][j] != '.') {\n                        if(grid_char.find(board[i][j])==grid_char.end())\n                            grid_char.insert(board[i][j]);\n                        else\n                            return false;\n                    }           \n                }             \n            }\n            grid_char.clear();\n        }\n\n        return true;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1}