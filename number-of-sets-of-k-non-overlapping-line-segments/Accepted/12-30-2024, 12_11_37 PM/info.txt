{"id":1492784304,"question_id":1725,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1735589497,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1492784304/","is_pending":"Not Pending","title":"Number of Sets of K Non-Overlapping Line Segments","memory":"23.6 MB","code":"class Solution {\n    long M = 1e9+7;\npublic:\n    int numberOfSets(int n, int K) {\n        long dp[1001][1001];\n        long sum[1001][1001];\n        for(int i=0; i<n; i++) {\n            dp[i][0] = 1;\n            sum[i][0] = i+1; //sum[i][k]表示dp[0..i][k]的和\n        }\n        /*当我们考察第i个点用来构造线段时，dp[i][k]依然可以写作dp[i][k] = sum {dp[j][k-1]} j=0,1,2...,i-1\n        当我们考察第i个点不用来构造线段时，事实上，这种情况下就有dp[i][k] = dp[i-1][k].我们不需要根据空置长度来分类。\n        因此，总的状态转移方程是：dp[i][k] = dp[i-1][k] + sum {dp[j][k-1]} j=0,1,2...,i-1. 我们只需要定义一个前缀和数组 sum[i][k]表示dp[0..i][k]的和。*/\n        for(int i=1; i<n; i++) {\n            for(int k=1; k<=min(i, K); k++) {\n                dp[i][k] = dp[i-1][k] + sum[i-1][k-1];\n                dp[i][k] %= M;\n                sum[i][k] = sum[i-1][k]+dp[i][k];\n                sum[i][k] %= M;\n            };\n        };\n        return dp[n-1][K]%M;\n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-sets-of-k-non-overlapping-line-segments","has_notes":false,"flag_type":1}