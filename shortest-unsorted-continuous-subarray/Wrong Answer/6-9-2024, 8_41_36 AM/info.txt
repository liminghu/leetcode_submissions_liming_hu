{"id":1282969910,"question_id":581,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1717947696,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1282969910/","is_pending":"Not Pending","title":"Shortest Unsorted Continuous Subarray","memory":"N/A","code":"class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) { //Return the shortest such subarray and output its length.\n    //Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\n    int ans = 0;\n    int n = nums.size();\n    stack<int> nd_s; //non decreasing stack.\n\n    int start = n-1;\n    int end = 0;\n\n    for(int i=0; i<n; i++) {\n        while(!nd_s.empty() && nums[nd_s.top()]>=nums[i]) {\n            start = min(start, nd_s.top());\n            nd_s.pop();\n        };\n        nd_s.push(i);\n    }\n\n    nd_s = stack<int>(); //clear\n\n    for(int i=n-1; i>=0; i--) { //decreasing.\n        while(!nd_s.empty() && nums[nd_s.top()]<nums[i]) {\n            end = max(end, nd_s.top());\n            nd_s.pop();\n        };\n        nd_s.push(i);\n    }\n\n    ans = end-start>0? end-start+1:0;\n    return ans;\n        \n    }\n};","compare_result":"1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111100001111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-unsorted-continuous-subarray","has_notes":false,"flag_type":1}