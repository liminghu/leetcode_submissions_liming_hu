{"id":1412057294,"question_id":132,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728085270,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1412057294/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"N/A","code":"/*\nGiven a string s, partition s such that every \nsubstring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\nExample 1:\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\nExample 2:\nInput: s = \"a\"\nOutput: 0\n\nExample 3:\nInput: s = \"ab\"\nOutput: 1\n \n\nConstraints:\n1 <= s.length <= 2000\ns consists of lowercase English letters only.\n*/\nclass Solution {\npublic:\n    int minCut(string s) {\n        if(isPalindrome(s))\n            return 0;\n\n        int size = s.size();        \n        if(size == 2) {\n            if(s[0] != s[1])\n                return 1;\n            else \n                return 0;\n        } \n\n        int res = INT_MAX;\n        for(int i=0; i<size-1; i++) {\n            int min_first = minCut(s.substr(0, i+1));\n            int min_second = minCut(s.substr(i+1, size-i-1));\n            //cout << \"i: \" << i << \" first: \" << min_first << \" second: \" << min_second << endl;\n            res = min(res, min_first+min_second);\n            //cout << \"res: \" << res << endl;\n        };\n        return res+1;\n    }\n    bool isPalindrome( string s) {\n        int size = s.size();\n        if(size<=1)\n            return true;\n        int start = 0;\n        int end = size-1;\n        while(start<end) {\n            if(s[start] == s[end]) {\n                start++;\n                end--;\n            } else\n                return false;\n        };\n        return true;\n    }\n};","compare_result":"1111111111111111111110000000000000000","title_slug":"palindrome-partitioning-ii","has_notes":false,"flag_type":1}