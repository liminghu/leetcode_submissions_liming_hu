{"id":389615332,"question_id":147,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1598995707,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/389615332/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        if(head==nullptr || head->next == nullptr) return head;\n        //sorted in increasing order.\n\t\tListNode dummyHead(0);\n\t\tdummyHead.next = head;\n        \n        ListNode *preloc = &dummyHead;\n        ListNode *loc = head; \t\t\n        ListNode *current = head->next;\n        head->next = nullptr;\n        while(current!=nullptr) {\n            //from the head of the sorted list, find the corresponding location.\n            loc = dummyHead.next; //search from head.\n            while(loc != nullptr && current->val > loc->val) {\n                preloc = loc;\n                loc = loc->next;\n            };\n            //found.\n            ListNode *temp;\n\t\t\ttemp = current->next;\n            \n\t\t\tpreloc->next = current;\n\t\t\tcurrent->next = loc;\n             \n                \n\t\t\tcurrent = temp;\n            preloc = &dummyHead;\n            \n        }\n\t\t\n\t\treturn dummyHead.next;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"insertion-sort-list","has_notes":false,"flag_type":1}