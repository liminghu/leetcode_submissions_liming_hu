{"id":1418507050,"question_id":158,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1728599490,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1418507050/","is_pending":"Not Pending","title":"Read N Characters Given read4 II - Call Multiple Times","memory":"8.1 MB","code":"/*\nGiven a file and assume that you can only read the file using a given method read4, implement a method read to read n characters. Your method read may be called multiple times.\nMethod read4:\nThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\nThe return value is the number of actual characters read.\nNote that read4() has its own file pointer, much like FILE *fp in C.\nDefinition of read4:\n    Parameter:  char[] buf4\n    Returns:    int\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\nBelow is a high-level example of how read4 works:\n\nFile file(\"abcde\"); // File is \"abcde\", initially file pointer (fp) points to 'a'\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = \"abcd\", fp points to 'e'\nread4(buf4); // read4 returns 1. Now buf4 = \"e\", fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = \"\", fp points to end of file\n \nMethod read:\nBy using the read4 method, implement the method read that reads n characters from file and store it in the buffer array buf. Consider that you cannot manipulate file directly.\nThe return value is the number of actual characters read.\nDefinition of read:\n    Parameters:\tchar[] buf, int n\n    Returns:\tint\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n\nNote:\nConsider that you cannot manipulate the file directly. The file is only accessible for read4 but not for read.\nThe read function may be called multiple times.\nPlease remember to RESET your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see here for more details.\nYou may assume the destination buffer array, buf, is guaranteed to have enough space for storing n characters.\nIt is guaranteed that in a given test case the same buffer buf is called by read.\n \nExample 1:\nInput: file = \"abc\", queries = [1,2,1]\nOutput: [1,2,0]\nExplanation: The test case represents the following scenario:\nFile file(\"abc\");\nSolution sol;\nsol.read(buf, 1); // After calling your read method, buf should contain \"a\". We read a total of 1 character from the file, so return 1.\nsol.read(buf, 2); // Now buf should contain \"bc\". We read a total of 2 characters from the file, so return 2.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\nAssume buf is allocated and guaranteed to have enough space for storing all characters from the file.\n\nExample 2:\nInput: file = \"abc\", queries = [4,1]\nOutput: [3,0]\nExplanation: The test case represents the following scenario:\nFile file(\"abc\");\nSolution sol;\nsol.read(buf, 4); // After calling your read method, buf should contain \"abc\". We read a total of 3 characters from the file, so return 3.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\n \nConstraints:\n1 <= file.length <= 500\nfile consist of English letters and digits.\n1 <= queries.length <= 10\n1 <= queries[i] <= 500\n*/\n/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char *buf4);\n */\n\nclass Solution {\npublic:\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n\n     */\n    char buf4[4];\n    int prevSize = 0;\n    int prevIndex = 0;\n    int read(char *buf, int n) {\n        int counter = 0;\n        while(counter < n) {\n            if(prevIndex < prevSize) {\n                buf[counter] = buf4[prevIndex];\n                prevIndex++;\n                counter++;\n            } else {\n                prevSize = read4(buf4);\n                prevIndex = 0;\n                if(prevSize == 0) {\n                    //no more data to consume from stream;\n                    break;\n                }\n            }\n        }\n        return counter;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"read-n-characters-given-read4-ii-call-multiple-times","has_notes":false,"flag_type":1}