{"id":1407445724,"question_id":2161,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727722404,"status":10,"status_display":"Accepted","runtime":"359 ms","url":"/submissions/detail/1407445724/","is_pending":"Not Pending","title":"Stock Price Fluctuation ","memory":"168.5 MB","code":"/*You are given a stream of records about a particular stock. Each record contains a timestamp and the corresponding price of the stock at that timestamp.\n\nUnfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record.\n\nDesign an algorithm that:\n\nUpdates the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp.\nFinds the latest price of the stock based on the current records. The latest price is the price at the latest timestamp recorded.\nFinds the maximum price the stock has been based on the current records.\nFinds the minimum price the stock has been based on the current records.\nImplement the StockPrice class:\n\nStockPrice() Initializes the object with no price records.\nvoid update(int timestamp, int price) Updates the price of the stock at the given timestamp.\nint current() Returns the latest price of the stock.\nint maximum() Returns the maximum price of the stock.\nint minimum() Returns the minimum price of the stock.\n1 <= timestamp, price <= 109\nAt most 105 calls will be made in total to update, current, maximum, and minimum.\ncurrent, maximum, and minimum will be called only after update has been called at least once.\n*/\nclass StockPrice {\nprivate:\n    priority_queue< pair<int,int>, vector< pair<int,int> >, greater<pair<int,int>> > pq_min_; //min top.  //pair: price, timestamp.\n    priority_queue< pair<int,int>, vector< pair<int,int> >, less< pair<int,int> > > pq_max_; //max top.   \n    unordered_map<int, int> timestampPriceMap; //timestamp is the key. \n    int latestTime_;\n\npublic:\n    StockPrice() { // Initializes the object with no price records.\n        latestTime_ = 0;  \n    }\n    \n    void update(int timestamp, int price) { //Updates the price of the stock at the given timestamp.\n        latestTime_ = max(latestTime_, timestamp);\n        timestampPriceMap[timestamp] = price;\n\n        pq_min_.push({price, timestamp});\n        pq_max_.push({price, timestamp});\n    }\n    \n    int current() { //Returns the latest price of the stock.\n        return timestampPriceMap[latestTime_];\n    }\n    \n    int maximum() { //pop any outdated records that are at the top of the heap.\n        pair<int, int> top = pq_max_.top();\n        while(timestampPriceMap[top.second] != top.first) {//if the price in the max heap is not in the hash map.\n          pq_max_.pop();\n          top = pq_max_.top();\n        }\n        return top.first;\n    }\n    \n    int minimum() { //pop any outdated records that are at the top of the heap.\n        pair<int, int> top = pq_min_.top();\n        while(timestampPriceMap[top.second] != top.first) {//if the price in the min heap is not in the hash map.\n          pq_min_.pop();\n          top = pq_min_.top();\n        }\n        return top.first;\n    }\n};\n\n/**\n * Your StockPrice object will be instantiated and called as such:\n * StockPrice* obj = new StockPrice();\n * obj->update(timestamp,price);\n * int param_2 = obj->current();\n * int param_3 = obj->maximum();\n * int param_4 = obj->minimum();\n */","compare_result":"111111111111111111","title_slug":"stock-price-fluctuation","has_notes":false,"flag_type":1}