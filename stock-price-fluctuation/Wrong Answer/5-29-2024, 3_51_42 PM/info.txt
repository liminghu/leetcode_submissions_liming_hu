{"id":1271854578,"question_id":2161,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717023102,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1271854578/","is_pending":"Not Pending","title":"Stock Price Fluctuation ","memory":"N/A","code":"class StockPrice {\nprivate:\n    //float min_price;\n    //float max_price;\n    unordered_map<int, int> price_hist; //key: timestamp, value: price.\n    int cur_timestamp;\n    map<int, int> priceFrequency; //sorted by key increasingly.\n\npublic:\n    StockPrice() { // Initializes the object with no price records.\n        cur_timestamp = -1;            \n    }\n    \n    void update(int timestamp, int price) { //Updates the price of the stock at the given timestamp.\n    \n        if(timestamp>cur_timestamp)\n            cur_timestamp = timestamp;\n\n        if(price_hist.find(cur_timestamp)!=price_hist.end()) {\n            int oldPrice = price_hist[timestamp];\n            priceFrequency[oldPrice]--;\n            if(priceFrequency[oldPrice]==0)\n                priceFrequency.erase(oldPrice);\n        }\n\n        price_hist[timestamp] = price;\n        priceFrequency[price]++;\n\n\n    }\n    \n    int current() { //Returns the latest price of the stock.\n        if(price_hist.find(cur_timestamp)!=price_hist.end())\n            return price_hist[cur_timestamp];\n        else\n            return -1; //??\n    }\n    \n    int maximum() {\n        return priceFrequency.rbegin()->first;\n    }\n    \n    int minimum() {\n        return priceFrequency.begin()->first;\n    }\n};\n\n/**\n * Your StockPrice object will be instantiated and called as such:\n * StockPrice* obj = new StockPrice();\n * obj->update(timestamp,price);\n * int param_2 = obj->current();\n * int param_3 = obj->maximum();\n * int param_4 = obj->minimum();\n */","compare_result":"110000000001000001","title_slug":"stock-price-fluctuation","has_notes":false,"flag_type":1}