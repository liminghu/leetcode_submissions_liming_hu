{"id":1381371651,"question_id":317,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725646910,"status":10,"status_display":"Accepted","runtime":"1235 ms","url":"/submissions/detail/1381371651/","is_pending":"Not Pending","title":"Shortest Distance from All Buildings","memory":"391.1 MB","code":"/*\nYou are given an m x n grid grid of values 0, 1, or 2, where:\neach 0 marks an empty land that you can pass by freely,\neach 1 marks a building that you cannot pass through, and\neach 2 marks an obstacle that you cannot pass through.\nYou want to build a house on an empty land that reaches all buildings in the shortest total travel distance. \nYou can only move up, down, left, and right.\nReturn the shortest travel distance for such a house. If it is not possible to build such a house according to \nthe above rules, return -1.\nThe total travel distance is the sum of the distances between the houses of the friends and the meeting point.\nThe distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 50\ngrid[i][j] is either 0, 1, or 2.\nThere will be at least one building in the grid.\n*/\nclass Solution {\npublic:\n    int shortestDistance(vector<vector<int>>& grid) {\n\n        int totalHouse = 0;\n        int min_dist = INT_MAX;\n        int m = grid.size(); //row\n        int n = grid[0].size(); //col\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(grid[i][j] == 1) { //house.\n                    totalHouse++;\n                }\n            }\n        }\n\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(grid[i][j] == 0) { //empty\n                    int distanceSum = bfs(grid, i, j, totalHouse);\n                    min_dist = min(min_dist, distanceSum);\n                } //if\n            }\n        }\n        return min_dist == INT_MAX? -1: min_dist;   \n    }\n\n    int bfs(vector<vector<int>>& grid, int row, int col, int totalHouse) {\n        vector<vector<int>> dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};\n        int m = grid.size(); //row\n        int n = grid[0].size(); //col\n\n        vector<vector<int>> visited(m, vector<int>(n,0));\n        int distanceSum = 0;\n        int housesReached = 0;\n\n        queue<pair<int,int>> q;\n        q.push({row,col});\n        visited[row][col] = 1;\n        \n        int distance = 0;\n        while(!q.empty() && housesReached < totalHouse) {\n            int q_size = q.size();\n            for(int k=0; k<q_size; k++) {\n                auto curr = q.front();\n                q.pop();\n                if(grid[curr.first][curr.second] == 1) { //building.  building can not pass through: so continue.\n                    distanceSum += distance;\n                    housesReached++;\n                    continue;\n                };\n                for(auto& dir: dirs) {\n                    int nextRow = curr.first + dir[0];\n                    int nextCol = curr.second + dir[1];\n                    if( nextRow >= 0 && nextRow < m && nextCol >= 0 && nextCol < n && !visited[nextRow][nextCol] && grid[nextRow][nextCol] != 2) {//0:empty, 1: house.\n                        visited[nextRow][nextCol] = 1;\n                        q.push({nextRow,nextCol});\n                    }\n                }//end for dir\n            }//end one layer.\n            distance++;\n        }\n        //if we can not reach all houses, then any cell we visited can not reach all houses. we mark them as obstacle.\n        if(housesReached != totalHouse) {\n            for(int i=0; i<m; i++){\n                for(int j=0; j<n; j++) {\n                    if(grid[i][j] == 0 && visited[i][j])\n                        grid[i][j] = 2;\n                }\n            }\n            return INT_MAX;\n        }\n        return distanceSum; //if we reach all the houses.\n    }  \n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-distance-from-all-buildings","has_notes":false,"flag_type":1}