{"id":1383668028,"question_id":803,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725833009,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1383668028/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"19 MB","code":"/*\nThere are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that \nthere is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such \nroute, return -1.\n1 <= n <= 100\n0 <= flights.length <= (n * (n - 1) / 2)\nflights[i].length == 3\n0 <= fromi, toi < n\nfromi != toi\n1 <= pricei <= 104\nThere will not be any multiple flights between two cities.\n0 <= src, dst, k < n\nsrc != dst\n*/\nclass Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<vector<pair<int,int>>> adj(n); \n        for(int i=0; i<flights.size(); i++) {\n            int from_i  = flights[i][0];\n            int to_i    = flights[i][1];\n            int price_i = flights[i][2];\n            adj[ from_i ].push_back( { to_i, price_i } );\n        };\n        vector<int> stops(n, INT_MAX); //from src to city i, how many stops.\n        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq; //min\n        //price_from_src_city, city, number_of_stops_from_src_city\n        pq.push({0, src, 0});\n        while(!pq.empty()) {\n            auto t = pq.top();\n            pq.pop();\n            int cur_price = t[0];\n            int cur_city  = t[1];\n            int cur_steps = t[2];\n            //If cur_steps > stops[cur_city], then we already visited this node with fewer steps earlier, so ignore the current triplet and move on.\n            if(cur_steps > stops[cur_city] || cur_steps > k+1) //k+1 flights maximum.\n                continue;\n            stops[cur_city] = cur_steps;\n            if(cur_city == dst)\n                return cur_price;\n            for(auto [neighbor, price]: adj[cur_city]) {\n                pq.push({cur_price + price, neighbor, cur_steps+1});\n            }\n        }\n        return -1;\n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"cheapest-flights-within-k-stops","has_notes":false,"flag_type":1}