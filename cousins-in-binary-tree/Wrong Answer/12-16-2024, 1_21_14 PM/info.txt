{"id":1480596194,"question_id":1035,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1734384074,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1480596194/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\npublic:\n    bool isCousins(TreeNode* root, int x, int y) {\n        int dx = 0;\n        TreeNode* px;\n        int dy = 0;\n        TreeNode* py;\n        px = findParentdepth(root, x, 0, dx);\n        py = findParentdepth(root, y, 0, dy);\n        return dx == dy && px != py;        \n    }\n    TreeNode* findParentdepth(TreeNode* root, int x, int depth, int& dx) {\n        if(root== NULL)\n            return NULL;\n        if((root->left && root->left->val == x) || (root->right && root->right->val == x) ) {\n            dx = depth;\n            return root;\n        }\n        TreeNode* left = findParentdepth(root->left, x, depth+1, dx);\n        if(left) \n            return left;\n\n        TreeNode* right = findParentdepth(root->right, x, depth+1, dx);\n        if(right)\n            return right;\n        return NULL;\n    }\n};","compare_result":"111111111110111111111111011110111111110111111111111111111111011111111111111111111111111111011111111111111","title_slug":"cousins-in-binary-tree","has_notes":false,"flag_type":1}