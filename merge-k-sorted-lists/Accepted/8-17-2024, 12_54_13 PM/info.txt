{"id":1359482953,"question_id":23,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1723924453,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1359482953/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"18.4 MB","code":"//You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n//Merge all the linked-lists into one sorted linked-list and return it.\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        /*\n            k == lists.length\n            0 <= k <= 104\n            0 <= lists[i].length <= 500\n            -104 <= lists[i][j] <= 104\n            lists[i] is sorted in ascending order.\n            The sum of lists[i].length will not exceed 104.\n        */\n        auto cmp = [](const ListNode* first, const ListNode* second) {\n            return first->val > second->val;\n        };\n\n        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> pq; //min queue\n        int k = lists.size();\n        if(k<=0)\n            return NULL;\n        for(int i=0; i<k; i++) {\n            if(lists[i])\n                pq.push(lists[i]);\n        }\n        ListNode* head = new ListNode(0);\n        ListNode* cur = head;\n        ListNode* prev = head; \n        while(!pq.empty()) {\n            ListNode* t = pq.top();\n            if(!t)\n                continue;\n            pq.pop();\n            if(t->next)\n                pq.push(t->next);\n            prev = cur;\n            cur = t;\n            prev->next = cur;\n        }\n        return head->next;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}