{"id":1465562195,"question_id":893,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1732860696,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1465562195/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"16 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> ans;\n    unordered_map<TreeNode*, TreeNode*> parent; //son->parent\n    unordered_set<TreeNode*> visited;\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n        if(root==NULL)\n            return {};\n        findParent(root);\n        dfs(target, k);\n        return ans;\n    }\n    void findParent(TreeNode* root) {\n        if(root == NULL)\n            return;\n        if(root->left) {\n            parent[root->left] = root;\n            findParent(root->left);\n        }\n        if(root->right) {\n            parent[root->right] = root;\n            findParent(root->right);\n        }\n    }\n    void dfs(TreeNode* node, int k) {\n        if(visited.find(node) != visited.end())\n            return;\n        visited.insert(node);\n        if(k==0) {\n            ans.push_back(node->val);\n            return;\n        }\n        if(node->left) \n            dfs(node->left, k-1);\n        \n        if(node->right)\n            dfs(node->right, k-1);\n        TreeNode* p = parent[node];\n        if(p)\n            dfs(p, k-1);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}