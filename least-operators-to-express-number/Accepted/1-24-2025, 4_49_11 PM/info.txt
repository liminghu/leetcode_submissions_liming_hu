{"id":1519551248,"question_id":1004,"lang":"cpp","lang_name":"C++","time":"1 week, 6 days","timestamp":1737766151,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1519551248/","is_pending":"Not Pending","title":"Least Operators to Express Number","memory":"7.8 MB","code":"class Solution {\npublic:\n    int leastOpsExpressTarget(int x, int target) {//2 <= x <= 100 1 <= target <= 2 * 10  8\n        //x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /).\n        if(x>target) {\n\t\t// At this time, you can get target either by add target times x/x or subtract (x - target) times x/x to x\n\t\t// For example, x = 3, target = 2. Then, 3/3 + 3/3 or 3 - 3/3 is possible result\n            return min(target*2-1, (x-target)*2);       \n        }\n        if(x==target)\n            return 0;\n        long long sums = x;\n        int times = 0;\n        while(sums<target) {// this is gready, put as much as possible 'x'\n            times++;\n            sums *= x;\n        };\n        if(sums==target) \n            return times;\n\t\t// when you have remainder, you have two choices, one is add, the other is subtract\n\t\t// for example, x = 3, target = 5. Then, 5 = 3 + 2 or 5 = 9 - 4\n        int subtract = INT_MAX;\n        int add = INT_MAX;\n        if(sums-target < target) { // 9 - 5 = 4\n            subtract = leastOpsExpressTarget(x, sums-target) + times; //using subtract\n        }        \n        add = leastOpsExpressTarget(x, target-(sums/x)) + times - 1; //using add\n        return min(subtract, add)+1;  // No matter +/- used, one more operator is add\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"least-operators-to-express-number","has_notes":false,"flag_type":1}