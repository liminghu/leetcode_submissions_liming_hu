{"id":1299421706,"question_id":256,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719290792,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1299421706/","is_pending":"Not Pending","title":"Paint House","memory":"13 MB","code":"class Solution {\npublic:\n/*\nThere is a row of n houses, where each house can be painted one of three colors: red, blue, or green. \nThe cost of painting each house with a certain color is different. You have to paint all the houses \nsuch that no two adjacent houses have the same color.\nThe cost of painting each house with a certain color is represented by an n x 3 cost matrix costs.\nFor example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the \ncost of painting house 1 with color green, and so on...\nReturn the minimum cost to paint all houses.\n*/\n    int minCost(vector<vector<int>>& costs) { //costs.length == n\n                                              //costs[i].length == 3\n                                              //1 <= n <= 100\n                                              //1 <= costs[i][j] <= 20\n        int sz = costs.size();\n        //int K = costs[0].size();\n        vector<vector<int>> dp(sz, vector<int>(3, 0));\n        //dp.push_back(costs[0]);\n        dp[0][0] = costs[0][0]; dp[0][1] = costs[0][1];  dp[0][2] = costs[0][2]; \n        for(int i=1; i<sz; i++) {\n            dp[i][0] = min(dp[i-1][1], dp[i-1][2])+ costs[i][0];\n            dp[i][1] = min(dp[i-1][0], dp[i-1][2])+ costs[i][1];\n            dp[i][2] = min(dp[i-1][0], dp[i-1][1])+ costs[i][2];\n        }\n        int ret = 0;\n        ret = min(dp[sz-1][0], dp[sz-1][1]);\n        ret = min(ret, dp[sz-1][2]);\n        \n        return ret;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"paint-house","has_notes":false,"flag_type":1}