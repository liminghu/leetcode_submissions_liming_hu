{"id":1420403772,"question_id":243,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1728770442,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1420403772/","is_pending":"Not Pending","title":"Shortest Word Distance","memory":"18.1 MB","code":"/*\nGiven an array of strings wordsDict and two different strings that already exist in the array word1 and word2, \nreturn the shortest distance between these two words in the list.\n\nExample 1:\nInput: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"coding\", word2 = \"practice\"\nOutput: 3\n\nExample 2:\nInput: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"\nOutput: 1\n \n\nConstraints:\n2 <= wordsDict.length <= 3 * 104\n1 <= wordsDict[i].length <= 10\nwordsDict[i] consists of lowercase English letters.\nword1 and word2 are in wordsDict.\nword1 != word2\n*/\nclass Solution {\npublic:\n    int shortestDistance(vector<string>& wordsDict, string word1, string word2) {\n        unordered_map<string, vector<int>> mp;\n        for(int i=0; i<wordsDict.size(); i++) {\n            mp[wordsDict[i]].push_back(i);\n        };\n        vector<int> w1_locs = mp[word1];\n        vector<int> w2_locs = mp[word2];\n        int min_dist = INT_MAX;\n        for(int i=0; i<w1_locs.size(); i++) {\n            for(int j=0; j<w2_locs.size(); j++) {\n                min_dist = min(min_dist, abs(w1_locs[i]-w2_locs[j]) );\n            }\n        }    \n        return min_dist;    \n    }\n};","compare_result":"111111111111111111111111111","title_slug":"shortest-word-distance","has_notes":false,"flag_type":1}