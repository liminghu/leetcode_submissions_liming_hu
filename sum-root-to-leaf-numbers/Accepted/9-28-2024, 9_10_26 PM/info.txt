{"id":1405696968,"question_id":129,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727583026,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1405696968/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"11.3 MB","code":"/*\nYou are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n0 <= Node.val <= 9\nThe depth of the tree will not exceed 10.\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        return dfs(root, 0);\n    }\n    //preorder dfs\n    int dfs(TreeNode* root, int cur) {\n        if(!root)\n            return 0;\n        cur = cur*10 + root->val;\n        if(!root->left && !root->right)\n            return cur;\n        int leftsum = dfs(root->left, cur);\n        int rightsum = dfs(root->right, cur);\n        return leftsum+rightsum;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-root-to-leaf-numbers","has_notes":false,"flag_type":1}