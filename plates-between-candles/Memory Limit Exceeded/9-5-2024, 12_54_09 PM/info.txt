{"id":1380377273,"question_id":2165,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725566049,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1380377273/","is_pending":"Not Pending","title":"Plates Between Candles","memory":"N/A","code":"/*\nThere is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed \nstring s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' \nrepresents a candle.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes \nthe substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates \nbetween candles that are in the substring. A plate is considered between candles if there is at \nleast one candle to its left and at least one candle to its right in the substring.\nFor example, s = \"||**||**|*\", and a query [3, 8] denotes the substring \"*||**|\". The number of plates \nbetween candles in this substring is 2, as each of the two plates has at least one candle in the substring \nto its left and right.\nReturn an integer array answer where answer[i] is the answer to the ith query.\n*/\nclass Solution {\npublic:\n    vector<int> platesBetweenCandles(string s, vector<vector<int>>& queries) {\n        unordered_map<int, vector<int>> mp; //pos, {idx of candle location until pos}\n        int n = s.length();\n        mp[-1] = {-1}; //vector<int>();\n        for(int i=0; i<n; i++) {\n            mp[i] = mp[i-1];\n            if(s[i] == '|' )\n                mp[i].push_back(i);\n        };\n\n        vector<int> ret;\n        for(auto query:queries) {\n            //query[0], query[1]\n            int res = 0;\n            vector<int> candle_i = mp[ query[0] ]; //{2}\n            //if(query[0] == candle_i.back())\n            //    candle_i.pop_back();\n            vector<int> candle_j = mp[ query[1] ];  //{2,5}\n            for(int k=candle_i.size(); k<candle_j.size(); k++) { //exclude candle_i\n                if(candle_j[k-1]!=-1 && candle_j[k-1] >= query[0])\n                    res += candle_j[k] - candle_j[k-1]-1;\n            };\n            ret.push_back(res);\n\n        }\n        return ret;\n    }\n};","compare_result":"111111111111000000000000000000000000","title_slug":"plates-between-candles","has_notes":false,"flag_type":1}