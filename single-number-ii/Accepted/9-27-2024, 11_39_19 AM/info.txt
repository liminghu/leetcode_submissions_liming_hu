{"id":1404225525,"question_id":137,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727462359,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1404225525/","is_pending":"Not Pending","title":"Single Number II","memory":"12.2 MB","code":"/*\nGiven an integer array nums where every element appears three times except for one, which appears \nexactly once. Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n1 <= nums.length <= 3 * 104\n-231 <= nums[i] <= 231 - 1\n*/\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        vector<int> bits(32,0);\n        for(int x:nums) {\n            for(int i=0; i<32; i++)\n                bits[i] += (x>>i)&1;\n        };\n        int ret = 0;\n        for(int i=0; i<32; i++) {\n            ret += (bits[i]%3) << i;\n        };\n        return ret;\n    /*    unordered_map<int, int> freq;\n        for(int i=0; i<nums.size(); i++) {\n            freq[nums[i]]++;\n        };\n        int loner = 0;\n        for(auto entry:freq) {\n            if(entry.second ==1)\n                return entry.first;\n        };\n        return 0;*/\n    }\n};","compare_result":"111111111111111","title_slug":"single-number-ii","has_notes":false,"flag_type":1}