{"id":1484946571,"question_id":2054,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1734821889,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1484946571/","is_pending":"Not Pending","title":"The Number of the Smallest Unoccupied Chair","memory":"74.7 MB","code":"using PII = pair<int,int>;\nclass Solution {\npublic:\n    int smallestChair(vector<vector<int>>& times, int targetFriend) {\n        //times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, \n        //and an integer targetFriend. All arrival times are distinct.\n        int n = times.size();\n        priority_queue<int,vector<int>, greater<>> empty; //chair id\n        priority_queue<PII, vector<PII>, greater<>> occupied; //PII: endtime, person id.\n        for(int i=0; i<10000; i++)\n            empty.push(i);\n        for(int i=0; i<times.size(); i++)\n            times[i].push_back(i); //start, end, person id.\n        sort(times.begin(), times.end());\n        for(auto time: times) {\n            int start    = time[0];\n            int end      = time[1];\n            int personId = time[2];\n            while(!occupied.empty() && occupied.top().first <=start) {\n                empty.push(occupied.top().second);\n                occupied.pop();\n            }\n            int chair = empty.top();\n            empty.pop();\n            if(personId ==  targetFriend)\n                return chair;\n            occupied.push({end, chair});\n        }\n        return 0;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-number-of-the-smallest-unoccupied-chair","has_notes":false,"flag_type":1}