{"id":1487666476,"question_id":440,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1735100807,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1487666476/","is_pending":"Not Pending","title":"K-th Smallest in Lexicographical Order","memory":"7.9 MB","code":"class Solution {\npublic:\n    int findKthNumber(int n, int k) {\n        int cur = 1; //current prefix node.\n        k--;\n        while(k>0) {\n            int steps = countSteps(n, cur, cur+1); //Calculate the number of steps in the subtree rooted at curr using countSteps(n, curr, curr + 1)\n            if(steps<=k) {\n                cur++; //Increment curr by 1 to move to the next prefix.\n                k-= steps;\n            } else {\n                cur*=10; //go deeper.\n                k--; //number ending with cur, nothing else.\n            }\n        }\n        return cur;\n    }\n    int countSteps(int n, long prefix1, long prefix2) {\n        int steps = 0;\n        while(prefix1 <=n) {\n            steps += min((long)(n+1),prefix2)-prefix1; //This ensures the count does not exceed n by capping prefix2 at n + 1 if prefix2 is larger than n.\n            prefix1 *= 10;\n            prefix2 *= 10;\n        }\n        return steps;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-th-smallest-in-lexicographical-order","has_notes":false,"flag_type":1}