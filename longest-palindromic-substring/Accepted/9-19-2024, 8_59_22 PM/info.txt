{"id":1396075262,"question_id":5,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1726804762,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1396075262/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"10 MB","code":"//Given a string s, return the longest palindromic substring in s.\nclass Solution {\npublic:\n    string longestPalindrome(string s) { //Given a string s, return the longest palindromic substring in s.\n                                            //1 <= s.length <= 1000\n                                            //s consist of only digits and English letters.\n        string t = \"#\";\n        for (int i=0; i<s.size(); i++) {\n            t.push_back(s[i]);\n            t.push_back('#');\n        }\n        \n        int N = t.size();\n        vector<int> P(N,0);\n        int maxCenter = -1;\n        int maxRight = -1;       \n        for (int i=0; i<N; i++) {\n            int r;\n            if (i > maxRight) {\n                r = 0;\n                while (i-r>=0 && i+r<N && t[i-r]==t[i+r]) \n                    r++;\n            } else {\n                int j = maxCenter*2-i;\n                r = min(P[j], maxRight - i );\n                while (i-r>=0 && i+r<N && t[i-r]==t[i+r]) \n                    r++;                \n            }\n            P[i] = r-1;\n            if (i + P[i] > maxRight) {\n                maxRight = i + P[i];\n                maxCenter = i;\n            }\n        }\n                \n        int maxLen = -1;\n        int center;\n        for (int i=0; i<P.size(); i++) {\n            if ( P[i] > maxLen ) {\n                maxLen = P[i];\n                center = i;                \n            }\n        }\n        return s.substr(center/2 - maxLen/2, maxLen);\n\n/*        int sz = s.length();\n        if( sz <= 1 )\n            return s;\n        \n        //dp\n        vector<vector<bool>> dp(sz, vector<bool>(sz, false));  //dp[i][j]: i:start, j:end. is s[i.,.j]  valid Palindrome string?\n        for(int i=0; i<sz; i++) {\n            dp[i][i] = true;\n        };\n\n        int start = 0;\n        int end = 0;\n        for(int i = 0; i < sz-1; i++) {\n            if(s[i] == s[i+1]) {\n                dp[i][i+1] = true;\n                start = i;\n                end = i + 1;\n            }\n        }\n\n        for ( int length = 3; length <= sz; length++ ) {\n            for ( int i = 0; i + length - 1 < sz; i++ ) {\n                if( s[i] == s[ i + length - 1 ] && dp[ i+1 ][ i+length-2 ] ) {\n                    dp[i][i+length-1] = true;\n                    start = i;\n                    end = i+length-1;\n                }\n            }\n        }\n\n        return s.substr(start, end-start+1);*/\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}