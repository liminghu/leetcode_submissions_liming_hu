{"id":1314606172,"question_id":5,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1720493210,"status":10,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/1314606172/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"25.4 MB","code":"class Solution {\npublic:\n    string longestPalindrome(string s) { //Given a string s, return the longest palindromic substring in s.\n                                            //1 <= s.length <= 1000\n                                            //s consist of only digits and English letters.\n        int sz = s.length();\n        if( sz <= 1 )\n            return s;\n        \n        //dp\n        vector<vector<bool>> dp(sz, vector<bool>(sz, false));  //dp[i][j]: i:start, j:end. is s[i.,.j]  valid Palindrome string?\n        for(int i=0; i<sz; i++) {\n            dp[i][i] = true;\n        };\n\n        int start = 0;\n        int end = 0;\n        for(int i = 0; i < sz-1; i++) {\n            if(s[i] == s[i+1]) {\n                dp[i][i+1] = true;\n                start = i;\n                end = i + 1;\n            }\n        }\n\n\n        for ( int length = 3; length <= sz; length++ ) {\n            for ( int i = 0; i + length - 1 < sz; i++ ) {\n                if( s[i] == s[ i + length - 1 ] && dp[ i+1 ][ i+length-2 ] ) {\n                    dp[i][i+length-1] = true;\n                    start = i;\n                    end = i+length-1;\n                }\n            }\n        }\n\n        return s.substr(start, end-start+1);\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}