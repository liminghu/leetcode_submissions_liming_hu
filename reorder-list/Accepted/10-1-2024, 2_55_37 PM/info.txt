{"id":1408702074,"question_id":143,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727819737,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1408702074/","is_pending":"Not Pending","title":"Reorder List","memory":"22.6 MB","code":"/*You are given the head of a singly linked-list. The list can be represented as:\n\nL0 → L1 → … → Ln - 1 → Ln\nReorder the list to be on the following form:\n\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\nThe number of nodes in the list is in the range [1, 5 * 104].\n1 <= Node.val <= 1000\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        //L0 → L1 → … → Ln - 1 → Ln\n        //L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n        if(head==NULL || head->next==NULL)\n            return;\n        //at least two nodes.\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        while(fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        };\n        //slow->next: point to the head of the second half.\n        ListNode* secondhalf = reverse(slow->next);\n        slow->next = NULL; //cut the second half.\n        \n        ListNode* first = head;\n\n        //merge\n        while(secondhalf) {\n            ListNode* t1 = first->next;\n            ListNode* t2 = secondhalf->next;\n            first->next = secondhalf;\n            secondhalf->next = t1;\n            first = t1;\n            secondhalf = t2;\n        };\n    }\n\n    ListNode* reverse(ListNode* head) {\n        ListNode* last = NULL;\n        ListNode* cur = head;\n        ListNode* nxt;\n        while(cur) {\n            nxt = cur->next;\n            cur->next = last;\n            last = cur;\n            cur = nxt;\n        };\n        return last;\n    }\n};","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1}