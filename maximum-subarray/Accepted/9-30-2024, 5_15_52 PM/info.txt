{"id":1407639625,"question_id":53,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727741752,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/1407639625/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"73.3 MB","code":"//Given an integer array nums, find the subarray with the largest sum, and return its sum.\n/*Constraints:\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n*/\n class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) { \n /*       int n = nums.size();\n        int max_sum = nums[0];\n        int cur_sum = 0;\n        for(size_t i=0; i<n; i++) {\n            cur_sum = max(cur_sum, 0) + nums[i];\n            max_sum = max(max_sum, cur_sum);            \n        }\n        return max_sum;*/\n        int n = nums.size();\n        vector<int> dp(n,0);\n        dp[0] = nums[0];\n        int ret = nums[0];\n        for(int i=1; i<n; i++) {\n            dp[i] = max(dp[i-1]+nums[i], nums[i]);\n            ret = max(ret, dp[i]);\n        }\n        return ret;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray","has_notes":false,"flag_type":1}