{"id":1485825420,"question_id":3184,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1734910398,"status":10,"status_display":"Accepted","runtime":"268 ms","url":"/submissions/detail/1485825420/","is_pending":"Not Pending","title":"Maximum Balanced Subsequence Sum","memory":"106.2 MB","code":"class Solution {\npublic:\n    long long maxBalancedSubsequenceSum(vector<int>& nums) {\n        /*\n            A subsequence of nums having length k and consisting of indices i0 < i1 < ... < ik-1 is balanced if the following holds:\n            nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1].\n         */\n        int n = nums.size();\n        vector<int> arr(n, 0);\n        for(int i=0; i<n; i++)\n            arr[i] = nums[i]-i;\n        map<int, long long> dp;   //arr, maxBalancedSubsequenceSum\n        long long ret = LLONG_MIN;\n        for(int i=0; i<n; i++) {\n            int x = arr[i];\n            auto iter = dp.upper_bound(x);\n            if(iter != dp.begin()) {\n                iter = prev(iter);\n                dp[x] = max((long long)nums[i], iter->second + nums[i]); //iter->second could be negative.\n            } else {\n                dp[x] = nums[i];\n            };\n            ret = max(ret, dp[x]);\n            iter = dp.find(x);\n            iter = next(iter);\n            while(iter!=dp.end() && iter->second <=dp[x]) {\n                iter = dp.erase(iter);\n            };\n        };\n        return ret;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-balanced-subsequence-sum","has_notes":false,"flag_type":1}