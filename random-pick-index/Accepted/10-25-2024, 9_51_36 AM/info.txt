{"id":1433541101,"question_id":398,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1729875096,"status":10,"status_display":"Accepted","runtime":"179 ms","url":"/submissions/detail/1433541101/","is_pending":"Not Pending","title":"Random Pick Index","memory":"363.9 MB","code":"/*\nGiven an integer array nums with possible duplicates, randomly output the index of a given target number. \nYou can assume that the given target number must exist in the array.\nImplement the Solution class:\nSolution(int[] nums) Initializes the object with the array nums.\nint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple \nvalid i's, then each index should have an equal probability of returning.\n*/\nclass Solution {\nprivate:\n    unordered_map<int, vector<int>> mp_;\npublic:\n    Solution(vector<int>& nums) {\n        for(int i=0; i<nums.size(); i++) {\n            mp_[ nums[i] ].push_back(i);\n        }\n    }\n    \n    int pick(int target) {\n        vector<int> idxes = mp_[target];\n        int r = random() % idxes.size();\n        return idxes[r];\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * int param_1 = obj->pick(target);\n */","compare_result":"1111111111111111","title_slug":"random-pick-index","has_notes":false,"flag_type":1}