{"id":1371589280,"question_id":211,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724878837,"status":10,"status_display":"Accepted","runtime":"918 ms","url":"/submissions/detail/1371589280/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"545.5 MB","code":"/*\nDesign a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\nWordDictionary() Initializes the object.\nvoid addWord(word) Adds word to the data structure, it can be matched later.\nbool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. \nword may contain dots '.' where dots can be matched with any letter.\n */\n/*1 <= word.length <= 25\nword in addWord consists of lowercase English letters.\nword in search consist of '.' or lowercase English letters.\nThere will be at most 2 dots in word for search queries.\nAt most 104 calls will be made to addWord and search.\n*/\nclass WordDictionary {\n\n    struct TrieNode {\n        public:\n            bool isEnd;\n            unordered_map<char, TrieNode*> children;\n    };\n    TrieNode* root;\npublic:\n    WordDictionary() {\n        root = new TrieNode();\n    }\n    \n    void addWord(string word) {\n        TrieNode* node = root;\n        for(auto ch:word) {\n            if( node->children.find(ch) == node->children.end())\n                node->children[ch] = new TrieNode();\n            node = node->children[ch];\n        };\n        node->isEnd = true;\n    }\n    \n    bool search(string word) {\n        return searchInNode(word, root);\n    }\n    bool searchInNode(string word, TrieNode* node) {\n        for(int i=0; i<word.length(); i++) {\n            if( node->children.find(word[i]) == node->children.end()) {\n                if(word[i] == '.' ) {                \n                    for(auto x:node->children) {\n                        TrieNode* child = x.second;\n                        if(searchInNode(word.substr(i+1), child))\n                            return true;\n                    }\n                }\n                return false;\n            } else \n                node = node->children[word[i]];\n        };\n        return node->isEnd;\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}