{"id":387710024,"question_id":211,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1598645226,"status":10,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/387710024/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"46.2 MB","code":"class WordDictionary {\npublic:\n    /** Initialize your data structure here. */\n    WordDictionary():root_(new TrieNode) {\n        \n    }\n    \n    /** Adds a word into the data structure. */\n    void addWord(string word) {\n        TrieNode* p = root_.get();\n\t\tfor(const char c: word) {\n\t\t\tif(!p->children[c-'a'])\n\t\t\t\tp->children[c-'a'] = new TrieNode();\n\t\t\tp = p->children[c-'a'];\n\t\t}\n\t\tp->is_word = true; //the last letter, set is_word true.\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    bool search(string word) {\n\t\treturn find(root_.get(), word, 0);\n    }\nprivate:\n    struct TrieNode {\n\t  bool is_word;\n\t  vector<TrieNode *> children;\n\t  TrieNode(): is_word(false), children(26, nullptr) {}\n\t  ~TrieNode() {\n\t    for(TrieNode* child: children)\n\t\t\tif(child) delete child;\n\t  }\n\t};\n\tunique_ptr<TrieNode> root_;\n\tconst bool find(TrieNode* curr, const string& word, int idx=0) {\n\t\tif(idx==word.size()) return curr->is_word;\n\t\tif(word[idx]=='.') {\n\t\t\tfor(int i=0; i<26; i++) {\n\t\t\t\tif(curr->children[i] && find(curr->children[i], word, idx+1))\n\t\t\t\t\treturn true;\n            }\n\t\t} else {\n\t\t\tif(curr->children[word[idx]-'a'] && find(curr->children[word[idx]-'a'], word, idx+1))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n};","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}