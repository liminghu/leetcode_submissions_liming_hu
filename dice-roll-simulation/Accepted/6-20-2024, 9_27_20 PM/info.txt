{"id":1295224533,"question_id":1343,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718944040,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/1295224533/","is_pending":"Not Pending","title":"Dice Roll Simulation","memory":"35.4 MB","code":"class Solution {\npublic:\n    int dieSimulator(int n, vector<int>& rollMax) {\n      \n        int M = 1e9+7;        \n        auto dp = vector<vector<vector<int>>>(n+1,vector<vector<int>>(7,vector<int>(16,0)));\n        rollMax.insert(rollMax.begin(),0);\n\n        for (int j=1; j<=6; j++)\n            dp[1][j][1] = 1;\n\n        for (int i=2; i<=n; i++)\n            for (int j=1; j<=6; j++)\n                for (int k=1; k<=rollMax[j]; k++)\n                {\n                    if (k==1)\n                    {\n                        for (int jj=1; jj<=6; jj++)\n                        {\n                            if (jj==j) continue;\n                            for (int kk=1; kk<=rollMax[jj]; kk++)\n                                dp[i][j][k] = (dp[i][j][k] + dp[i-1][jj][kk])%M;\n                        }\n                    }\n                    else\n                    {\n                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k-1])%M;\n                    }\n                }\n    \n        int sum = 0;\n        for (int j=1; j<=6; j++)\n            for (int k=1; k<=rollMax[j]; k++)\n                sum = (sum + dp[n][j][k])%M;\n\n        return sum;\n\n        \n        //dp[i][j][k] = \n    \n//dp[i][6][1] = sum(dp[i-1][1][?] .... dp[i-1][5][?] )   excluding dp[i-1][6][?]\n        \n        /*\n        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(7, vector<int>(16,0)));\n        \n      \n        int M = 1e9+7;        \n        rollMax.insert(rollMax.begin(), 0);\n        \n        for(int j=1; j<=6; j++)\n            dp[1][j][1] = 1;\n        \n        for(int i=2; i<=n; i++) {\n             for(int j=1; i<=6; j++) {\n                 for(int k=1; k<=rollMax[j]; k++) {\n                     //dp[i][6][2] = dp[i-1][6][1]\n                     if(k==1) {                   \n                         //dp[i][6][1] = sum(dp[i-1][1][?] .... dp[i-1][5][?] )   excluding dp[i-1][6][?]\n                         for(int jj=1; jj<=6; jj++) {\n                             if(jj == j) \n                                 continue;\n                         \n                             for(int kk=1; kk<=rollMax[jj]; kk++) {                                 \n                                    dp[i][j][k] = ( dp[i][j][k] + dp[i-1][jj][kk] ) % M;                                \n                             }   \n                         }\n                     } else {\n                          dp[i][j][k] = ( dp[i][j][k] + dp[i-1][j][k-1] ) % M;\n                     } //else\n                 }   //k     \n            } //j\n        } //i\n        \n        int ret = 0;   \n        for(int j=1; j<=6; j++) {\n            for(int k=1; k<=rollMax[j]; k++) {\n                ret = ( ret + dp[n][j][k] )% M;\n            }\n        }\n    \n        return ret;  */  \n    }\n};\n\n//6^n\n\n//paint house: dp[i][j] = sum(dp[i-1][j']) j'!=j\n\n//i: ith times, j: 0..6. k: continous time.\n//dp[i][j][k] = \n    \n//dp[i][6][2] = dp[i-1][6][1]\n\n\n//dp[i][6][1] = sum(dp[i-1][1][?] .... dp[i-1][5][?] )   excluding dp[i-1][6][?]\n","compare_result":"11111111111111111111111111111111","title_slug":"dice-roll-simulation","has_notes":false,"flag_type":1}