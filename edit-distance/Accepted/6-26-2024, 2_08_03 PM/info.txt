{"id":1301315858,"question_id":72,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719436083,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1301315858/","is_pending":"Not Pending","title":"Edit Distance","memory":"11.9 MB","code":"class Solution {\npublic:\n/*\nGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n\nYou have the following three operations permitted on a word:\nInsert a character\nDelete a character\nReplace a character\n*/\n    int minDistance(string word1, string word2) { //0 <= word1.length, word2.length <= 500\n        int sz1 = word1.size();\n        int sz2 = word2.size();\n        if(sz1==0)\n            return sz2;\n        if(sz2==0)\n            return sz1;\n\n        vector<vector<int>> dp(sz1+1, vector<int>(sz2+1, 0));\n        dp[0][0] = 0;\n        //dp[0][1] = 1;\n        //dp[1][0] = 1;\n        for(int i=0; i<=sz1; i++)\n            dp[i][0] = i;\n        for(int j=0; j<=sz2; j++)\n            dp[0][j] = j;\n\n        for(int i=1; i<=sz1; i++) {\n            for(int j=1; j<=sz2; j++) {\n                if(word1[i-1] == word2[j-1]) \n                    dp[i][j] = dp[i-1][j-1];\n                else {\n                    //insert, delettion, replace\n                    int minPre = min(dp[i-1][j]+1, dp[i][j-1]+1);\n                    minPre = min(minPre, dp[i-1][j-1]+1);\n                    dp[i][j] = minPre;\n                }\n            } \n        }\n        return dp[sz1][sz2];\n\n       // return minDistanceRecur(word1, word2, word1.size(), word2.size());\n    }\n\n/*    int minDistanceRecur(string word1, string word2, int word1Index, int word2Index) {\n        if( word1Index == 0)\n            return word2Index;\n        if( word2Index == 0)\n            return word1Index;\n        \n        if(word1[word1Index-1] == word2[word2Index-1] ) \n            return minDistanceRecur(word1, word2, word1Index-1, word2Index-1);\n        else {\n            int insertOperation = minDistanceRecur(word1, word2, word1Index, word2Index - 1);\n            int deleteOperation = minDistanceRecur(word1, word2, word1Index - 1, word2Index);\n            int replaceOperation = minDistanceRecur(word1, word2, word1Index - 1, word2Index - 1);\n            return min(insertOperation, min(deleteOperation, replaceOperation)) + 1;\n        }\n    }*/\n};","compare_resulttitle_slug":"edit-distance","has_notes":false,"flag_type":1}