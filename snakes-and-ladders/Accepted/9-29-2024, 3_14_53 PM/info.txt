{"id":1406530262,"question_id":945,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727648093,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1406530262/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"15.8 MB","code":"/*\nYou are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the \nbottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\n\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\n\nChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\nThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless \nof the size of the board.\nIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\nThe game ends when you reach the square n2.\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is \nboard[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.\n\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of \nanother snake or ladder, you do not follow the subsequent snake or ladder.\n\nFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder\n to square 3, but do not follow the subsequent ladder to 4.\nReturn the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.\nn == board.length == board[i].length\n2 <= n <= 20\nboard[i][j] is either -1 or in the range [1, n2].\nThe squares labeled 1 and n2 are not the starting points of any snake or ladder.\n*/\nclass Solution {\npublic:\n    int snakesAndLadders(vector<vector<int>>& board) {\n        //n>=2      4\n        if(board.size()==0)\n            return 0;\n        int n = board.size();\n        vector<bool> visited( n*n + 1, false);\n        int res = n*n;\n        queue<int> q;\n        int start = 1;\n        q.push(start);\n        int moves = 0;\n        while(!q.empty()) {\n            int size = q.size();\n            for(int i=0; i<size; i++) {\n                int cur = q.front();\n                q.pop();\n                if( cur == n*n )\n                    res = min(res, moves);\n                \n                for(int j=1; j<=6; j++) {\n                    int num = cur + j;\n                    if(num > n*n )\n                        break;\n                    if(!visited[num]) {\n                        visited[num] = true;\n                        //get row, col.\n                        int row = 0;\n                        int col = 0;\n                        getRowCol(num, n, row, col);\n                        cout << \"row: \"<< row << \" col \" << col << endl; \n                        if(board[row][col] == cur )\n                            continue;\n                        if(board[row][col]==-1) \n                            q.push(num);\n                        else \n                            q.push(board[row][col]);                        \n                    }\n                }    \n            }\n            moves++;\n        }\n        return res == n*n ? -1: res;\n    }\n    \n    void getRowCol(int num, int n, int& row, int& col) {\n        row = n-1 - (num-1) / n;  //  6 - 1/6    6-1- 35/6 = 0           6-1 -7/6 = 5-1 =4;        6-1 - 12/6 = 4 \n        //if(row == n-1, n-3...)\n        if( (n-row)%2 == 1 )  //n-1, n-3,... left to right...\n            col = (num-1) % n;    //1 ,2,3,4,5,6\n        else\n            col = (n-1) - (num-1) % n; //right to left.\n    };\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders","has_notes":false,"flag_type":1}