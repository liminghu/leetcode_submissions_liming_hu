{"id":1250373387,"question_id":314,"lang":"cpp","lang_name":"C++","time":"9 months, 1 week","timestamp":1714946702,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1250373387/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"15.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> verticalOrder(TreeNode* root) {\n        vector<vector<int>> res;\n        // the column number as the key of the hash and define vector<height, val> as the value of the hash. group all the elements with same column in separate vectors.\n        map<int, vector<pair<int, int>> > hash;\n\n        //the preorder traversal to visit all the nodes and while visiting the nodes also keep track of height (row) and column of the nodes.\n        preorder_traversal(root, 0, hash, 0); //L: root's column as 0. h: root's height as 0\n        \n        for(auto e: hash) {\n            vector<int> tmp;\n            vector<pair<int, int>> sorted = e.second;\n            sort(sorted.begin(), sorted.end(), [](pair<int, int> a, pair<int, int> b) { return (a.first < b.first);});\n            for(auto f: sorted) {\n                tmp.push_back(f.second); //value\n            }\n            res.push_back(tmp);\n        }\n        return res;\n    }\n\n    void preorder_traversal(TreeNode* root, int col, map<int, vector<pair<int, int>> > &hash, int height) {\n        if (!root)\n            return;\n        hash[col].push_back(make_pair(height, root->val));\n        preorder_traversal(root->left, col-1, hash, height+1);\n        preorder_traversal(root->right, col+1, hash, height+1);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-vertical-order-traversal","has_notes":false,"flag_type":1}