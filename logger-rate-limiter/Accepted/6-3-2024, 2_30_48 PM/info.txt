{"id":1276803845,"question_id":359,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717450248,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1276803845/","is_pending":"Not Pending","title":"Logger Rate Limiter","memory":"36.1 MB","code":"class Logger {\nprivate:\n   /* struct message {\n        string name;\n        int timestamp;\n    };\n    vector<message> messages;*/\n    unordered_map<string, int> messages;\n\npublic:\n    Logger() {\n        messages = unordered_map<string, int>();\n        \n    }\n    \n    bool shouldPrintMessage(int timestamp, string message) {\n        if(messages.find(message)!= messages.end()) {\n            if(messages[message] +10 <= timestamp)  {//can print\n                messages[message] = timestamp;\n                return true;\n            } else {\n                return false;\n            }\n        } else { //not found\n            messages[message] = timestamp;\n            return true;\n        };\n        \n    }\n};\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger* obj = new Logger();\n * bool param_1 = obj->shouldPrintMessage(timestamp,message);\n */","compare_result":"11111111111111111111","title_slug":"logger-rate-limiter","has_notes":false,"flag_type":1}