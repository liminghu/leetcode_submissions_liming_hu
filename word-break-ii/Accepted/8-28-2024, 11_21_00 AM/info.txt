{"id":1371457171,"question_id":140,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724869260,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1371457171/","is_pending":"Not Pending","title":"Word Break II","memory":"9.1 MB","code":"/*\nGiven a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence\n where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n*/\nclass Solution {\n        class TrieNode {\n        public:\n            TrieNode* child[26];\n            bool isEnd;\n            TrieNode() {\n                for(int i=0; i<26; i++) \n                    child[i] = NULL;\n                isEnd = false;\n            }\n    };\n    TrieNode* root;\n    int memo[300];\n    vector<string> rets;\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        /*  1 <= s.length <= 20\n            1 <= wordDict.length <= 1000\n            1 <= wordDict[i].length <= 10\n            s and wordDict[i] consist of only lowercase English letters.\n            All the strings of wordDict are unique.\n            Input is generated in a way that the length of the answer doesn't exceed 105.\n        */\n        root = new TrieNode();\n        for(auto word: wordDict) {\n            TrieNode* node = root;\n            for(auto ch: word) {\n                if(node->child[ch-'a'] == NULL) \n                   node->child[ch-'a'] = new TrieNode(); \n                node = node->child[ch-'a'];\n            }\n            node->isEnd = true;\n        }\n        vector<string> ans;\n        dfs(s, 0, ans);\n        return rets;\n    }\n   bool dfs(string& s, int cur, vector<string>& ans) {\n        if(memo[cur] == 1)\n            return false;\n\n        if(cur == s.size()) {\n            string temp;\n            for(auto word: ans) \n                temp += word + \" \";\n            temp.pop_back(); //remove last \" \"\n            rets.push_back(temp);\n            return true;\n        }\n\n        TrieNode* node = root;\n        bool flag = false;\n        for(int i=cur; i<s.size(); i++) {\n            if(node->child[ s[i]-'a' ]  != NULL) {\n                node = node->child[ s[i]-'a' ];\n                if(node->isEnd) {\n                    ans.push_back( s.substr(cur, i-cur+1) );\n                    if( dfs(s, i+1, ans) )\n                        flag = true;\n                    ans.pop_back();\n                }\n            } else\n                break;\n        }\n        if( flag == false )\n            memo[cur] = 1;\n        return flag;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"word-break-ii","has_notes":false,"flag_type":1}