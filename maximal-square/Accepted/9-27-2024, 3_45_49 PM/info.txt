{"id":1404380051,"question_id":221,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727477149,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/1404380051/","is_pending":"Not Pending","title":"Maximal Square","memory":"24.9 MB","code":"/*\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 300\nmatrix[i][j] is '0' or '1'.\n*/\nclass Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        if(matrix.empty())\n            return 0;\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<vector<int>> sizes(m, vector<int>(n,0));\n        int ans = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                sizes[i][j] = matrix[i][j]-'0';\n                if(sizes[i][j] == 0)\n                    continue;\n                if(i==0 || j== 0) {\n                } else if(i==0) {\n                    sizes[i][j] = sizes[i][j-1] +1;\n                } else if(j==0) {\n                    sizes[i][j] = sizes[i-1][j] +1;\n                } else\n                    sizes[i][j] = min( min(sizes[i][j-1], sizes[i-1][j]), sizes[i-1][j-1] ) + 1;\n                ans = max(ans, sizes[i][j]*sizes[i][j]);\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square","has_notes":false,"flag_type":1}