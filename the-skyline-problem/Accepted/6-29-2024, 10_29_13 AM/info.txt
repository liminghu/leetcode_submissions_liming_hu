{"id":1304081602,"question_id":218,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1719682153,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1304081602/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"19 MB","code":"/*\nA city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. \nGiven the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. \nEach key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always\n has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the\n  leftmost and rightmost buildings should be part of the skyline's contour.\n\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, \n[...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the \nfinal output as such: [...,[2 3],[4 5],[12 7],...]\n*/\nclass Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) { //1 <= buildings.length <= 104\n                                                                    //0 <= lefti < righti <= 231 - 1\n                                                                    //1 <= heighti <= 231 - 1\n                                                                    //buildings is sorted by lefti in non-decreasing order.\n        vector<vector<int>> ans;\n        multiset<int> pq{}; //it is sorted non decreasing.\n        pq.insert(0);\n        \n        vector<pair<int, int>> points;\n        \n        for(auto b: buildings){\n            points.push_back({b[0], -b[2]}); //entering,  height is negative.\n            points.push_back({b[1], b[2]});  //leaving\n        }\n        \n        sort(points.begin(), points.end()); //so the pints will be always entering first.\n        \n        int ongoingHeight = 0; //previous height.\n        \n        // points.first = x coordinate, points.second = height\n        for(int i = 0; i < points.size(); i++){\n            int currentPoint = points[i].first; //x\n            int heightAtCurrentPoint = points[i].second; //height, if negative entering.\n            \n            if(heightAtCurrentPoint < 0){\n                pq.insert(-heightAtCurrentPoint); //change it to pos.\n            } else {\n                pq.erase(pq.find(heightAtCurrentPoint)); //leaving, delete it. if duplicates, just delete the first one.\n            }\n            \n            // after inserting/removing heightAtI, if there's a change\n            auto pqTop = *pq.rbegin(); //end. the highest.\n            if(ongoingHeight != pqTop){ //pgTop is always the highest.\n                ongoingHeight = pqTop;\n                ans.push_back({currentPoint, ongoingHeight});\n            }\n        }\n        \n        return ans;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"the-skyline-problem","has_notes":false,"flag_type":1}