{"id":1341234962,"question_id":3235,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1722549407,"status":10,"status_display":"Accepted","runtime":"166 ms","url":"/submissions/detail/1341234962/","is_pending":"Not Pending","title":"Minimum Cost to Convert String I","memory":"117.5 MB","code":"/*\nYou are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. \nYou are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] \nrepresents the cost of changing the character original[i] to the character changed[i].\n\nYou start with the string source. In one operation, you can pick a character x from the string and change it to the \ncharacter y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.\n\nReturn the minimum cost to convert the string source to the string target using any number of operations. If it is \nimpossible to convert source to target, return -1.\n\nNote that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].\n*/\nclass Solution {\npublic:\n    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {\n        /*  1 <= source.length == target.length <= 105\n            source, target consist of lowercase English letters.\n            1 <= cost.length == original.length == changed.length <= 2000\n            original[i], changed[i] are lowercase English letters.\n            1 <= cost[i] <= 106\n            original[i] != changed[i]\n        */\n        //pair<int, int>: changed char, cost.\n        vector<vector<pair<int, int>>> adjacencyList(26); //26 single sources.\n        int sz = original.size();\n        for(int i=0; i<sz; i++) {\n            char sor = original[i];\n            char des = changed[i];\n            adjacencyList[sor-'a'].push_back( { des-'a', cost[i] } );\n        };\n\n        //calculate shortest paths for all possible char conversions.\n        vector<vector<long long>> minConversionCosts(26, vector<long long>(26,0));\n        for(int i=0; i<26; i++) {\n            minConversionCosts[i] = dijkstra(i, adjacencyList);\n        } \n\n        int n = source.length();\n\n        long long min_cost = 0;\n        for(int i=0; i<n; i++) {\n            char sor = source[i];\n            char des = target[i];\n            //min cost from sor to des.\n            if(sor != des) {\n                long long cur_cost = minConversionCosts[sor-'a'][des-'a'];\n                if( cur_cost == -1 ) //no path.\n                    return -1;\n                min_cost += cur_cost;\n            }\n        }\n\n        return min_cost;\n    }\n\nprivate:\n    //find min conversion costs from startChar to all other.\n    vector<long long> dijkstra(int startChar, vector<vector<pair<int, int>>>& adjacencyList) {\n        priority_queue< pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> min_pq; //cost, char\n        min_pq.push({0, startChar});\n        vector<long long> minCosts(26, -1);\n        while( !min_pq.empty() ) {\n            auto [curCost, curChar] = min_pq.top();\n            min_pq.pop();\n            if(minCosts[curChar] != -1 && minCosts[curChar] < curCost)  //no need to update.\n                continue;\n            for( auto& [targetChar, conversionCost]: adjacencyList[curChar] ) {\n                long long newTotalCost = curCost + conversionCost;\n                if(minCosts[targetChar] == -1 || newTotalCost < minCosts[targetChar]) {\n                    minCosts[targetChar] = newTotalCost;\n                    min_pq.push({newTotalCost, targetChar});\n                }\n            }\n        }\n\n        return minCosts;\n    }\n};","compare_resulttitle_slug":"minimum-cost-to-convert-string-i","has_notes":false,"flag_type":1}