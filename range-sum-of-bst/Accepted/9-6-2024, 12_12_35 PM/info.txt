{"id":1381417300,"question_id":975,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725649955,"status":10,"status_display":"Accepted","runtime":"87 ms","url":"/submissions/detail/1381417300/","is_pending":"Not Pending","title":"Range Sum of BST","memory":"63.2 MB","code":"/*\nGiven the root node of a binary search tree and two integers low and high, return the sum of \nvalues of all nodes with a value in the inclusive range [low, high].\nThe number of nodes in the tree is in the range [1, 2 * 104].\n1 <= Node.val <= 105\n1 <= low <= high <= 105\nAll Node.val are unique.\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        \n        if(root == NULL)\n            return 0;\n        if(low > high)\n            return 0;\n\n        int res = 0; \n        if(root->val >= low && root->val <= high)\n            res = root->val;\n        if(low <= root->val || high <= root->val)\n            res += rangeSumBST(root->left, low, high);\n        if(root->val <= low || root->val <= high)\n            res += rangeSumBST(root->right, low, high);\n\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"range-sum-of-bst","has_notes":false,"flag_type":1}