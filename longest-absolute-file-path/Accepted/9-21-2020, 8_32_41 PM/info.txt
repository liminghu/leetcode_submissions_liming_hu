{"id":399011335,"question_id":388,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1600745561,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/399011335/","is_pending":"Not Pending","title":"Longest Absolute File Path","memory":"6.7 MB","code":"class Solution {\npublic:\n    int lengthLongestPath(string input) {\n        istringstream ss(input);\n\t\tstring cur;\n\t\tint result = 0;\n\t\tsize_t max_len = 0;\n\t\t//Main idea is using hashmap to store the path length for each depth. The depth is the number of \"\\t\".\n\t\t//For each filename, calculate the path length by the current depth.\n\t\tunordered_map<int, int> path_len; \n\t\tpath_len[0] = 0;\n\t\twhile( getline(ss, cur, '\\n') ) {\n\t\t\tauto depth = cur.find_last_of(\"\\t\"); //Searches the string for the last character that matches any of the characters specified in its arguments.\n\t\t\tstring name = (depth==string::npos)? cur : cur.substr(depth+1); //string::npos: string maximum length.\n\t\t\tif( cur.find(\".\") != string::npos) {\n\t\t\t\tresult = max(result, path_len[depth-1] + (int) name.size());\n\t\t\t} else {\n\t\t\t\tpath_len[depth] = path_len[depth-1] + (int) name.size() + 1;\n\t\t\t};\n\t\t}\n\t\treturn result;\n    }\n};","compare_result":"1111111111111111111111111","title_slug":"longest-absolute-file-path","has_notes":false,"flag_type":1}