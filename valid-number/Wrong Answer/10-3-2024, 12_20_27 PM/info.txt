{"id":1410849845,"question_id":65,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1727983227,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1410849845/","is_pending":"Not Pending","title":"Valid Number","memory":"N/A","code":"/*\nGiven a string s, return whether s is a valid number.\nFor example, all the following are valid numbers: \"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \n\"+6e-1\", \"53.5e93\", \"-123.456e789\", while the following are not valid numbers: \"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\".\nFormally, a valid number is defined using one of the following definitions:\nAn integer number followed by an optional exponent.\nA decimal number followed by an optional exponent.\nAn integer number is defined with an optional sign '-' or '+' followed by digits.\nA decimal number is defined with an optional sign '-' or '+' followed by one of the following definitions:\nDigits followed by a dot '.'.\nDigits followed by a dot '.' followed by digits.\nA dot '.' followed by digits.\nAn exponent is defined with an exponent notation 'e' or 'E' followed by an integer number.\nThe digits are defined as one or more digits.\nExample 1:\n\nInput: s = \"0\"\nOutput: true\n\nExample 2:\nInput: s = \"e\"\nOutput: false\n\nExample 3:\nInput: s = \".\"\nOutput: false\n\nConstraints:\n1 <= s.length <= 20\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.\n*/\nclass Solution {\npublic:\n    bool isNumber(string s) {\n        while(s.length()>0 && s.back()==' ') //remove trailing space.\n            s.pop_back();\n        while(s.length()>0 && s[0] ==' ')  //remove leading space.\n            s.erase( s.begin() );\n        if(s==\"\" || s==\".\" || s==\"e\" )\n            return false; //if empty, false;\n        int countE = 0;\n        int posE = 0; //last posE.\n        for(int i=0; i<s.length(); i++) {\n            if(s[i] == 'e') {\n                countE++;\n                posE = i;\n            }\n        }\n        if(countE > 1)\n            return false;\n        //we have max one E\n        if(countE == 0) \n            return isOK(s, 1); //1: decimal ok?\n        //we have 1 E\n        //first part decimal, second part integer. \n        return isOK(s.substr(0, posE), 1) && isOK(s.substr(posE+1), 0);\n    }\n\n    bool isOK(string s, int k ) { //K: 1: decimal; 0: integer.\n        for(int i=0; i<s.length(); i++) {\n            if( ( s[i]=='+' || s[i] == '-') && i != 0 ) //non leading sign. \n                return false;\n        }\n        if( ( s[0]=='+' || s[0] == '-') ) //erase leading sign. \n                s.erase(s.begin());\n        int countDot = 0;\n        for(int i=0; i<s.size(); i++) {\n            if(s[i]=='.')\n                countDot++;\n            else if( !isdigit(s[i]) )\n                return false;\n        }\n        if(k==1)\n            return countDot<=1;\n        else \n            return countDot==0;\n    }\n};","compare_resulttitle_slug":"valid-number","has_notes":false,"flag_type":1}