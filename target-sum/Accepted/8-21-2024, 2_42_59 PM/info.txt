{"id":1363981479,"question_id":494,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724276579,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1363981479/","is_pending":"Not Pending","title":"Target Sum","memory":"11.2 MB","code":"/*\nYou are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols \n'+' and '-' before each integer in nums and then concatenate all the integers.\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 \nand concatenate them to build the expression \"+2-1\".\nReturn the number of different expressions that you can build, which evaluates to target.\n*/\nclass Solution {\nprivate:\n    int dp[21][2001]; //1 <= nums.length <= 20, -1000 <= target <= 1000\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        /*  1 <= nums.length <= 20\n            0 <= nums[i] <= 1000\n            0 <= sum(nums[i]) <= 1000\n            -1000 <= target <= 1000\n        */\n        int n = nums.size();\n        nums.insert(nums.begin(), 0);\n        const int offset = 1000;\n        dp[0][0+offset] = 1;\n\n        for(int i=1; i<=n; i++) \n            for(int s=-1000; s<=1000; s++) {\n                if(s-nums[i] >=-1000 && s-nums[i] <= 1000)\n                    dp[i][ s+offset ] += dp[i-1][ s-nums[i] + offset ];\n                if(s+nums[i] >=-1000 && s+nums[i] <= 1000)\n                    dp[i][ s+offset ] += dp[i-1][ s+nums[i] + offset];    \n            }\n        return dp[n][target+offset];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1}