{"id":1400980741,"question_id":2038,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727198266,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/1400980741/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"38.3 MB","code":"/*\nYou are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). \nYou are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column \nof the cell you are initially standing at.\nIn one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot \nstep outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell \nthat is at the border of the maze. The entrance does not count as an exit.\nReturn the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.\nmaze.length == m\nmaze[i].length == n\n1 <= m, n <= 100\nmaze[i][j] is either '.' or '+'.\nentrance.length == 2\n0 <= entrancerow < m\n0 <= entrancecol < n\nentrance will always be an empty cell.\n*/\nclass Solution {\npublic:\n    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {\n        vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        queue<array<int,3>> q;\n        int m = maze.size();\n        int n = maze[0].size();\n        vector<vector<int>> visited(m, vector<int>(n, 0));\n        int ret = 0;\n        q.push({entrance[0], entrance[1], 0}); //r, c, steps.\n        visited[entrance[0]][entrance[1]] = 1;\n        while( !q.empty() ) {\n            array<int,3> f = q.front();\n            q.pop();\n            for( int i = 0; i < dirs.size(); i++ ) {\n                int nb_r = f[0]  + dirs[i][0];\n                int nb_c = f[1]  + dirs[i][1];\n                if( nb_r >= 0 && nb_c >= 0 && nb_r <= m-1 && nb_c <= n-1 && visited[nb_r][nb_c] == 0 && maze[nb_r][nb_c] == '.') {\n                    if(isBorder(nb_r, nb_c, m, n))\n                        return f[2]+1;\n                    q.push({nb_r, nb_c, f[2]+1});\n                    visited[nb_r][nb_c] = 1;\n                }\n            }\n        };\n        return -1;\n    }\n\n    bool isBorder(int i, int j, int m, int n) {\n        if( i == 0 || j == 0 || i == m-1 || j == n-1)\n            return true;\n        else\n            return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"flag_type":1}