{"id":389730823,"question_id":94,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599015841,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/389730823/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"9.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if(root==nullptr) return res;\n        \n        vector<int> left = inorderTraversal(root->left);\n        res.insert( res.end(), left.begin(), left.end() );\n        \n        res.push_back(root->val);        \n    \n        vector<int> right = inorderTraversal(root->right);\n        res.insert( res.end(), right.begin(), right.end() ); \n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}