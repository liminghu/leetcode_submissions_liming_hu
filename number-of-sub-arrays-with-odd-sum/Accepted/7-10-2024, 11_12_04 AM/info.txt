{"id":1316744927,"question_id":1631,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1720635124,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/1316744927/","is_pending":"Not Pending","title":"Number of Sub-arrays With Odd Sum","memory":"110.6 MB","code":"/*\nGiven an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 109 + 7.\n*/\n\nclass Solution {\npublic:\n \n    int numOfSubarrays(vector<int>& arr) { /* 1 <= arr.length <= 105\n                                                1 <= arr[i] <= 100*/\n\n        //all subarrays: \n        // odd sum.\n        int odd = 0; //number of odd numbers.\n        int even = 0;\n        int answer = 0;\n        int modulus = (int)1e9+7;\n        for( auto number:arr ) {\n            if( number %2 == 0 )  \n            /*Firstly if a number is even then it would just increase even number of subarrays by 1 because the \n            number itself becomes the new subarray which is added in even total. Even + Even = Even \n            The odd sum subarrays remain constant as the sum still remains constant. Odd+Even=Odd*/\n                even++; //number of even numbers.\n            else { //odd.\n                swap( odd, even );//Odd+Odd=Even; Even +Odd=Odd;\n                odd++;  //number of odd numbers.\n            }\n            answer = ( answer  + odd ) % modulus;\n        }\n        return answer;\n    }\n\n\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-sub-arrays-with-odd-sum","has_notes":false,"flag_type":1}