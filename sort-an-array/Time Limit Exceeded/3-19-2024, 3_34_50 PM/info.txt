{"id":1208596210,"question_id":948,"lang":"cpp","lang_name":"C++","time":"10 months, 3 weeks","timestamp":1710887690,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1208596210/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"class Solution {\n\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        quickSort(nums, 0, nums.size()-1);\n        vector<int> res;\n        res = nums;\n        return res;\n    }\n\nint partition(vector<int>& nums, int start, int end)\n{\n    int pivot = nums[start];\n    int count = 0;\n    for (int i = start + 1; i <= end; i++) {\n        if (nums[i] <= pivot)\n            count++;\n    }\n \n    // Giving pivot element its correct position\n    int pivotIndex = start + count;\n    swap(nums[pivotIndex], nums[start]);\n \n    // Sorting left and right parts of the pivot element\n    int i = start, j = end;\n \n    while (i < pivotIndex && j > pivotIndex) {\n \n        while (nums[i] <= pivot) {\n            i++;\n        }\n \n        while (nums[j] > pivot) {\n            j--;\n        }\n \n        if (i < pivotIndex && j > pivotIndex) {\n            swap(nums[i++], nums[j--]);\n        }\n    }\n \n    return pivotIndex;\n}\n\nvoid swap(int& a, int& b){\n        int tmp = a;\n        a = b;\n        b = tmp;\n}\n\nvoid quickSort(vector<int>& nums, int start, int end)\n{\n    // base case\n    if (start >= end)\n        return;\n    // partitioning the array\n    int p = partition(nums, start, end);\n    // Sorting the left part\n    quickSort(nums, start, p - 1);\n    // Sorting the right part\n    quickSort(nums, p + 1, end);\n}\n};","compare_result":"111111111111111111100","title_slug":"sort-an-array","has_notes":false,"flag_type":1}