{"id":1450869162,"question_id":1059,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731435354,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1450869162/","is_pending":"Not Pending","title":"Missing Element in Sorted Array","memory":"34.1 MB","code":"class Solution {\npublic:\n    int missingElement1(vector<int>& nums, int k) {\n        int left = 0;\n        int right = nums.size()-1;\n        while(left<right) {\n            int mid = right-(right-left)/2;\n            if(nums[mid] - nums[0] - mid < k) //Calculate the number of missing elements between nums[mid] and nums[0] as nums[mid] - nums[0] - mid.\n                left = mid;\n            else\n                right = mid-1;\n        }\n        return nums[0] + k + left;\n    }\n    int missingElement(vector<int>& nums, int k) {\n        int left = 0;\n        int right = nums.size()-1;\n        int startMissing = nums[0]-1;\n        while( left <= right ) {\n            int pivot = left + (right-left)/2;\n            int missing_num = nums[pivot]-(pivot+1+startMissing);\n            if(missing_num < k)\n                left = pivot +1;\n            else\n                right = pivot-1;\n        };\n        //left = right+1;\n        /*At the end of the loop, left = right + 1, and the kth missing number is in-between arr[right] and arr[left]. \n        The number of integers missing before arr[right] is arr[right] - right - 1. Hence, \n        the number to return is arr[right] + k - (arr[right] - right - 1) = k + left.\n        */\n        //        cout << \"left:\" << left << \" right: \" << right << endl;\n\n        //int missingBefore = arr[right] - right - 1;\n        //return arr[right] + (k - missingBefore);\n        return startMissing + left + k; \n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"missing-element-in-sorted-array","has_notes":false,"flag_type":1}