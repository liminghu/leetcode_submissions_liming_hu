{"id":1388035706,"question_id":2690,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1726166923,"status":10,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/1388035706/","is_pending":"Not Pending","title":"House Robber IV","memory":"60.5 MB","code":"/*\nThere are several consecutive houses along a street, each of which has some money inside. There is also a robber, \nwho wants to steal money from the homes, but he refuses to steal from adjacent homes.\nThe capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\nYou are given an integer array nums representing how much money is stashed in each house. More formally, the ith \nhouse from the left has nums[i] dollars.\nYou are also given an integer k, representing the minimum number of houses the robber will steal from. It is always \npossible to steal at least k houses.\nReturn the minimum capability of the robber out of all the possible ways to steal at least k houses.\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= k <= (nums.length + 1)/2\n*/\nclass Solution {\n    //0: how many housese we can rob if we do not rob the ith house.\n    //1: how many housese we can rob if we rob the ith house.\n    int dp[100005][2]; \npublic:\n    int minCapability(vector<int>& nums, int k) {\n        int left = 0;\n        int right = INT_MAX;\n        while(left < right) {\n            int mid = left+(right-left)/2;\n            if( atLeastK(mid, nums, k) ) \n                right = mid;\n            else\n                left = mid+1;\n        }\n        return left;\n    }\n    bool atLeastK(int cap, vector<int>& nums, int k) {\n        int n = nums.size();\n        dp[0][0] = 0; \n        if(nums[0] <=cap) \n            dp[0][1] = 1;\n        else\n            dp[0][1] = INT_MIN;\n\n        for(int i=1; i<n; i++) {\n            if(nums[i] > cap) {\n                dp[i][0] = max(dp[i-1][0], dp[i-1][1]);\n                dp[i][1] = INT_MIN; \n            } else {\n                dp[i][0] = max(dp[i-1][0], dp[i-1][1]);\n                dp[i][1] = dp[i-1][0] + 1;                \n            }\n        }\n\n        return max(dp[n-1][0], dp[n-1][1]) >= k;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iv","has_notes":false,"flag_type":1}