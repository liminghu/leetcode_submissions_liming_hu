{"id":1400191410,"question_id":806,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727142196,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1400191410/","is_pending":"Not Pending","title":"Domino and Tromino Tiling","memory":"8.7 MB","code":"/*\nYou have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\n\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent\n cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n1 <= n <= 1000\n*/\nclass Solution {\npublic:\n    int numTilings(int n) {\n        int MODK = 1000000007;\n        vector<vector<long>> dp(n+1, vector<long>(2, 0));\n        dp[0][0] = dp[1][0] = 1;\n        for(int i=2; i<=n; i++) {\n            dp[i][0] = (dp[i-1][0] +dp[i-2][0] + 2*dp[i-1][1]) % MODK;\n            dp[i][1] = (dp[i-2][0] + dp[i-1][1]) % MODK; \n        }\n        return dp[n][0];        \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"domino-and-tromino-tiling","has_notes":false,"flag_type":1}