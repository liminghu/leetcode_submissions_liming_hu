{"id":1488392208,"question_id":2563,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1735170973,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/1488392208/","is_pending":"Not Pending","title":"Split Message Based on Limit","memory":"43.5 MB","code":"class Solution {\npublic:\n    vector<string> splitMessage(string message, int limit) {\n        //how many digits\n        for(int len =1; 3+len*2<limit; len++) { //3+len*2: <len/len>\n            int num=pow(10, len)-1; //maximum for len of digits.\n            int cost = (3+len)*num; //fixed cost.\n            for(int i=1; i<=len; i++)\n                cost += i * ( pow(10, i)-1 - (pow(10, i-1)-1) );\n            if(limit*num-cost >=message.size())\n                return get(message, limit, len); \n        };\n        return {}; \n    }\n    vector<string> get(string message, int limit, int len) {\n        vector<string> rets;\n        int count = 0;\n        int idx = 0;\n        while(count < message.size()) {\n            idx++;\n            int cost = 3+len+ to_string(idx).size();\n            int add =min(limit-cost, (int)message.size()-count);\n            rets.push_back(message.substr(count, add) + \"<\" + to_string(idx)+ \"/\");\n            count += add;\n        };\n        for(auto& ret:rets)\n            ret += to_string(idx)+\">\";\n        return rets;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"split-message-based-on-limit","has_notes":false,"flag_type":1}