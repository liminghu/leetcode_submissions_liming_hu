{"id":1413169122,"question_id":308,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728182427,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1413169122/","is_pending":"Not Pending","title":"Range Sum Query 2D - Mutable","memory":"16.8 MB","code":"/*\nGiven a 2D matrix matrix, handle multiple queries of the following types:\n\nUpdate the value of a cell in matrix.\nCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\nImplement the NumMatrix class:\n\nNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\nvoid update(int row, int col, int val) Updates the value of matrix[row][col] to be val.\nint sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left \ncorner (row1, col1) and lower right corner (row2, col2).\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n-1000 <= matrix[i][j] <= 1000\n0 <= row < m\n0 <= col < n\n-1000 <= val <= 1000\n0 <= row1 <= row2 < m\n0 <= col1 <= col2 < n\nAt most 5000 calls will be made to sumRegion and update.\n*/\nclass NumMatrix {\nprivate:\n    vector<vector<int>> matrix;\n    vector<vector<int>> presum;\n    int m, n;\n\npublic:\n    NumMatrix(vector<vector<int>>& matrix) {\n        this->matrix = matrix;\n        int m = matrix.size();\n        int n = matrix[0].size();\n        presum = vector(m, vector(n,0));\n        this->m = m;\n        this->n = n;\n\n        presum[0][0] = matrix[0][0];\n        for(int j=1; j<n; j++)\n            presum[0][j] =  presum[0][j-1] + matrix[0][j];\n        for(int i=1; i<m; i++)\n            presum[i][0] = presum[i-1][0] + matrix[i][0];\n\n        for(int i=1; i<m; i++) {\n            for(int j=1; j<n; j++) {\n                presum[i][j] = presum[i][j-1]+presum[i-1][j]-presum[i-1][j-1]+matrix[i][j];\n            }\n        }\n    }\n    \n    void update(int row, int col, int val) { //Update the value of a cell in matrix.\n        int prev_val = matrix[row][col];\n        matrix[row][col] = val;\n        int diff = val-prev_val;\n\n        for(int i=row; i<m; i++) {\n            for(int j=col; j<n; j++) {\n                presum[i][j] += diff;\n            }\n        }\n    }\n    \n    int sumRegion(int row1, int col1, int row2, int col2) { //Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        if (row1 >=1 && col1 >=1 ) {\n            return presum[row2][col2] + presum[row1-1][col1-1] - presum[row2][col1-1]-presum[row1-1][col2];\n        };\n        if(row1 == 0 && col1 == 0) {\n            return presum[row2][col2];\n        }\n\n        if(row1 == 0 && col1 >0 ) {\n            return presum[row2][col2] - presum[row2][col1-1];\n        }\n        if(row1 > 0 && col1 == 0 ) {\n            return presum[row2][col2] - presum[row1-1][col2];\n        }\n        return 0;\n    };\n};\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix* obj = new NumMatrix(matrix);\n * obj->update(row,col,val);\n * int param_2 = obj->sumRegion(row1,col1,row2,col2);\n */","compare_result":"1111111111111111","title_slug":"range-sum-query-2d-mutable","has_notes":false,"flag_type":1}