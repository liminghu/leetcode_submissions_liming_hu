{"id":1299211136,"question_id":198,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719265925,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1299211136/","is_pending":"Not Pending","title":"House Robber","memory":"9.5 MB","code":"class Solution {\npublic:\n/*\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, \nthe only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and \nit will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money \nyou can rob tonight without alerting the police.\n*/\n    int rob(vector<int>& nums) { //1 <= nums.length <= 100; 0 <= nums[i] <= 400\n    //0: if I did not rob i;\n    //1: if I robbed i.\n        int sz = nums.size();\n        vector<vector<int>> max_gain(sz, vector<int>(2,0));\n\n        max_gain[0][0] = 0;\n        max_gain[0][1] = nums[0];\n\n        for(int i=1; i<sz; i++) {\n            max_gain[i][0] = max(max_gain[i-1][0], max_gain[i-1][1]); //this iteration, I did not rob.\n            max_gain[i][1] = max_gain[i-1][0]+nums[i]; //this iteration, I rob.\n        };\n\n        return max(max_gain[sz-1][0], max_gain[sz-1][1]);\n        \n    };\n\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber","has_notes":false,"flag_type":1}