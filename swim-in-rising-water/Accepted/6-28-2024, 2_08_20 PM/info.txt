{"id":1303347185,"question_id":794,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1719608900,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1303347185/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"12.5 MB","code":"/*\nYou are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\n\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another \n4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim \ninfinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n*/\nclass Solution {\npublic:\n    int swimInWater(vector<vector<int>>& grid) { //1 <= n <= 50\n                                                //0 <= grid[i][j] < n2\n                                                //Each value grid[i][j] is unique.\n\n        //Dijkstra\n        const int sz = grid.size();\n        vector<vector<int>> directions = {{ -1, 0}, {1, 0}, {0, 1}, {0, -1} };\n        priority_queue< pair< int, pair<int, int> > > q;  //maximum in the top.    {-time, {row, col}}, negative to get the maximim for the priority queue.\n        q.push({-grid[0][0], pair{0,0}});\n        vector<vector<int>> seen(sz, vector<int>(sz,0));\n        seen[0][0] = 1;\n\n        while(!q.empty()) {\n            pair<int, pair<int, int>> cur = q.top();\n            q.pop();\n            int time = -cur.first;\n            int row = cur.second.first;\n            int col = cur.second.second;\n            if( col == sz-1 && row == sz-1 )\n                return time;\n            \n            for(int i=0; i<directions.size(); i++) {\n                if( row + directions[i][0] >= 0 && row+directions[i][0]<=sz-1 && col+directions[i][1]>=0 && col+directions[i][1]<=sz-1) {\n                    if(seen[ row + directions[i][0] ] [ col + directions[i][1] ])\n                        continue;\n                    seen[ row + directions[i][0] ] [ col + directions[i][1] ] = 1;\n                    q.push(pair{ -max(time, grid[ row + directions[i][0] ][ col + directions[i][1] ]), pair{row + directions[i][0], col + directions[i][1]} });\n                }\n            } \n        }\n\n        return -1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"swim-in-rising-water","has_notes":false,"flag_type":1}