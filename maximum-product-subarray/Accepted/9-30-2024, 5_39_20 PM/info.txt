{"id":1407651939,"question_id":152,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727743160,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1407651939/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"17.1 MB","code":"/*\nGiven an integer array nums, find a subarray that has the largest product, and return the product.\n\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n1 <= nums.length <= 2 * 104\n-10 <= nums[i] <= 10\nThe product of any subarray of nums is guaranteed to fit in a 32-bit integer.\nA subarray is a contiguous non-empty sequence of elements within an array.\n*/\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp1(n,0); // the max prod subarray ending at i \n        vector<int> dp2(n,0); // the min prod subarray ending at i \n        dp1[0] = nums[0];\n        dp2[0] = nums[0];\n        int ret = nums[0];\n        for(int i=1; i<n; i++) {\n            dp1[i] = max( max(dp1[i-1]* nums[i], dp2[i-1]* nums[i]), nums[i]);\n            dp2[i] = min( min(dp1[i-1]* nums[i], dp2[i-1]* nums[i]), nums[i]);\n            ret = max(ret, dp1[i]);\n        } ;\n        return ret;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-subarray","has_notes":false,"flag_type":1}