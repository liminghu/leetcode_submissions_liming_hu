{"id":1342360709,"question_id":1711,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1722640464,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1342360709/","is_pending":"Not Pending","title":"Find Valid Matrix Given Row and Column Sums","memory":"36.2 MB","code":"/*\nYou are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and \ncolSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, \nbut you do know the sums of each row and column.\nFind any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.\n\nReturn a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that \nfulfills the requirements exists.\n*/\nclass Solution {\npublic:\n    vector<vector<int>> restoreMatrix(vector<int>& rowSum, vector<int>& colSum) {\n       /*\n        1 <= rowSum.length, colSum.length <= 500\n        0 <= rowSum[i], colSum[i] <= 108\n        sum(rowSum) == sum(colSum)\n        */\n        //Find the smallest rowSum or colSum, and let it be x. \n        //Place that number in the grid, and subtract x from rowSum and colSum. Continue until all the sums are satisfied.\n\n        int rows = rowSum.size();\n        int cols = colSum.size();\n        vector<vector<int>> matrix(rows, vector<int>(cols, 0));\n\n        int minColSum = INT_MAX;\n        int col_index = -1;\n        for(int j=0; j<cols; j++) {\n            if(colSum[j] < minColSum && colSum[j] > 0) {\n                minColSum = colSum[j];\n                col_index = j;\n            }\n        }\n \n        int minRowSum = INT_MAX;\n        int row_index = -1;\n        for(int i=0; i<rows; i++) {\n            if(rowSum[i] < minRowSum && rowSum[i] > 0) {\n                minRowSum = rowSum[i];\n                row_index = i;\n            }\n        }\n\n \n\n        while(minRowSum != INT_MAX || minColSum != INT_MAX) {\n            if(row_index >=0 && col_index >=0) {\n                matrix[row_index][col_index] = min(minColSum, minRowSum);\n                rowSum[row_index] -= min(minColSum, minRowSum);\n                colSum[col_index] -= min(minColSum, minRowSum);\n            }\n\n            minColSum = INT_MAX;\n            for(int j=0; j<cols; j++) {\n                if(colSum[j] < minColSum && colSum[j] > 0) {\n                    minColSum = colSum[j];\n                    col_index = j;\n                }\n            }\n\n            minRowSum = INT_MAX;\n            for(int i=0; i<rows; i++) {\n                if(rowSum[i] < minRowSum && rowSum[i] > 0) {\n                    minRowSum = rowSum[i];\n                    row_index = i;\n                }\n            }\n        }\n        return matrix;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-valid-matrix-given-row-and-column-sums","has_notes":false,"flag_type":1}