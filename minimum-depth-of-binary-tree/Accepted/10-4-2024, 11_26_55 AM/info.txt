{"id":1411867027,"question_id":111,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728066415,"status":10,"status_display":"Accepted","runtime":"192 ms","url":"/submissions/detail/1411867027/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"145 MB","code":"/*\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.\n\nExample 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n\nExample 2:\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5\n \nConstraints:\nThe number of nodes in the tree is in the range [0, 105].\n-1000 <= Node.val <= 1000\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        if(root->left==NULL && root->right==NULL)\n            return 1;\n\n        int minLeft = INT_MAX;\n        if(root->left != NULL) {\n            minLeft = minDepth(root->left);\n        }   \n        int minRight = INT_MAX;\n        if(root->right != NULL) {\n            minRight = minDepth(root->right);\n        };\n        return min(minLeft, minRight) + 1;        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false,"flag_type":1}