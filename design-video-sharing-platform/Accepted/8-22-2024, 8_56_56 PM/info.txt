{"id":1365302689,"question_id":2396,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1724385416,"status":10,"status_display":"Accepted","runtime":"283 ms","url":"/submissions/detail/1365302689/","is_pending":"Not Pending","title":"Design Video Sharing Platform","memory":"165.3 MB","code":"/*\nYou have a video sharing platform where users can upload and delete videos. Each video is a string of digits, \nwhere the ith digit of the string represents the content of the video at minute i. \nFor example, the first digit represents the content at minute 0 in the video, \nthe second digit represents the content at minute 1 in the video, and so on. \nViewers of videos can also like and dislike videos. Internally, the platform \nkeeps track of the number of views, likes, and dislikes on each video.\n\nWhen a video is uploaded, it is associated with the smallest available integer videoId starting from 0. \nOnce a video is deleted, the videoId associated with that video can be reused for another video.\n\nImplement the VideoSharingPlatform class:\n*/\nstruct videoST {\n    int videoId;\n    string video;\n    int like;\n    int dislike;\n    int views;\n};\nunordered_map<int, videoST> videos;\nint current_id;\npriority_queue<int, vector<int>, greater<>> recycled_videoid_set; //min.\n\nclass VideoSharingPlatform {\npublic:\n    //VideoSharingPlatform() Initializes the object.\n    VideoSharingPlatform() { \n        current_id = 0;     \n        videos.clear();   \n        recycled_videoid_set = priority_queue<int, vector<int>, greater<>>();\n    }\n    \n    //int upload(String video) The user uploads a video. Return the videoId associated with the video.\n    int upload(string video) {\n        int id = 0;\n        if (!recycled_videoid_set.empty()) {\n            id = recycled_videoid_set.top();\n            recycled_videoid_set.pop();\n        } else {\n            id = current_id;\n            current_id++;\n        };\n        videoST cur_video;\n        cur_video.videoId = id;\n        cur_video.video = video;\n        cur_video.like = 0;\n        cur_video.dislike = 0;\n        cur_video.views = 0;\n        videos[id] = cur_video;\n        return id;\n    }\n    \n    //void remove(int videoId) If there is a video associated with videoId, remove the video.\n    void remove(int videoId) {\n        if(videos.find(videoId)!=videos.end()) {\n            recycled_videoid_set.push(videoId);\n            videos.erase(videoId);\n        };\n        \n    }\n    \n    //If there is a video associated with videoId, increase the number of views \n    //on the video by 1 and return the substring of the video string starting at \n    //startMinute and ending at min(endMinute, video.length - 1) (inclusive). Otherwise, return \"-1\".\n    string watch(int videoId, int startMinute, int endMinute) {\n        if(videos.find(videoId)!=videos.end()) {\n            videoST cur_video = videos[videoId];\n            string video = cur_video.video;\n            cur_video.views++;\n            videos[videoId] = cur_video;\n            int video_size = video.size()-1;\n            return video.substr(startMinute, min(endMinute,video_size) - startMinute + 1 );\n        }\n        return \"-1\";\n        \n    }\n\n    //Increases the number of likes on the video associated with \n    //videoId by 1 if there is a video associated with videoId.\n    void like(int videoId) {\n        if(videos.find(videoId)!=videos.end()) {\n            videoST cur_video = videos[videoId];\n            cur_video.like++;\n            videos[videoId] = cur_video;\n        }\n    }\n\n    //Increases the number of dislikes on the video associated with videoId by \n    //1 if there is a video associated with videoId.\n    void dislike(int videoId) {\n        if(videos.find(videoId)!=videos.end()) {\n            videoST cur_video = videos[videoId];\n            cur_video.dislike++;\n            videos[videoId] = cur_video;\n        }\n        \n    }\n\n    //Return a 0-indexed integer array values of length 2 where \n    //values[0] is the number of likes and values[1] is the number of dislikes on the video associated \n    //with videoId. If there is no video associated with videoId, return [-1].\n    vector<int> getLikesAndDislikes(int videoId) {\n        if( videos.find(videoId) != videos.end() ) {\n            videoST cur_video = videos[videoId];\n            return {cur_video.like, cur_video.dislike};\n        } else\n            return {-1};\n        \n    }\n\n    //Return the number of views on the video associated with videoId, if there is no video \n    //associated with videoId, return -1.    \n    int getViews(int videoId) {\n        int res;\n        if(videos.find(videoId)!=videos.end()) {\n            videoST cur_video = videos[videoId];\n            return cur_video.views;\n        }\n        return -1;\n    }\n};\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform* obj = new VideoSharingPlatform();\n * int param_1 = obj->upload(video);\n * obj->remove(videoId);\n * string param_3 = obj->watch(videoId,startMinute,endMinute);\n * obj->like(videoId);\n * obj->dislike(videoId);\n * vector<int> param_6 = obj->getLikesAndDislikes(videoId);\n * int param_7 = obj->getViews(videoId);\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-video-sharing-platform","has_notes":false,"flag_type":1}