{"id":400673049,"question_id":139,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1601062256,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/400673049/","is_pending":"Not Pending","title":"Word Break","memory":"14.7 MB","code":"class Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        // Create a hashset of words for fast query.\n        unordered_set<string> dict(wordDict.cbegin(), wordDict.cend());\n        // Query the answer of the original string.\n        return wordBreak(s, dict);\n    }\n    \n    bool wordBreak(const string& s, const unordered_set<string>& dict) {\n        // In memory, directly return.\n        if(mem_.count(s)) return mem_[s];\n        // Whole string is a word, memorize and return.\n        if(dict.count(s)) return mem_[s]=true;\n        // Try every break point.\n        for(int j=1;j<s.length();j++) {\n            const string left = s.substr(0,j);\n            const string right = s.substr(j);\n            // Find the solution for s.\n            if(dict.count(right) && wordBreak(left, dict))\n                return mem_[s]=true;\n        }\n        // No solution for s, memorize and return.\n        return mem_[s]=false;\n    }\nprivate:\n    unordered_map<string, bool> mem_;\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false,"flag_type":1}