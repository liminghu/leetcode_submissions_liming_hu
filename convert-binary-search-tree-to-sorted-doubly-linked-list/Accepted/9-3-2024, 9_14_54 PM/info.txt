{"id":1378398153,"question_id":758,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725423294,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1378398153/","is_pending":"Not Pending","title":"Convert Binary Search Tree to Sorted Doubly Linked List","memory":"12.5 MB","code":"/*Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.\nYou can think of the left and right pointers as synonymous to the predecessor and\n successor pointers in a doubly-linked list. For a circular doubly linked list, \n the predecessor of the first element is the last element, and the successor of the\n  last element is the first element.\nWe want to do the transformation in place. After the transformation, the left pointer\n of the tree node should point to its predecessor, and the right pointer should point\n  to its successor. You should return the pointer to the smallest element of the linked list.\n*/\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n        left = NULL;\n        right = NULL;\n    }\n\n    Node(int _val, Node* _left, Node* _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* treeToDoublyList(Node* root) {\n        /*  The number of nodes in the tree is in the range [0, 2000].\n            -1000 <= Node.val <= 1000\n            All the values of the tree are unique.\n        */\n        if(root == NULL)\n            return NULL;\n        if(root->left == NULL && root->right == NULL) {\n            Node* rootNode = new Node(root->val);\n            rootNode->left = rootNode;\n            rootNode->right = rootNode;\n            return rootNode;\n        }\n        \n        if( root->left == NULL && root->right != NULL) {            \n            Node* rightList = treeToDoublyList(root->right);\n            Node* rightend = rightList->left;\n            Node* rootNode = new Node(root->val);\n            rootNode->left = rightend;\n            rootNode->right = rightList;\n            rightend->right = rootNode; \n            rightList->left = rootNode;\n            //cout << \"root val = \" << rootNode->val << endl;\n            //cout << \"root left val = \" << rootNode->left->val << endl;\n            //cout << \"root right val = \" << rootNode->right->val << endl;\n\n            return rootNode;\n        };\n\n        if( root->left != NULL && root->right == NULL) {            \n            Node* leftList = treeToDoublyList(root->left);\n            Node* rootNode = new Node(root->val);\n            Node* leftend = leftList->left;\n            rootNode->left = leftend;\n            rootNode->right = leftList;\n            leftend->right = rootNode; \n            leftList->left = rootNode;\n            //cout << \"root val = \" << leftList->val << endl;\n            //cout << \"root left val = \" << leftList->left->val << endl;\n            //cout << \"root right val = \" << leftList->right->val << endl;\n            return leftList;\n        };\n\n        if( root->left != NULL && root->right != NULL) {\n            Node* rightList = treeToDoublyList(root->right);\n            Node* rootNode = new Node(root->val);\n            rootNode->right = rightList;\n            Node* rightend = rightList->left;\n\n            Node* leftList = treeToDoublyList(root->left);\n            Node* leftend = leftList->left;\n\n            leftList->left = rightend;\n            leftend->right = rootNode; \n            \n            rightList->left = rootNode;\n\n            rootNode->left = leftend;\n            rightend->right = leftList;\n            //cout << \"root val = \" << leftList->val << endl;\n            //cout << \"root left val = \" << leftList->left->val << endl;\n            //cout << \"root right val = \" << leftList->right->val << endl;\n            return leftList;\n        }\n\n        return NULL;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"convert-binary-search-tree-to-sorted-doubly-linked-list","has_notes":false,"flag_type":1}