{"id":1297024023,"question_id":77,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719083316,"status":10,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/1297024023/","is_pending":"Not Pending","title":"Combinations","memory":"61.7 MB","code":"class Solution {\npublic:\n/*\nGiven two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n\nYou may return the answer in any order.\n*/\n    int k;\n    int n;\n\n    vector<vector<int>> combine(int n, int k) {//1 <= n <= 20; 1 <= k <= n\n        this->k = k;\n        this->n = n;\n        vector<vector<int>> ans;\n        vector<int> path = {};\n        backtrack(path, 1, ans); //first element: 1\n        return ans;\n    }\n\n    void backtrack(vector<int>& path, int startNum, vector<vector<int>>& ans) {\n       if(path.size() == k) {\n            ans.push_back(path);\n            return;\n       } \n\n       for(int num=startNum; num<=n; num++) {\n            path.push_back(num);\n            backtrack(path, num+1, ans);\n            path.pop_back();\n       }\n       return;\n\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1}