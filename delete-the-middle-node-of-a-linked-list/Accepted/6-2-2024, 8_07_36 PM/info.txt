{"id":1275869475,"question_id":2216,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717384056,"status":10,"status_display":"Accepted","runtime":"544 ms","url":"/submissions/detail/1275869475/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"298.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteMiddle(ListNode* head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        int count=0;  //⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.\n        if(head==NULL)\n            return NULL;\n        if(head->next == NULL) \n            return NULL;\n        \n        ListNode* pre_slow = slow;        \n        while(fast!=NULL && fast->next != NULL) {\n            pre_slow = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        };\n\n        //delete pre_slow->next;\n        pre_slow->next = slow->next;\n        return head;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false,"flag_type":1}