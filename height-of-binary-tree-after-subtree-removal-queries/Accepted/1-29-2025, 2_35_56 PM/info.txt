{"id":1524830945,"question_id":2545,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1738190156,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1524830945/","is_pending":"Not Pending","title":"Height of Binary Tree After Subtree Removal Queries","memory":"190.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    int leftFirstHeight[100001], rightFirstHeight[100001];\n    int maxHeight = 0;\npublic:\n    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {\n        maxHeight = 0;\n        leftFirst(root, 0);\n        maxHeight = 0;\n        rightFirst(root, 0);\n        vector<int> res;\n        for(int q: queries) {\n            res.push_back( max(leftFirstHeight[q], rightFirstHeight[q]) );\n        }\n        return res;\n    }\n    void leftFirst(TreeNode* root, int h) { //Pre-order dfs the tree (node, left, right),\n        if(!root)\n            return;\n        leftFirstHeight[root->val] = maxHeight;  //0\n        maxHeight = max(maxHeight, h);\n        leftFirst(root->left, h+1);\n        leftFirst(root->right, h+1);\n    }\n    void rightFirst(TreeNode* root, int h) { //ost-order dfs the tree (node, right, left),\n        if(!root)\n            return;\n        rightFirstHeight[root->val] = maxHeight;   //0\n        maxHeight = max(maxHeight, h);\n        rightFirst(root->right, h+1);\n        rightFirst(root->left, h+1);\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111","title_slug":"height-of-binary-tree-after-subtree-removal-queries","has_notes":false,"flag_type":1}