{"id":1483214143,"question_id":644,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1734637291,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1483214143/","is_pending":"Not Pending","title":"Maximum Average Subarray II","memory":"43.7 MB","code":"//Find a contiguous subarray whose length is greater than or equal to k that has the maximum average value\n// and return this value. Any answer with a calculation error less than 10-5 will be accepted.\nclass Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        double right = INT_MIN;\n        double left = INT_MAX;\n        for(auto num: nums) {\n            right = fmax(right, num);\n            left = fmin(left, num);\n        };\n\n        while( right-left > 1e-5 ) {\n            double mid = (right+left)*0.5;\n            if(check(nums, mid, k))\n                left  = mid;\n            else\n                right = mid;\n        }\n        return left;\n    }\n    bool check(vector<int>& nums, double mid, int k) {\n        double curSum = 0;\n        double prevSum = 0;\n        double minSum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            curSum += nums[i]-mid;\n            if(i>=k-1) {\n                if( curSum-minSum >= 0)\n                    return true;\n                prevSum += nums[i-k+1]-mid;\n                minSum = min(prevSum, minSum);\n            }\n        } \n        return false;   \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-ii","has_notes":false,"flag_type":1}