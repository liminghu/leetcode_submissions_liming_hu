{"id":1482498066,"question_id":644,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1734575163,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1482498066/","is_pending":"Not Pending","title":"Maximum Average Subarray II","memory":"43.9 MB","code":"class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        //Find a contiguous subarray whose length is greater than or equal to k that has the maximum average value\n        // and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n        double maxNum = INT_MIN;\n        double minNum = INT_MAX;\n        for(auto num: nums) {\n            maxNum = fmax(maxNum, num);\n            minNum = fmin(minNum, num);\n        };\n        double prevMid = maxNum;\n        double error = INT_MAX;\n        while(error>0.00001) {\n            double mid = (maxNum+minNum)*0.5;\n            if(check(nums, mid, k))\n                minNum = mid;\n            else\n                maxNum = mid;\n            error = fabs(prevMid-mid);\n            prevMid = mid;\n        }\n        return minNum;\n    }\n    bool check(vector<int>& nums, double mid, int k) {\n        double sum = 0;\n        double prev = 0;\n        double minSum = 0;\n        for(int i=0; i<k; i++)\n            sum+= nums[i]-mid;\n        if(sum>=0)\n            return true;\n        for(int i=k; i<nums.size(); i++) {\n            sum+= nums[i]-mid;\n            prev += nums[i-k]-mid;\n            minSum = min(prev, minSum);\n            if(sum>=minSum)\n                return true;\n        } \n        return false;   \n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-ii","has_notes":false,"flag_type":1}