{"id":1418736539,"question_id":1203,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1728625830,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1418736539/","is_pending":"Not Pending","title":"Print in Order","memory":"8.8 MB","code":"/*\nSuppose we have a class:\npublic class Foo {\n  public void first() { print(\"first\"); }\n  public void second() { print(\"second\"); }\n  public void third() { print(\"third\"); }\n}\nThe same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and \nthread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and \nthird() is executed after second().\n\nNote:\nWe do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. \nThe input format you see is mainly to ensure our tests' comprehensiveness.\n\nExample 1:\nInput: nums = [1,2,3]\nOutput: \"firstsecondthird\"\nExplanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), \nand thread C calls third(). \"firstsecondthird\" is the correct output.\n\nExample 2:\nInput: nums = [1,3,2]\nOutput: \"firstsecondthird\"\nExplanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output.\n \nConstraints:\nnums is a permutation of [1, 2, 3].\n*/\n#include <semaphore.h>\nclass Foo {\nprotected:\n    sem_t firstJobDone;\n    sem_t secondJobDone;\npublic:\n    Foo() {\n        sem_init(&firstJobDone, 0, 0);\n        sem_init(&secondJobDone, 0, 0);\n    }\n\n    void first(function<void()> printFirst) {\n        \n        // printFirst() outputs \"first\". Do not change or remove this line.\n        printFirst();\n        sem_post(&firstJobDone);\n    }\n\n    void second(function<void()> printSecond) {\n        sem_wait(&firstJobDone);\n        // printSecond() outputs \"second\". Do not change or remove this line.\n        printSecond();\n        sem_post(&secondJobDone);\n    }\n\n    void third(function<void()> printThird) {\n        sem_wait(&secondJobDone);\n        // printThird() outputs \"third\". Do not change or remove this line.\n        printThird();\n\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"print-in-order","has_notes":false,"flag_type":1}