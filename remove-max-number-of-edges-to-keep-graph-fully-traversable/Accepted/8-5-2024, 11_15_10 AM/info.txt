{"id":1345726185,"question_id":1701,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1722881710,"status":10,"status_display":"Accepted","runtime":"503 ms","url":"/submissions/detail/1345726185/","is_pending":"Not Pending","title":"Remove Max Number of Edges to Keep Graph Fully Traversable","memory":"219.7 MB","code":"/*Alice and Bob have an undirected graph of n nodes and three types of edges:\n\nType 1: Can be traversed by Alice only.\nType 2: Can be traversed by Bob only.\nType 3: Can be traversed by both Alice and Bob.\nGiven an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei \nbetween nodes ui and vi, find the maximum number of edges you can remove so that after removing the \nedges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed \nby Alice and Bob if starting from any node, they can reach all other nodes.\n\nReturn the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.\n*/\nclass Solution {\npublic:\n    int father[100001];\n    int father0[100001];\n    int findFather(int i) {\n        if(father[i] != i) \n            father [i]= findFather(father[i]);\n        return father[i];        \n    }\n\n    void unionSet(int i, int j) { //merge j to i.\n        i = father[i];\n        j = father[j];\n        if( i < j )\n            father[j] = i;\n        else\n            father[i] = j;\n    }\n\n    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {\n        /*\n            1 <= n <= 105\n            1 <= edges.length <= min(105, 3 * n * (n - 1) / 2)\n            edges[i].length == 3\n            1 <= typei <= 3\n            1 <= ui < vi <= n\n            All tuples (typei, ui, vi) are distinct.\n        */\n\n        //[typei, ui, vi]\n        int sz = edges.size();\n        //Type 1: Can be traversed by Alice only.\n        //Type 2: Can be traversed by Bob only.\n        //Type 3: Can be traversed by both Alice and Bob.\n        vector<vector<int>> edges1;\n        vector<vector<int>> edges2;\n        vector<vector<int>> edges3;\n        for(auto edge: edges) {\n            if(edge[0] == 1)\n                edges1.push_back({edge[1], edge[2]});\n            else if(edge[0] == 2) \n                edges2.push_back({edge[1], edge[2]});\n            else\n                edges3.push_back({edge[1], edge[2]});\n        }\n\n        for(int i=0; i<n; i++) { //initialize union set.\n            father[i] = i;\n        };\n\n        int count3=0;\n        int count2=0;\n        int count1=0;\n        for(auto edge: edges3) {\n            int a = edge[0];\n            int b = edge[1];\n            if( findFather(a) == findFather(b) )\n                continue;\n            else {\n                unionSet(a,b);\n                count3++;\n            }\n        };\n        memcpy(father0, father, sizeof(father)); //dest source\n        for(auto edge: edges2) {\n            int a = edge[0];\n            int b = edge[1];\n            if( findFather(a) == findFather(b) )\n                continue;\n            else {\n                unionSet(a,b);\n                count2++;\n            }\n        };\n        if(count3+count2 != n-1)\n            return -1;\n\n        memcpy(father, father0, sizeof(father));\n        for(auto edge: edges1) {\n            int a = edge[0];\n            int b = edge[1];\n            if( findFather(a) == findFather(b) )\n                continue;\n            else {\n                unionSet(a,b);\n                count1++;\n            }\n        };\n        if(count3+count1 != n-1)\n            return -1;\n\n\n        return edges.size()-count3-count2-count1;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-max-number-of-edges-to-keep-graph-fully-traversable","has_notes":false,"flag_type":1}