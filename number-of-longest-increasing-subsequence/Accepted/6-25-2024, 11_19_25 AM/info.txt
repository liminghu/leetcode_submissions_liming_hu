{"id":1300136319,"question_id":673,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719339565,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1300136319/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"15.7 MB","code":"class Solution {\npublic:\n//Given an integer array nums, return the number of longest increasing subsequences.\n//Notice that the sequence has to be strictly increasing.\n    int findNumberOfLIS(vector<int>& nums) {\n        int sz = nums.size();\n        //dp[i] => s[1:i]里以s[i]结尾的、最长的递增子序列的长度\n        vector<int> length(sz,1);\n        vector<int> count(sz,1);\n\n        if(sz==1)\n            return 1;\n\n        for(int i=0; i<sz; i++) {\n            for(int j=0; j<i; j++) {\n                if(nums[j] < nums[i]) {                    \n                    if( length[j]+1 > length[i] ) {\n                        length[i] = length[j]+1;\n                        count[i] = 0;\n                    }\n                    if(length[j]+1 == length[i]) \n                        count[i] += count[j];\n                }\n            }            \n        }\n        int max_length = 0;\n        for(int i=0; i<sz; i++)\n            max_length = max(max_length, length[i]);\n\n        int ret = 0;\n        for(int i=0; i<sz; i++) {\n            if(length[i]==max_length)\n                ret+=count[i];\n        }\n        return ret;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}