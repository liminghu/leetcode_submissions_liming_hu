{"id":1450842770,"question_id":1646,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731433785,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1450842770/","is_pending":"Not Pending","title":"Kth Missing Positive Number","memory":"N/A","code":"class Solution {\npublic:\n    /*int findKthPositive0(vector<int>& arr, int k) {\n        int left = 1;\n        int right = arr.back()+k;\n        while( left < right ) {\n            int mid = right-(right-left)/2;\n            int M = mid-1;\n            int T = lower_bound(arr.begin(), arr.end(), mid)-arr.begin();\n            int missing = M-T;\n            if(missing<=k-1)\n                left = mid;\n            else\n                right = mid-1;\n        }\n        return left;\n    }*/\n    /*int findKthPositive2(vector<int>& arr, int k) {\n        int kthMissingNum = k; //if the array is empty it will be k.\n        for(int num: arr) { //sorted.\n            if( num <= kthMissingNum) //This step accounts for the missing positive integers. If the number is less than or equal to k, \n                          //it means we've encountered an actual element of the sequence, so the k-th missing positive integer is \n                          //pushed further by one.\n                kthMissingNum++;\n            else   //This happens because there’s no need to continue iterating once we’ve passed the range where the k-th missing integer could exist.\n                break;\n        }\n        return kthMissingNum;\n    }*/\n    int findKthPositive(vector<int>& arr, int k) {\n        int left = 0;\n        int right = arr.size()-1;\n        while(left<=right) {\n            int pivot = left+(right-left)/2;\n            int missing_num = arr[pivot]-(pivot+1);\n            if(missing_num<k)\n                left = pivot +1;\n            else\n                right = pivot-1;\n        };\n        //left = right+1;\n        /*At the end of the loop, left = right + 1, and the kth missing number is in-between arr[right] and arr[left]. \n        The number of integers missing before arr[right] is arr[right] - right - 1. Hence, \n        the number to return is arr[right] + k - (arr[right] - right - 1) = k + left.\n        */\n        int missingBefore = arr[right] - right - 1;\n        return arr[right] + (k - missingBefore); \n    }\n};","compare_result":"11100000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"kth-missing-positive-number","has_notes":false,"flag_type":1}