{"id":1450817061,"question_id":1646,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731432274,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1450817061/","is_pending":"Not Pending","title":"Kth Missing Positive Number","memory":"12.4 MB","code":"class Solution {\npublic:\n    /*int findKthPositive1(vector<int>& arr, int k) {\n        int left = 1;\n        int right = arr.back()+k;\n        while(left<right) {\n            int mid = right-(right-left)/2;\n            int M = mid-1;\n            int T = lower_bound(arr.begin(), arr.end(), mid)-arr.begin();\n            int missing = M-T;\n            if(missing<=k-1)\n                left = mid;\n            else\n                right = mid-1;\n        }\n        return left;\n    }*/\n    int findKthPositive(vector<int>& arr, int k) {\n        for(int num: arr) { //sorted.\n            if( num <= k) //This step accounts for the missing positive integers. If the number is less than or equal to k, \n                          //it means we've encountered an actual element of the sequence, so the k-th missing positive integer is \n                          //pushed further by one.\n                k++;\n            else   //This happens because there’s no need to continue iterating once we’ve passed the range where the k-th missing integer could exist.\n                break;\n        }\n        return k;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-missing-positive-number","has_notes":false,"flag_type":1}