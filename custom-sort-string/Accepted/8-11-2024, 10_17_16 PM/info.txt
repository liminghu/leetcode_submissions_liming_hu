{"id":1352759650,"question_id":807,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1723439836,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1352759650/","is_pending":"Not Pending","title":"Custom Sort String","memory":"8.4 MB","code":"/*\nYou are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before \na character y in order, then x should occur before y in the permuted string.\n\nReturn any permutation of s that satisfies this property.\n*/\nclass Solution {\npublic:\n    string customSortString(string order, string s) {\n        /*1 <= order.length <= 26\n            1 <= s.length <= 200\n            order and s consist of lowercase English letters.\n            All the characters of order are unique.*/\n\n        int order_sz = order.length();\n        unordered_map<char,int> mp;\n        for(int i=0; i<order.length(); i++) {\n            mp[order[i]] = i; \n        }\n\n        vector<vector<char>> bucket(order.length()+1, vector<char>(0, 0));\n\n        for(int i=0; i<s.length(); i++) {\n            if(mp.find(s[i])!=mp.end()) {\n                bucket[ mp[s[i]] ].push_back(s[i]); \n            } else \n                bucket[order.length()].push_back(s[i]);\n        }  \n\n        string res = \"\";\n        for(int i=0; i<bucket.size(); i++) {\n            for(int j=0; j<bucket[i].size(); j++) {\n                res.push_back(bucket[i][j]);\n            }\n        }\n\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"custom-sort-string","has_notes":false,"flag_type":1}