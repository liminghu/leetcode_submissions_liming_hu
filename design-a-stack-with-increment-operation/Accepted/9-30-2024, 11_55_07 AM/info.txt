{"id":1407447332,"question_id":1497,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727722507,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1407447332/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"25.9 MB","code":"/*\nDesign a stack that supports increment operations on its elements.\nImplement the CustomStack class:\nCustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack.\nvoid push(int x) Adds x to the top of the stack if the stack has not reached the maxSize.\nint pop() Pops and returns the top of the stack or -1 if the stack is empty.\nvoid inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.\nConstraints:\n\n1 <= maxSize, x, k <= 1000\n0 <= val <= 100\nAt most 1000 calls will be made to each method of increment, push and pop each separately.\n\n*/\nclass CustomStack {\nprivate:\n    int maxSize_;\n    vector<int> st_;\n    int size;\n\npublic:\n    CustomStack(int maxSize) { //Initializes the object with maxSize which is the maximum number of elements in the stack.\n        maxSize_ = maxSize;\n        st_.resize(maxSize_);\n        size = 0;\n    }\n    \n    void push(int x) { //Adds x to the top of the stack if the stack has not reached the maxSize.\n        if(size < maxSize_) {\n            st_[size] = x;\n            size++;\n        }\n        \n    }\n    \n    int pop() {\n        int t = -1;\n        if(size != 0) {\n            size--;\n            t = st_[size];\n        };\n\n        return t;\n    }\n    \n    void increment(int k, int val) { //Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.\n        for(int i=0; i<min(size,k); i++) {\n            st_[i] += val;\n        }\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation","has_notes":false,"flag_type":1}