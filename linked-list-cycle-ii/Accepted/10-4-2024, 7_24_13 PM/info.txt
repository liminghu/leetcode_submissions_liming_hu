{"id":1412125485,"question_id":142,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728095053,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1412125485/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"13.9 MB","code":"/*\nGiven the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the \nnext pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). \nIt is -1 if there is no cycle. Note that pos is not passed as a parameter.\n\nDo not modify the linked list.\n\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n \n\nConstraints:\nThe number of the nodes in the list is in the range [0, 104].\n-105 <= Node.val <= 105\npos is -1 or a valid index in the linked-list.\n Follow up: Can you solve it using O(1) (i.e. constant) memory?\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        unordered_map<ListNode*, int> mp;\n        if(head == NULL)\n            return NULL;\n        if(head->next == NULL)\n            return NULL;        \n\n        while(head) {\n            if(mp.find(head) !=mp.end()) {\n                return head;\n            }else {\n                mp[head] = 1;\n                head = head->next;\n            } \n                \n        };\n        return NULL;        \n    }\n};","compare_result":"111111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}