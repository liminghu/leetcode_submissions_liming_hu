{"id":1408628264,"question_id":2139,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727812980,"status":10,"status_display":"Accepted","runtime":"222 ms","url":"/submissions/detail/1408628264/","is_pending":"Not Pending","title":"Detect Squares","memory":"99.4 MB","code":"/*\nYou are given a stream of points on the X-Y plane. Design an algorithm that:\nAdds new points from the stream into a data structure. Duplicate points are allowed and should be\n treated as different points.\nGiven a query point, counts the number of ways to choose three points from the data structure such \nthat the three points and the query point form an axis-aligned square with positive area.\nAn axis-aligned square is a square whose edges are all the same length and are either parallel or \nperpendicular to the x-axis and y-axis.\n\nImplement the DetectSquares class:\nDetectSquares() Initializes the object with an empty data structure.\nvoid add(int[] point) Adds a new point point = [x, y] to the data structure.\nint count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] \nas described above.\npoint.length == 2\n0 <= x, y <= 1000\nAt most 3000 calls in total will be made to add and count.\n*/\nclass DetectSquares {\n    unordered_map<int,int> count_xy;\n    vector<pair<int,int>> points; //could have duplicates.\npublic:\n    DetectSquares() {\n        \n    }\n    \n    void add(vector<int> point) {\n        int x = point[0];\n        int y = point[1];\n        int num = x * 10000 + y;\n        count_xy[num]++;\n        points.push_back({x,y});\n    }\n    \n    int count(vector<int> point) {\n        int x1 = point[0];\n        int y1 = point[1];\n        int ans = 0;\n        for(auto& [x2, y2]: points ) {\n            if( abs(y1-y2)==0 || abs(x1-x2)==0 || abs(x1-x2) != abs(y1-y2))   //only check diagonal points.\n                continue; //skip empty square, or invalid rectangles.\n            int x1_y2 = x1*10000+y2;\n            int x2_y1 = x2*10000+y1;\n            ans +=  count_xy[x2_y1] * count_xy[x1_y2];\n        }\n        return ans;\n\n    }\n};\n\n/**\n * Your DetectSquares object will be instantiated and called as such:\n * DetectSquares* obj = new DetectSquares();\n * obj->add(point);\n * int param_2 = obj->count(point);\n */","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"detect-squares","has_notes":false,"flag_type":1}