{"id":1381555665,"question_id":76,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725665319,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1381555665/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"11.6 MB","code":"/*Given two strings s and t of lengths m and n respectively, return the minimum \nwindow substring of s such that every character in t (including duplicates) is \nincluded in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\nm == s.length\nn == t.length\n1 <= m, n <= 105\ns and t consist of uppercase and lowercase English letters.\nFollow up: Could you find an algorithm that runs in O(m + n) time?\n*/\nclass Solution {\npublic:\n    string minWindow(string s, string t) {\n        if(t.length() > s.length() || s.empty() || t.empty())\n            return \"\";\n        unordered_map<char, int> mp_t; //key: char in t, count.\n        for(int i=0; i<t.length(); i++) {\n            mp_t[ t[i] ]++;\n        };\n        //int required = mp_t.size();\n\n        unordered_map<char, int> mp_swin;\n        int start = 0;\n\n        int count = 0;\n        string res = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if( mp_t.find(s[i]) != mp_t.end() ) { //s[i] in t.\n                mp_swin[ s[i] ]++;\n                if(mp_t[ s[i] ] >= mp_swin[ s[i] ] ) //find a qualified char.\n                    count++;\n            };\n            if(count == t.length() )  { //find a Solution\n                while( mp_t.find(s[start]) == mp_t.end() || mp_t.find(s[start]) != mp_t.end() && mp_t[ s[start] ] < mp_swin[ s[start]] ) { //move start to make it better.\n                    if( mp_t.find(s[start]) != mp_t.end() && mp_t[ s[start] ] < mp_swin[ s[start]] )\n                        mp_swin[ s[start] ]--;\n                    start++;\n                };\n                if(res == \"\" || i-start+1 <res.length()) { //find a better solution.\n                    res = s.substr(start, i-start+1);\n                }                \n            };\n        }\n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}