{"id":1453287446,"question_id":366,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731654778,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1453287446/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"10.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector<vector<int>> res;\npublic:\n    vector<vector<int>> findLeaves(TreeNode* root) {\n        dfs(root);\n        return res;\n    }\n    int dfs(TreeNode* root) {\n        if(root==NULL) \n            return -1;\n        int currHeight = max(dfs(root->left), dfs(root->right)) +1;\n        if(currHeight == res.size() ) /// create space for node located at `currHeight` if not already exists\n            res.push_back(vector<int>());\n        res[currHeight].push_back(root->val);//insert the value at the correct position in the solution array\n        return currHeight;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree","has_notes":false,"flag_type":1}