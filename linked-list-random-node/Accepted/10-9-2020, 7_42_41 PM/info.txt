{"id":406764239,"question_id":382,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1602297761,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/406764239/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"16.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    Solution(ListNode* head) {\n        head_= head;\n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n         int winner = head_->val;\n        ListNode* cur = head_;\n        for(int i=1; cur->next!=nullptr; i++) {\n            cur = cur->next;\n            if(rand()%(i+1) == i) {\n                winner = cur->val;\n            }\n        };\n        return winner;  \n    }\nprivate:\n   ListNode* head_; \n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"1111111","title_slug":"linked-list-random-node","has_notes":false,"flag_type":1}