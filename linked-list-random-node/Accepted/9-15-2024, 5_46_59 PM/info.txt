{"id":1391548397,"question_id":382,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1726447619,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1391548397/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"21.6 MB","code":"/*\nGiven a singly linked list, return a random node's value from the linked list. Each node must \nhave the same probability of being chosen.\nImplement the Solution class:\nSolution(ListNode head) Initializes the object with the head of the singly-linked list head.\nint getRandom() Chooses a node randomly from the list and returns its value. All the nodes of \nthe list should be equally likely to be chosen.\nThe number of nodes in the linked list will be in the range [1, 104].\n-104 <= Node.val <= 104\nAt most 104 calls will be made to getRandom.\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    int numNodes_;\n    ListNode* head_;\npublic:\n    Solution(ListNode* head) {\n        head_ = head;\n        ListNode* cur = head_;\n        int count = 0;\n        while(cur != NULL) {\n            count++;\n            cur = cur->next;\n        };\n        numNodes_ = count;\n    }\n    \n    int getRandom() {\n        int r = rand() % numNodes_;\n        ListNode* cur  = head_;\n        while(r>0) {\n            cur = cur->next;\n            r--;\n        }\n        return cur->val;\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"11111111","title_slug":"linked-list-random-node","has_notes":false,"flag_type":1}