{"id":1516311134,"question_id":3435,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1737505865,"status":10,"status_display":"Accepted","runtime":"545 ms","url":"/submissions/detail/1516311134/","is_pending":"Not Pending","title":"Block Placement Queries","memory":"360.4 MB","code":"class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        int n = queries.size();\n        vector<int> bar;\n        map<int, pair<int,int>> mp;\n        set<pair<int,int>> s;\n        set<pair<int,int>>::iterator it;\n        bar.push_back(0);\n        bar.push_back(50001);\n        for(int i=0; i<n; i++) {\n            if(queries[i][0] == 1) //queries[i] = [1, x]. Build an obstacle at distance x from the origin.\n                bar.push_back(queries[i][1]);\n        }\n        sort(bar.begin(), bar.end());\n        int bar_sz = bar.size();\n        mp[bar[0]] = {bar[0], bar[1]};\n        for(int i=1; i<bar_sz-1; i++)\n            mp[bar[i]] = {bar[i-1], bar[i+1]};\n        mp[bar[bar_sz-1]] = {bar[bar_sz-2], 0};\n        for(int i=0; i<bar.size()-1; i++)\n            s.insert({bar[i+1]-bar[i], bar[i]});\n        s.insert({0,bar[bar_sz-1]});\n        for(int i=n-1; i>=0; i--){\n            if(queries[i][0] == 1){\n                int x = queries[i][1];\n                int x_f = mp[x].first;\n                int x_l = mp[x].second;\n                s.erase({x-x_f, x_f});\n                s.erase({x_l-x, x});\n                mp[x_f].second = x_l;\n                mp[x_l].first = x_f;\n                s.insert({x_l-x_f, x_f});\n            }\n            else{\n                int x = queries[i][1];\n                int y = queries[i][2];\n                if(y>x){\n                    ans.push_back(false);\n                    continue;\n                }\n                it = s.lower_bound({y,0});\n                bool can = false;\n                for (it; it!=s.end(); it++){\n                    if(y + it->second <= x){       \n                        can = true;\n                        break;\n                    }\n                }     \n                ans.push_back(can);         \n            }\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};","compare_resulttitle_slug":"block-placement-queries","has_notes":false,"flag_type":1}