{"id":1322123140,"question_id":42,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1721067445,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1322123140/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"23.6 MB","code":"//Given n non-negative integers representing an elevation map where the width of each bar is 1, \n//compute how much water it can trap after raining.\nclass Solution {\npublic:\n    void print(stack<int> &s)\n    {\n        if(s.empty())\n        {\n            cout << endl;\n            return;\n        }\n        int x= s.top();\n        s.pop();\n        print(s);\n        s.push(x);\n        cout << x << \" \";\n    }\n    int trap(vector<int>& height) {\n        /*\n            n == height.length\n            1 <= n <= 2 * 104\n            0 <= height[i] <= 105\n        */\n\n        if(height.size() <= 2 )\n            return 0;\n        int sz = height.size();\n\n        vector<int> left_max(sz, 0);\n        vector<int> right_max(sz, 0);\n        left_max[0] = height[0];\n\n        for(int i=1; i<sz; i++) {\n            left_max[i] = max(height[i], left_max[i-1]);\n        }\n        right_max[sz-1] = height[sz-1];\n        for(int i=sz-2; i>=0; i--) {\n            right_max[i] = max(height[i], right_max[i+1]);\n        }\n        int ans = 0;\n        for(int i=1; i<sz-1; i++) {\n            ans += min(left_max[i], right_max[i]) - height[i];\n        }\n        return ans;\n \n /*       int ans = 0;\n        int sz = height.size();\n        if( sz <= 2 )\n            return 0;\n        \n        stack<int> st; \n        int i = 0;\n        while (i < sz ) {\n            while( !st.empty() && height[i] > height[st.top()]) { //have a trap.\n               print(st);\n               int top = st.top();\n               st.pop();\n               if(st.empty())\n                    break; //no trap.\n                int distance = i - st.top() - 1;\n                int bounded_height = min(height[i], height[st.top()]) - height[top];\n                ans += distance * bounded_height;\n                cout << endl << \" i= \" << i << endl; \n                cout << \" bounded_height = \" << bounded_height << \" distance = \" << distance << \" ans = \" << ans << endl;\n            };\n            st.push(i); //We add the index of the bar to the stack if bar is smaller than or equal to the bar at top of stack\n            i++;\n        }\n        return ans; */\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trapping-rain-water","has_notes":false,"flag_type":1}