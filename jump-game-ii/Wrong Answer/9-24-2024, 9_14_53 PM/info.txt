{"id":1401451776,"question_id":45,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727237693,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1401451776/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"/*\nYou are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at\n nums[i], you can jump to any nums[i + j] where:\n0 <= j <= nums[i] and\ni + j < n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n1 <= nums.length <= 104\n0 <= nums[i] <= 1000\nIt's guaranteed that you can reach nums[n - 1].\n*/\nclass Solution {\npublic:\n    int jump(vector<int>& nums) {\n        int n = nums.size();\n        //nums[0]: 0+nums[i]\n        vector<int> dp(n,0);\n        dp[0] = 0;\n        for(int i=0; i<n; i++) {\n            for(int j=1; j<=nums[i]; j++) {\n                if( i+j < n-1 )\n                    dp[i+j] = dp[i]+1;\n                else //>=n-1\n                    return dp[i]+1;\n            }\n        }\n        return -1;\n    }\n};","compare_result":"11001111111101111100111011001111100000000001111111110000110110100000000000000000000000000000000100000001100111","title_slug":"jump-game-ii","has_notes":false,"flag_type":1}