{"id":1292719081,"question_id":52,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718733681,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1292719081/","is_pending":"Not Pending","title":"N-Queens II","memory":"11.2 MB","code":"class Solution {\nprivate:\n    int size;\npublic:    \n    int backtrack(int row, unordered_set<int>& cols, unordered_set<int>& diagonals, unordered_set<int>& antiDiagonals) {\n        //base case: N queens have been placed.\n        if(row == size) \n            return 1;\n\n        int solutions = 0;\n        for(int col=0; col<size; col++) {\n            int curDiagonal = row -col;\n            int curAntiDiagonal = row + col;\n\n            if(cols.find(col)!=cols.end() || \n               diagonals.find(curDiagonal)!=diagonals.end() ||\n               antiDiagonals.find(curAntiDiagonal)!=antiDiagonals.end())\n               continue;\n            \n            cols.insert(col);\n            diagonals.insert(curDiagonal);\n            antiDiagonals.insert(curAntiDiagonal);\n\n            solutions+= backtrack(row+1, cols, diagonals, antiDiagonals);\n            cols.erase(col);\n            diagonals.erase(curDiagonal);\n            antiDiagonals.erase(curAntiDiagonal);\n        };\n        return solutions;\n    }\n\n    int totalNQueens(int n) { //1 <= n <= 9\n        size = n;\n        unordered_set<int> cols, diagonals, antiDiagonals;\n        return backtrack(0, cols, diagonals, antiDiagonals);           \n    }\n};","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}