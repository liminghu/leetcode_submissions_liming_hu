{"id":1507717297,"question_id":2179,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1736805544,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/1507717297/","is_pending":"Not Pending","title":"Most Beautiful Item for Each Query","memory":"99.8 MB","code":"class Solution {\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        //items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\n        //For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to \n        //queries[j]. If no such item exists, then the answer to this query is 0.\n        vector<int> ans(queries.size(), 0);\n        sort(items.begin(), items.end());\n        vector<vector<int>> queiresWithIdx(queries.size(), vector<int>(2));\n        for(int i=0; i<queries.size(); i++) {\n            queiresWithIdx[i][0] = queries[i];\n            queiresWithIdx[i][1] = i;\n        }\n        sort(queiresWithIdx.begin(), queiresWithIdx.end());\n        int itemIdx = 0;\n        int maxBeautity = 0;\n        for(int i=0; i<queries.size(); i++) {\n            int query = queiresWithIdx[i][0];\n            int originalIdx = queiresWithIdx[i][1];\n            while(itemIdx <items.size() && items[itemIdx][0]<=query) {\n                maxBeautity = max(maxBeautity, items[itemIdx][1]);\n                itemIdx++; \n            }\n            ans[originalIdx] = maxBeautity;\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"most-beautiful-item-for-each-query","has_notes":false,"flag_type":1}