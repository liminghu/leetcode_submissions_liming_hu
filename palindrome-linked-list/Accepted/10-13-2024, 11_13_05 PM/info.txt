{"id":1421720504,"question_id":234,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1728886385,"status":10,"status_display":"Accepted","runtime":"181 ms","url":"/submissions/detail/1421720504/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"120.8 MB","code":"/*\nGiven the head of a singly linked list, return true if it is a \npalindrome\n or false otherwise.\n\n \n\nExample 1:\n\n\nInput: head = [1,2,2,1]\nOutput: true\nExample 2:\n\n\nInput: head = [1,2]\nOutput: false\n \n\nConstraints:\n\nThe number of nodes in the list is in the range [1, 105].\n0 <= Node.val <= 9\n \n\nFollow up: Could you do it in O(n) time and O(1) space?\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if(head==NULL)\n            return true;\n        if(head->next==NULL)\n            return true;\n\n        ListNode* firsthalfEnd = endofFirstHalf(head);\n        ListNode* secondHalfReverse = reverseList(firsthalfEnd->next);\n        bool res = true;\n        ListNode* p1 = head;\n        ListNode* p2 = secondHalfReverse;\n        while( res && p2!=NULL) {\n            if(p1->val != p2->val)\n                res = false;\n            p1 = p1->next;\n            p2 = p2->next;\n        }\n        firsthalfEnd->next = reverseList(secondHalfReverse);\n        return res;\n    }\n    ListNode* endofFirstHalf(ListNode* head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        while(fast->next != NULL && fast->next->next != NULL) {\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        return slow;\n    }\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* cur = head;\n        while(cur!=NULL) {\n            ListNode* temp = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = temp;\n        }\n        return prev;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}