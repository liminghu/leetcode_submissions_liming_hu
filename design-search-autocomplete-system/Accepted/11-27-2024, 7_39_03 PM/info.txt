{"id":1464698051,"question_id":642,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1732765143,"status":10,"status_display":"Accepted","runtime":"273 ms","url":"/submissions/detail/1464698051/","is_pending":"Not Pending","title":"Design Search Autocomplete System","memory":"270.2 MB","code":"struct Trie {\n    unordered_map<char, Trie*> nodes;\n    int cnt = 0;\n    bool isWord = false;\n    void build(string str, int times) {\n        auto cur_node = this;\n        for(auto c: str) {\n            if(cur_node->nodes[c] == NULL)\n                cur_node->nodes[c] = new Trie();\n            cur_node = cur_node->nodes[c];\n        }\n        //cur_node is at the leaf:\n        cur_node->isWord = true;\n        cur_node->cnt -= times; //will be sorted from smaller...\n    }\n    vector<string> search(string str, int top) {\n        auto cur_node = this;\n        int i = 0;\n        while(i < str.size() && cur_node->nodes[ str[i] ] )\n            cur_node = cur_node->nodes[str[i++]];\n        if( i < str.size() ) //not found\n            return {};\n        vector<pair<int, string>> res;\n        cur_node->helper(str, res);\n        sort(res.begin(), res.end());\n        vector<string> ans;\n        for(int i=0; i<min((int)res.size(), top); i++)\n            ans.push_back(res[i].second);\n        return ans;\n    }\n    void helper(string str, vector<pair<int, string>> & res) {\n        auto cur_node = this;\n        if(cur_node->isWord)\n            res.push_back( {cur_node->cnt, str} ); \n        for(auto it: cur_node->nodes)   //unordered_map<char, Trie*> nodes;\n            it.second->helper(str + it.first, res);\n    }\n};\nclass AutocompleteSystem {\npublic:\n    Trie trie;\n    string newStr;\n    AutocompleteSystem(vector<string>& sentences, vector<int>& times) {\n        for(int i=0; i<sentences.size(); i++) \n            trie.build(sentences[i], times[i]);\n    }\n    vector<string> input(char c) {\n        if(c == '#') {\n            trie.build(newStr, 1);\n            newStr = \"\";\n            return {};\n        }\n        newStr += c;\n        return trie.search(newStr, 3);\n    }\n};\n\n/**\n * Your AutocompleteSystem object will be instantiated and called as such:\n * AutocompleteSystem* obj = new AutocompleteSystem(sentences, times);\n * vector<string> param_1 = obj->input(c);\n */","compare_result":"1111111111111111111111111111111111111111111","title_slug":"design-search-autocomplete-system","has_notes":false,"flag_type":1}