{"id":1315872637,"question_id":261,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1720583146,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1315872637/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"16.3 MB","code":"/*\nYou have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] \nindicates that there is an undirected edge between nodes ai and bi in the graph.\nReturn true if the edges of the given graph make up a valid tree, and false otherwise.\n */\nclass Solution {\nprivate:\n    unordered_set<int> visited;\n    vector<vector<int>> adjancyMatrix;\n\npublic:\n    bool validTree(int n, vector<vector<int>>& edges) {\n                                                /*1 <= n <= 2000\n                                                0 <= edges.length <= 5000\n                                                edges[i].length == 2\n                                                0 <= ai, bi < n\n                                                ai != bi\n                                                There are no self-loops or repeated edges.\n                                                */\n        //check whether we can traverse from one node to all the rest nodes.\n        //no loop.\n        if(edges.size() != n-1)\n            return false;        \n        adjancyMatrix = vector(n, vector<int>());\n\n        for(int i=0; i<edges.size(); i++) {\n            adjancyMatrix[edges[i][0]].push_back(edges[i][1]);\n            adjancyMatrix[edges[i][1]].push_back(edges[i][0]);\n        };\n\n        return dfs(0, -1) && visited.size() == n;                                             \n    }\n\n    bool dfs(int node, int parent) {\n        if(visited.contains(node))\n            return false;\n        visited.insert(node);\n        for(int neighbor: adjancyMatrix[node]) {\n            if(parent != neighbor) {\n                bool result = dfs(neighbor, node);\n                if(!result)\n                    return false;\n            }\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"graph-valid-tree","has_notes":false,"flag_type":1}