{"id":1488350713,"question_id":632,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1735163964,"status":10,"status_display":"Accepted","runtime":"126 ms","url":"/submissions/detail/1488350713/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"69.6 MB","code":"class Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        //k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.\n        int k = nums.size();\n        set<pair<int, int>> s;\n        vector<int> pointers;\n        for(int i=0; i<k; i++) {\n            pointers.push_back(0);\n            s.insert({nums[i][0], i});\n        };\n        vector<int> rets;\n        int minRange = INT_MAX;\n        while(true) {\n            int sRange = s.rbegin()->first - s.begin()->first;\n            if( sRange < minRange ) {\n                minRange = sRange;\n                rets = {s.begin()->first, s.rbegin()->first};\n            }\n            int i = s.begin()->second;\n            pointers[i]++;\n            if(pointers[i]== nums[i].size())\n                break;\n            s.erase(s.begin());\n            s.insert({nums[i][pointers[i]], i});\n        }\n        return rets;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}