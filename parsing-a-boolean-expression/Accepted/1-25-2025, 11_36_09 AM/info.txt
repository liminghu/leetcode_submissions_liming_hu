{"id":1520355805,"question_id":1197,"lang":"cpp","lang_name":"C++","time":"1 week, 5 days","timestamp":1737833769,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1520355805/","is_pending":"Not Pending","title":"Parsing A Boolean Expression","memory":"16 MB","code":"class Solution {\npublic:\n    bool parseBoolExpr(string expression) {//expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.\n        int idx = 0;\n        return evaluate(expression, idx);\n    }\n    bool evaluate(string& expr, int& idx) {\n        char cur = expr[idx];\n        idx++;\n        if(cur == 't')\n            return true;\n        if(cur == 'f')\n            return false;\n        if(cur == '!') {\n            idx++; //skip '('\n            bool res = !evaluate(expr, idx);\n            idx++; //skip ')'\n            return res;\n        }\n        // Handle AND '&(...)' and OR '|(...)'\n        vector<bool> values;\n        idx++; //skip '('\n        while(expr[idx]!=')') {\n            if(expr[idx]!=',') {\n                values.push_back(evaluate(expr, idx));\n            } else \n                idx++; //skip ','\n        }\n        idx++; //skip ')'\n        if(cur == '&') {\n            for(bool v: values) {\n                if(!v)\n                    return false;\n            }\n            return true;\n        }\n        if(cur == '|') {\n            for(bool v: values) {\n                if(v)\n                    return true;\n            }\n            return false;\n        }\n        return false; //should not get here.\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"parsing-a-boolean-expression","has_notes":false,"flag_type":1}