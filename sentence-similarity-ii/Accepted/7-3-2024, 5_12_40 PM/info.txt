{"id":1308801168,"question_id":737,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1720051960,"status":10,"status_display":"Accepted","runtime":"115 ms","url":"/submissions/detail/1308801168/","is_pending":"Not Pending","title":"Sentence Similarity II","memory":"59 MB","code":"class UnionFindSet {\npublic:\n    UnionFindSet(int n) {\n        parents_ = vector<int>(n + 1, 0);\n        ranks_ = vector<int>(n + 1, 0);\n        \n        for (int i = 0; i < parents_.size(); ++i)\n            parents_[i] = i;\n    }\n    \n    bool Union(int u, int v) {\n        int pu = Find(u);\n        int pv = Find(v);\n        if (pu == pv) return false;\n        \n        if (ranks_[pu] > ranks_[pv]) {\n            parents_[pv] = pu;\n        } else if (ranks_[pv] > ranks_[pu]) {\n            parents_[pu] = pv;\n        } else {\n            parents_[pu] = pv;\n            ++ranks_[pv];\n        }\n \n        return true;\n    }\n    \n    int Find(int id) {        \n        if (id != parents_[id])\n            parents_[id] = Find(parents_[id]);        \n        return parents_[id];\n    }\n    \nprivate:\n    vector<int> parents_;\n    vector<int> ranks_;\n};\n \nclass Solution {\npublic:\n    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<vector<string>>& pairs) {\n        if (words1.size() != words2.size()) return false;\n        \n        UnionFindSet s(pairs.size() * 2);\n        \n        unordered_map<string, int> indies; // word to index\n        \n        for (const auto& pair : pairs) {\n            int u = getIndex(pair[0], indies, true);\n            int v = getIndex(pair[1], indies, true);\n            s.Union(u, v);\n        }\n        \n        for (int i = 0; i < words1.size(); ++i) {\n            if (words1[i] == words2[i]) continue;\n            int u = getIndex(words1[i], indies);\n            int v = getIndex(words2[i], indies);\n            if (u < 0 || v < 0) return false;\n            if (s.Find(u) != s.Find(v)) return false;\n        }\n        \n        return true;\n    }\nprivate:\n    int getIndex(const string& word, unordered_map<string, int>& indies, bool create = false) {\n        auto it = indies.find(word);\n        if (it == indies.end()) {\n            if (!create) return INT_MIN;\n            int index = indies.size();\n            indies.emplace(word, index);\n            return index;\n        }\n        \n        return it->second;\n    }\n};            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sentence-similarity-ii","has_notes":false,"flag_type":1}