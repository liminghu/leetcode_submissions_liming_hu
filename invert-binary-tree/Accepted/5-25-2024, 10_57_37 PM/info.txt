{"id":1268228233,"question_id":226,"lang":"cpp","lang_name":"C++","time":"8 months, 2 weeks","timestamp":1716703057,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1268228233/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"11.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        \n        if (root == nullptr)\n            return nullptr;\n        TreeNode* left = root->left;\n        if (left != nullptr)  {\n            left = invertTree(left);\n            \n        };\n        TreeNode* right = root->right;\n        if (right != nullptr)  {\n            right = invertTree(right);\n            \n        };\n\n        if (left != nullptr && right != nullptr) {\n            TreeNode* temp;\n            temp = left;\n            root->left = right;\n            root->right = temp; \n        };\n        if (left != nullptr && right == nullptr) {\n            root->right = left;\n            root->left = nullptr;\n        }\n        if (right != nullptr && left == nullptr) {\n            root->left = right;\n            root->right = nullptr;\n        }\n\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree","has_notes":false,"flag_type":1}