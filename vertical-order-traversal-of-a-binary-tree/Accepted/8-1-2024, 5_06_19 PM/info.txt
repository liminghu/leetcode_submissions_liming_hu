{"id":1341287551,"question_id":1029,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1722557179,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1341287551/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"15.3 MB","code":"/*Given the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions \n(row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for \neach column index starting from the leftmost column and ending on the rightmost column. \nThere may be multiple nodes in the same row and same column. In such a case, sort \nthese nodes by their values. Return the vertical order traversal of the binary tree.\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxRow = 0;\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        /*\n        The number of nodes in the tree is in the range [1, 1000].\n        0 <= Node.val <= 1000\n        */\n        //<row, col>, val\n        map<pair<int,int>, vector<int>> map1;\n\n        traverse(root,  map1, 0, 0);\n\n        vector<vector<int>>  res;\n        vector<int> cols;\n        unordered_set<int> visited;\n        for(auto it=map1.begin(); it!=map1.end(); it++) { //get all the columns.\n            if(visited.count(it->first.second) == 0) {\n                cols.push_back(it->first.second); //col\n                visited.insert(it->first.second);\n            }\n        }\n        sort(cols.begin(), cols.end());\n\n        for(int i=0; i<cols.size(); i++) {\n            res.push_back(vector<int>());\n            for(int j=0; j<=maxRow; j++) {\n                pair<int, int> p = {j, cols[i]};\n                if(map1.count(p)!=0) {\n                    vector<int>& v = map1[p];\n                    sort(v.begin(), v.end());\n                    for(int num:v) {\n                        res[res.size()-1].push_back(num);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    void traverse(TreeNode* root,  map<pair<int,int>, vector<int>>& map1, int cur_row, int cur_col) {\n            if(root==nullptr)\n                return;\n            map1[{cur_row,cur_col}].push_back(root->val);\n            maxRow = max(maxRow, cur_row);\n            traverse(root->left,  map1, cur_row+1, cur_col-1);\n            traverse(root->right,  map1, cur_row+1,cur_col+1);\n        }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}