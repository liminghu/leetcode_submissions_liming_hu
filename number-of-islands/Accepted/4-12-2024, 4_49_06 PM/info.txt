{"id":1230750750,"question_id":200,"lang":"cpp","lang_name":"C++","time":"10Â months","timestamp":1712965746,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/1230750750/","is_pending":"Not Pending","title":"Number of Islands","memory":"23.4 MB","code":"class Solution {\nprivate:\n    void bfs(int row, int col, vector<vector<bool>>& visited, vector<vector<char>>& grid) {\n        visited[row][col] = true;\n        queue<pair<int, int>> q;\n        q.push({row, col});\n        int m = grid.size();    //rows\n        int n = grid[0].size();  //columns\n        vector<pair<int, int>> directions = {{-1,0}, {1,0}, {0, -1}, {0,1}};\n\n        while(!q.empty()) {\n            int r = q.front().first;\n            int c = q.front().second;\n            q.pop();\n\n            for(auto dir: directions) {\n                int nRow = dir.first + r;\n                int nCol = dir.second + c;\n                if(nRow>=0 && nRow < m && nCol >=0 && nCol < n && !visited[nRow][nCol] && grid[nRow][nCol] == '1') {\n                    visited[nRow][nCol] = true;\n                    q.push({nRow, nCol});\n                }\n            }\n        }\n    }\npublic:\n    int numIslands(vector<vector<char>>& grid) { //we will update grid for status: -1: visited.\n        int m = grid.size();    //rows\n        int n = grid[0].size();  //columns\n        int num = 0;\n\n        //DFS\n        vector<vector<bool>> visited(m, vector<bool>(n, false));\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if (grid[i][j] == '1' && !visited[i][j]) { //land\n                    grid[i][j] = -1; //mark it as visited.\n                    num = num+1;  //find a new island.\n                    bfs(i, j, visited, grid);\n                }       \n            }\n        }\n        return num;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}