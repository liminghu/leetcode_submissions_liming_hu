{"id":1354755380,"question_id":982,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1723582706,"status":10,"status_display":"Accepted","runtime":"87 ms","url":"/submissions/detail/1354755380/","is_pending":"Not Pending","title":"Minimum Increment to Make Array Unique","memory":"74.3 MB","code":"/*You are given an integer array nums. In one move, you can pick an index i \nwhere 0 <= i < nums.length and increment nums[i] by 1.\nReturn the minimum number of moves to make every value in nums unique.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n*/\nclass Solution {\npublic:\n    int minIncrementForUnique(vector<int>& nums) {\n        /*  1 <= nums.length <= 105\n            0 <= nums[i] <= 105\n        */\n       int n = nums.size();\n       int max_val = 0;\n       int minIncrements = 0;\n\n       for(int val: nums) {\n        max_val = max(max_val, val);\n       };\n\n       /*The minimum length of frequencyCount would be the largest value in nums, and it \n       must be long enough to hold the new values we get from incrementing any duplicates. \n       Keep in mind that the maximum number of duplicates that we could possibly have is \n       equal to the length of nums.*/\n       vector<int> count(n+max_val+1, 0);\n       //vector<int> count(max_val+1, 0);\n       for(int val: nums)\n        count[val]++;\n       \n       for(int i=0; i<count.size(); i++) {\n            if(count[i] <=1)\n                continue;\n            minIncrements += count[i] - 1;\n            count[i+1] += count[i] - 1;\n            //count[i] = 1;\n       }\n       return minIncrements;\n       \n       /* map<int, int> mp; //num, count.\n\n       // sort(nums.begin(), nums.end());\n        for(int i=0; i<nums.size(); i++) {\n            mp[nums[i]]++;\n        };\n\n        map<int, int>::iterator it = mp.begin();\n        long res = 0;\n        while (it != mp.end()) {\n            if(it->second > 1) {\n                res += it->second - 1;\n                mp[it->first + 1 ] += it->second-1;\n            }\n            ++it;\n        };\n\n        return res;*/\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-increment-to-make-array-unique","has_notes":false,"flag_type":1}