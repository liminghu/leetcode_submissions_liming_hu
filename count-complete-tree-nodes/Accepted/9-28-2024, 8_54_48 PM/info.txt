{"id":1405677437,"question_id":222,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727582088,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1405677437/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"29.5 MB","code":"/*\nGiven the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete \nbinary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than O(n) time complexity.\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5 * 104].\n0 <= Node.val <= 5 * 104\nThe tree is guaranteed to be complete.\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        if(root->left == NULL)\n            return 1;\n        \n        return 1 + countNodes(root->left) + countNodes(root->right); \n    }\n};","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"flag_type":1}