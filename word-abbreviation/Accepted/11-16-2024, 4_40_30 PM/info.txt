{"id":1454757683,"question_id":527,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731804030,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1454757683/","is_pending":"Not Pending","title":"Word Abbreviation","memory":"22.9 MB","code":"class Solution {\npublic:\n    vector<string> wordsAbbreviation(vector<string>& dict) {\n        int n = dict.size();\n        vector<string> ans(n, \"\");\n        unordered_map<string, vector<int>> abbrevs;\n        for(int i=0; i<n; i++) {\n            string abbrev = abbreviate(dict[i]);\n            abbrevs[abbrev].push_back(i);\n            ans[i] = abbrev;\n        };\n        //check duplicates.\n        for(auto& words: abbrevs) {\n            if(words.second.size() < 2)\n                continue;\n            //handle conflicts\n            auto& indices = words.second;\n            int len = indices.size();\n            //use a DP vector to avoid recompute of LCP bewtween two words.\n            vector<int> dp(len, 0);\n            for( int i=0; i < len; i++ ) {\n                string cur_str = dict[ indices[i] ];\n                for(int j= i+1; j < len; j++) {\n                    int lcp_len = LCP( cur_str, dict[ indices[j] ] );\n                    if(lcp_len > dp[i] ) \n                        dp[i] = lcp_len;\n                    if(lcp_len > dp[j] )\n                        dp[j] = lcp_len;\n                }\n                if(dp[i] >= cur_str.length() - 2)\n                    ans[ indices[i] ] = cur_str;\n                else {\n                    string right = cur_str.substr( dp[i] );//start from dp[i] to end...\n                    ans[ indices[i] ] = cur_str.substr(0, dp[i]) + abbreviate( right );\n                }\n            }\n        }\n        return ans;\n\n    }\n    string abbreviate(string& str) {\n        if(str.length()<=3)\n            return str;\n        return str[0] + to_string(str.size()-2)+str.back();\n    }\n    //Check longest common prefix, and return LCP length\n    int LCP(string& s1, string& s2 ) {\n        if(s1.length() != s2.length())\n            return 0;\n        int i = 0;\n        for(; i<s1.length(); i++) {\n            if(s1[i] != s2[i])\n                return i;\n        }\n        return i;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-abbreviation","has_notes":false,"flag_type":1}