{"id":1298166255,"question_id":3459,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719178428,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1298166255/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones II","memory":"N/A","code":"class Solution {\npublic:\n    /*\n    You are given a 2D binary array grid. You need to find 3 non-overlapping rectangles having non-zero areas with horizontal and vertical sides such that all the 1's in grid lie inside these rectangles.\n\nReturn the minimum possible sum of the area of these rectangles.\n\nNote that the rectangles are allowed to touch.\n*/ \n    int minimumArea(vector<vector<int>>& grid, int left, int right, int top, int bottom) {\n        int i, j;\n        int start_row = 1e9; \n        int end_row = -1;\n        int start_col = 1e9;\n        int end_col = -1;\n        int found = 0;\n        for(i=top; i<=bottom; i++) {\n            for(j=left; j<=right; j++) {\n                if(grid[i][j]) {\n                    start_row = min(start_row, i);\n                    end_row = max(end_row,i);\n                    start_col = min(start_col, j);\n                    end_col = max(end_col, j);\n                    found = 1;\n                }\n            }\n        }\n        int ret = found? (end_row-start_row+1)*(end_col-start_col+1): 0;\n        cout << \" area= \" << ret << endl;\n        cout << \" left= \" << left <<\" right= \" << right << \" top= \" << top << \" bottom= \" << bottom << endl;\n\n\n        return ret;\n    }\n\n    int minimumSum(vector<vector<int>>& grid) { //1 <= grid.length, grid[i].length <= 30; grid[i][j] is either 0 or 1.; \n        //The input is generated such that there are at least three 1's in grid.\n   \n        int rows = grid.size();\n        int cols = grid[0].size();\n \n        int left = 0;\n        int right = grid[0].size()-1;\n        int top = 0;\n        int bottom = grid.size()-1;\n        \n   \n\n        int ans = 1e9;\n        //cutting point: suppose the top-left includes the cutting point.  \n        for(int i=0; i<rows; i++) {\n            for(int j=0; j<cols; j++) {\n\n                //6 cases.\n                /*\n                -------------\n                |    (1)    |\n                |           |\n                -------------\n                | (2) | (3) |\n                |     |     |\n                -------------\n                */\n                int area1 = 0;\n                int area2 = 0;\n                int area3 = 0;\n                bool case1 = true;\n                area1 = minimumArea(grid, 0, cols-1, 0, i); //left, right, top, bottom\n                if (i+1 <rows)\n                    area2 = minimumArea(grid, 0, j, i+1, rows-1);  //left, right, top, bottom\n                else\n                    case1 = false;\n                if (i+1 <rows && j+1 <cols)\n                    area3 = minimumArea(grid, j+1, cols-1, i+1, rows-1);  //left, right, top, bottom\n                else \n                    case1 = false;\n                if (case1 && area1>0 && area2>0 && area3 > 0)\n                    ans = min(ans, area1+area2+area3);\n\n                /*\n                -------------\n                | (2) | (3) |\n                |     |     |\n                ------------\n                |           |\n                |    (1)    |\n                -------------\n                */\n                bool case2 = true;\n                if (i+1 <rows)\n                    area1 = minimumArea(grid, 0, cols-1, i+1, rows-1); //left, right, top, bottom\n                else\n                    case2 = false;\n                area2 = minimumArea(grid, 0, j, 0, i);\n                if (j+1 <cols)\n                    area3 = minimumArea(grid, j+1, cols-1, 0, i);\n                else\n                    case2 = false;\n                if (case2 && area1>0 && area2>0 && area3 > 0)\n                    ans = min(ans, area1+area2+area3);\n\n                /*\n                -------------\n                |     | (2) |\n                |     |     |\n                (1) -------\n                |     |     |\n                |     | (3) |\n                -------------\n                */\n                bool case3 = true;\n                area1 = minimumArea(grid, 0, j, 0, rows-1); //left, right, top, bottom\n                if (j+1 <cols)\n                    area2 = minimumArea(grid, j+1, cols-1, 0, i);\n                else\n                    case3 = false;\n                if (i+1 <rows && j+1 <cols)\n                    area3 = minimumArea(grid, j+1, cols-1, i+1, rows-1);\n                else \n                    case3 = false;\n                if (case3 && area1>0 && area2>0 && area3 > 0)\n                    ans = min(ans, area1+area2+area3);\n                /*\n                -------------\n                |     |     |\n                | (2) |     |\n                ------- (1) |\n                |     |     |\n                | (3) |     |\n                -------------\n                */\n                bool case4 = true;\n                if (j+1 <cols)\n                    area1 = minimumArea(grid, j+1, cols-1, 0, rows-1); //left, right, top, bottom\n                else \n                    case4 = false;\n                area2 = minimumArea(grid, 0, j, 0, i);\n                if (i+1 <rows)\n                    area3 = minimumArea(grid, 0, j, i+1, rows-1);\n                else \n                    case4 = false;\n                if (case4 && area1>0 && area2>0 && area3 > 0)\n                    ans = min(ans, area1+area2+area3);\n            }\n        }\n\n        for(int i=0; i<rows; i++) {\n            for(int k=i+1; k<rows; k++) {\n                /*\n                -------------\n                |    (1)    |\n                -------------\n                |    (2)    |\n                -------------\n                |    (3)    |\n                -------------\n                */\n                int area1 = 0;\n                int area2 = 0;\n                int area3 = 0;\n                bool case5 = true;\n                area1 = minimumArea(grid, 0, cols-1, 0, i); //left, right, top, bottom\n                if (i+1 <rows)\n                    area2 = minimumArea(grid, 0, cols-1, i+1, k);\n                else\n                    case5 = false;\n                if (k+1 <rows)\n                    area3 = minimumArea(grid, 0, cols-1, k+1, rows-1);\n                else \n                    case5 = false;\n                if (case5 && area1>0 && area2>0 && area3 > 0)\n                    ans = min(ans, area1+area2+area3);\n            }\n        }\n\n        for(int j=0; j<cols; j++) {\n            for(int k=j+1; k<cols; k++) {\n                 /*\n                -------------\n                |   |   |   |\n                |   |   |   |\n                |(1)|(2)|(3)|\n                |   |   |   |\n                |   |   |   |\n                -------------\n                */  \n                int area1 = 0;\n                int area2 = 0;\n                int area3 = 0;\n                bool case6 = true;      \n                area1 = minimumArea(grid, 0, j, 0, rows-1); //left, right, top, bottom\n                if (j+1 <cols)\n                    area2 = minimumArea(grid, j+1, k, 0, rows-1);\n                else\n                    case6 = false;\n                if (k+1 <cols)\n                    area3 = minimumArea(grid, k+1, cols-1, 0, rows-1);\n                else \n                    case6 = false;\n                if (case6 && area1>0 && area2>0 && area3 > 0)\n                    ans = min(ans, area1+area2+area3);\n            }\n        }\n        \n        return ans;\n    }\n    \n};","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-ii","has_notes":false,"flag_type":1}