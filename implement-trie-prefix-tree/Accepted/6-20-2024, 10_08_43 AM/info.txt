{"id":1294821534,"question_id":208,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718903323,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1294821534/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"48.4 MB","code":"#define N 26\nstruct trieNode {\n    //vector<trieNode*> children; //(26, NULL);\n    trieNode* children[N];\n\n    bool isWord = false;\n    bool containKeys(char ch) {\n        return children[ch-'a'] != NULL;\n    };\n    void put(char ch, trieNode*node) {\n        children[ch-'a'] = node;\n    }\n    trieNode *get(char ch) {\n        return children[ch-'a'];\n    }\n    void setEnd() {\n        isWord = true;\n    }\n    bool isEnd() {\n        return isWord;\n    }\n\n};\n\nclass Trie { //word and prefix consist only of lowercase English letters\nprivate:\n    trieNode* root;\npublic:\n    Trie() {\n        root = new trieNode();\n        \n    }\n    \n    void insert(string word) {\n        trieNode *node = root;\n        for(int i=0; i<word.size(); i++) {\n            if(!node->containKeys(word[i]))\n                node->put(word[i], new trieNode());\n            node = node->get(word[i]);\n        \n        }\n        node->setEnd(); \n    }\n    \n    bool search(string word) {\n        trieNode *node = root;\n        for(int i=0; i<word.size(); i++) {\n            if(node->containKeys(word[i])) \n                node = node->get(word[i]);\n            else\n                return false;\n        }\n        return node->isEnd();\n    }\n    \n    bool startsWith(string prefix) {\n        trieNode *node = root;\n        for(int i=0; i<prefix.size(); i++) {\n            if(node->containKeys(prefix[i])) \n                node = node->get(prefix[i]);\n            else\n                return false;\n        }\n        return true;\n\n        \n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}