{"id":387686373,"question_id":208,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1598641052,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/387686373/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"48.8 MB","code":"class Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie():root_(new TrieNode) {\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n\t\tTrieNode* p = root_.get();\n\t\tfor(const char c: word) {\n\t\t\tif(!p->children[c-'a'])\n\t\t\t\tp->children[c-'a'] = new TrieNode();\n\t\t\tp = p->children[c-'a'];\n\t\t}\n\t\tp->is_word = true; //the last letter, set is_word true.\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        const TrieNode* p=find(word);\n        return (p != nullptr) &&(p->is_word);\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        return find(prefix) != nullptr;\n    }\n\t\nprivate:\n    struct TrieNode {\n\t  bool is_word;\n\t  vector<TrieNode *> children;\n\t  TrieNode(): is_word(false), children(26, nullptr) {}\n\t  ~TrieNode() {\n\t    for(TrieNode* child: children)\n\t\t\tif(child) delete child;\n\t  }\n\t};\n\tunique_ptr<TrieNode> root_;\n\tconst TrieNode* find(const string& prefix) {\n\t\tconst TrieNode* p = root_.get();\n\t\tfor (const char c: prefix) { //follw the prefix string to the trie leaf.\n\t\t\tp = p->children[c-'a'];\n\t\t\tif(p==nullptr) break;\n\t\t}\n\t\treturn p;\n\t}\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */\n \n ","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}