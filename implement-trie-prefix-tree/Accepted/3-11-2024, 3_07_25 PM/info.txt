{"id":1200974596,"question_id":208,"lang":"cpp","lang_name":"C++","time":"11Â months","timestamp":1710194845,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/1200974596/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"48.3 MB","code":"#define N 26\n\nstruct Node {\n    Node *links[N];\n    bool isWord = false;\n\n    bool containKey(char ch) {\n        return (links[ch-'a'] != NULL);\n    }\n\n    void put(char ch, Node *node) {\n        links[ch-'a'] = node;\n    }\n\n    Node *get(char ch) {\n        return links[ch-'a']; \n    }\n\n    void setEnd() {\n        isWord = true;\n    }\n\n    bool isEnd() {\n        return isWord;\n    }\n};\n\nclass Trie {\nprivate:\n    Node* root;\n\npublic:\n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(string word) {\n        Node *node = root;\n        for(int i=0; i<word.size(); i++) {\n            if(!node->containKey(word[i]))\n                node->put(word[i], new Node());\n            node = node->get(word[i]);\n        };\n        node->setEnd();\n    }\n    \n    bool search(string word) {\n        Node *node = root;\n        for(int i=0; i<word.size(); i++) {\n            if(!node->containKey(word[i])) {\n                return false;\n            }\n            node = node->get(word[i]);\n        }\n\n        return node->isEnd();\n    }\n    \n    bool startsWith(string prefix) {\n        Node *node = root;\n        for(int i=0; i<prefix.size(); i++) {\n            if(!node->containKey(prefix[i])) {\n                return false;\n            }\n            node = node->get(prefix[i]);\n        }\n\n        return true;\n\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}