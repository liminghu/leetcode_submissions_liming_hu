{"id":1381578647,"question_id":1014,"lang":"cpp","lang_name":"C++","time":"5 months","timestamp":1725669221,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/1381578647/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"68.5 MB","code":"/*\nGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, \nreturn the k closest points to the origin (0, 0).\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).\n1 <= k <= points.length <= 104\n-104 <= xi, yi <= 104\n*/\nstruct dist_coord {\n        int distance;\n        int x;\n        int y;\n};\n\nclass Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        auto greater_cmp = [](dist_coord a, dist_coord b) {return a.distance > b.distance;};\n\n        priority_queue<dist_coord, vector<dist_coord>, decltype(greater_cmp)> min_pq; //min, distance, {x,y}\n        if(k>=points.size())\n            return points;\n\n        for(int i=0; i<points.size(); i++) {\n            int distance = points[i][0]*points[i][0]+points[i][1]*points[i][1];\n            dist_coord d_c;\n            d_c.distance = distance;\n            d_c.x = points[i][0];\n            d_c.y = points[i][1];\n            min_pq.push( d_c );\n        };\n        vector<vector<int>> res;\n        for(int i=0; i<k; i++) {\n            dist_coord top = min_pq.top();\n            min_pq.pop();\n            res.push_back({top.x, top.y});\n        }  \n        return res;      \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-closest-points-to-origin","has_notes":false,"flag_type":1}