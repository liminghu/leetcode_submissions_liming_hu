{"id":1299166794,"question_id":37,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719260906,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1299166794/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"7.7 MB","code":"class Solution {\npublic:\n/*\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\nThe '.' character indicates empty cells.\n*/\n    void solveSudoku(vector<vector<char>>& board) {//board.length == 9;  //board[i].length == 9 //board[i][j] is a digit or '.'.\n                                                    //It is guaranteed that the input board has only one solution.\n        backtrack(board);    \n    }\n\n    bool backtrack(vector<vector<char>>& board) {\n        for(int row=0; row<board.size(); row++) {\n             for(int col=0; col<board[0].size(); col++) {\n                if(board[row][col]!='.')\n                    continue;\n                for(char k='1'; k<='9'; k++) {\n                    if(!isValid(board, row, col, k))\n                        continue;\n                    board[row][col] = k;\n                    if(backtrack(board))\n                        return true;\n                    board[row][col] = '.';\n                }\n                return false;\n             }\n        }\n        return true;\n    }\n\n    bool isValid(vector<vector<char>>& board, int row, int col, int val) {\n\n        //row\n        for(int j=0; j<9; j++) {\n            if(board[row][j]== val)\n                return false;\n        }\n        //col\n        for(int i=0; i<9; i++) {\n            if(board[i][col]== val)\n                return false;\n        }\n\n        //3*3 only need to check the current 3*3\n        int startRow = (row/3)*3;\n        int startCol = (col/3)*3;\n        for(int i=startRow; i<startRow+3; i++) {\n            for(int j=startCol; j<startCol+3; j++) {\n                if( board[i][j] == val )\n                    return false;\n            }\n        }\n        return true;\n    }\n};","compare_result":"111111","title_slug":"sudoku-solver","has_notes":false,"flag_type":1}