{"id":1285518610,"question_id":127,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1718164025,"status":10,"status_display":"Accepted","runtime":"2435 ms","url":"/submissions/detail/1285518610/","is_pending":"Not Pending","title":"Word Ladder","memory":"19.8 MB","code":"class Solution {\npublic:\n/*\nA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n*/\n    int distance(string first, string second) {\n        int ans = 0;\n        for(int i=0; i<first.size(); i++) {\n            if(first[i]!=second[i])\n                ans++;\n        };\n        return ans; \n    }\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        unordered_map<string, bool> visited;\n        for(int i=0; i<wordList.size(); i++) {\n            visited[wordList[i]] = false;\n        };\n\n        if(visited.find(endWord) == visited.end()) \n            return 0;\n        \n        if(visited.find(beginWord) == visited.end()) {\n            wordList.push_back(beginWord);\n            visited[beginWord] = false;\n        };\n        int n = wordList.size();\n        \n        queue<string> trans_q;\n        trans_q.push(endWord);\n        visited[endWord] = true;\n        int count = 0;\n        string cur;\n        while(!trans_q.empty()) {\n            count++;\n            int sz = trans_q.size();\n            while(sz--) { //bfs\n                cur = trans_q.front();\n                trans_q.pop();\n                if(cur == beginWord)\n                    break;\n                //find cur's next, and push them into the queue.\n                for(int i=0; i<n; i++) {\n                    if(visited[wordList[i]] !=true && distance(cur, wordList[i])==1) {\n                        trans_q.push(wordList[i]);\n                        visited[wordList[i]] = true;\n                        if(wordList[i] == beginWord)\n                            return count+1;\n                    };\n                };\n            };\n        };\n        if(cur == beginWord)\n            return count;\n        else\n            return 0;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}