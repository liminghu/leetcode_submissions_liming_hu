{"id":1360844051,"question_id":2044,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1724028595,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/1360844051/","is_pending":"Not Pending","title":"Number of Wonderful Substrings","memory":"16.4 MB","code":"/*A wonderful string is a string where at most one letter appears an odd number of times.\r\n\r\nFor example, \"ccjjc\" and \"abab\" are wonderful, but \"ab\" is not.\r\nGiven a string word that consists of the first ten lowercase English letters ('a' through 'j'), \r\nreturn the number of wonderful non-empty substrings in word. If the same substring appears multiple \r\ntimes in word, then count each occurrence separately.\r\n\r\nA substring is a contiguous sequence of characters in a string.\r\n*/\r\nclass Solution {\r\npublic:\r\n    long long wonderfulSubstrings(string word) {\r\n        //1 <= word.length <= 105\r\n        //word consists of lowercase English letters from 'a' to 'j'.\r\n        int n = word.length();\r\n        int state = 0;\r\n        vector<int> count(1<<10);\r\n        count[0] = 1; //no letters, valid wonderful string.\r\n        long long ret = 0;\r\n        for(int i=0; i<n; i++) {\r\n            int k = word[i] - 'a';\r\n            state = state ^ (1<<k); // state[i], state is even.\r\n\r\n            //if(state%2 == 0)\r\n            ret += count[state]; //all letter freqs are even.\r\n            for(int k = 0; k<10; k++) { //state is even.\r\n                int stateJ = state ^(1<<k);   //stateJ\r\n                ret += count[stateJ];\r\n            }\r\n            count[state] += 1;  //state[i]\r\n        }\r\n        return ret;\r\n    }\r\n};\r\n\r\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-wonderful-substrings","has_notes":false,"flag_type":1}