{"id":1527053168,"question_id":2045,"lang":"cpp","lang_name":"C++","time":"6 days, 11 hours","timestamp":1738387004,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/1527053168/","is_pending":"Not Pending","title":"Cutting Ribbons","memory":"96.3 MB","code":"class Solution {\npublic:\n    int maxLength(vector<int>& ribbons, int k) {//1 <= k <= 109\n    //Your task is to determine the maximum length of ribbon, x, \n    //that allows you to cut at least k ribbons, each of length x. \n    //You can discard any leftover ribbon from the cuts. If it is \n    //impossible to cut k ribbons of the same length, return 0.\n        int ret = 0;\n        int n = ribbons.size();\n        long long  sum = 0;\n        int left = 1;\n        int right = 1;\n        for(auto ribbon:ribbons) {\n            sum += ribbon;\n            right = max(right, ribbon);\n        }\n        if(k>sum)\n            return 0;\n        sort(ribbons.begin(), ribbons.end());\n        while(left<right) {\n            int mid = left+(right-left+1)/2; //prevent dead loop\n            bool tf = isPossible(ribbons, k, mid);\n            if(tf)\n                left = mid;\n            else\n                right = mid-1;\n        }\n        return left;\n    }\n    bool isPossible(vector<int>& ribbons, int k, int x) {\n        int totalRibbons = 0;\n        for(int ribbon:ribbons) {\n            int pieces = ribbon/x;\n            totalRibbons += pieces;\n            if(totalRibbons>=k)\n                return true;\n        }\n        return false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"cutting-ribbons","has_notes":false,"flag_type":1}