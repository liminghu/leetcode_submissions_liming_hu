{"id":1350483818,"question_id":227,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723248803,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1350483818/","is_pending":"Not Pending","title":"Basic Calculator II","memory":"18.6 MB","code":"/*Given a string s which represents an expression, evaluate this expression and return its value. \nThe integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n*/\nclass Solution {\npublic:\n    int calculate(string s) {\n        /*\n            1 <= s.length <= 3 * 105\n            s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.\n            s represents a valid expression.\n            All the integers in the expression are non-negative integers in the range [0, 231 - 1].\n            The answer is guaranteed to fit in a 32-bit integer.\n        */\n        long res = 0;\n        vector<long> nums;\n\n        //add \"+\", remove space.\n\n\n        int sz = s.length();\n        string new_s = \"+\";\n        for(int i=0; i<sz; i++) {\n            if(s[i] == ' ')\n                continue;\n            else {\n                new_s += s[i];\n            }\n        };\n\n        sz = new_s.length();\n        //cout << \"new_s = \" << new_s << endl;\n        for(int i=0; i<sz; i++) {\n            if(new_s[i] == '+' || new_s[i] == '-') {\n                int j=i+1;\n                long num = 0;\n                while(isdigit(new_s[j])) {\n                    num= num*10 + new_s[j]-'0';\n                    j++;\n                };\n                if(new_s[i] == '-')\n                    num = -num;\n                nums.push_back(num);\n                //cout << \"num= \" << num << endl;\n                i=j-1;\n            } else if(new_s[i] == '*' || new_s[i] == '/') {\n                int j=i+1;\n                long num = 0;\n                while(isdigit(new_s[j])) {\n                    num= num*10 + new_s[j]-'0';\n                    j++;\n                };\n                if(new_s[i] == '*')\n                    nums.back() = nums.back()*num;\n                else {\n                    cout << \"num= \" << num << endl;\n                    nums.back() = nums.back()/num;\n                }\n                i=j-1;\n            }\n        }\n\n        for(int i=0; i<nums.size(); i++) {\n            res += nums[i];\n        }\n        return res;\n\n\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"basic-calculator-ii","has_notes":false,"flag_type":1}