{"id":1411063902,"question_id":95,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728006520,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1411063902/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"20.5 MB","code":"/*Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly \nn nodes of unique values from 1 to n. Return the answer in any order.\nConstraints:\n1 <= n <= 8\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        if(n==0)\n            return {NULL};\n        return helper(1, n);\n    }\n    vector<TreeNode*> helper(int start, int end) {\n        if(start>end) {\n            return {NULL};\n        }\n        vector<TreeNode*> ans;\n        for(int i=start; i<=end; i++) {\n            vector<TreeNode*> leftNodes = helper(start, i-1);\n            vector<TreeNode*> rightNodes = helper(i+1, end);\n\n            for(TreeNode* left: leftNodes) {\n                for(TreeNode* right: rightNodes) {\n                    TreeNode* root = new TreeNode(i);\n                    root->left = left;\n                    root->right = right;\n                    ans.push_back(root);\n                }\n            }\n        }\n        return ans;\n    }\n};","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii","has_notes":false,"flag_type":1}