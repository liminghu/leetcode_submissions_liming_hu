{"id":406730973,"question_id":380,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1602288431,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/406730973/","is_pending":"Not Pending","title":"Insert Delete GetRandom O(1)","memory":"23.1 MB","code":"\nclass RandomizedSet {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedSet() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    bool insert(int val) {\n       if(m_.count(val)) return false; //found\n       m_[val] = vals_.size();\n       vals_.push_back(val);\n       return true;\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    bool remove(int val) {\n        if(!m_.count(val)) return false; //not found\n        int index = m_[val]; //found.\n        m_[vals_.back()] = index; \n        m_.erase(val);\n        swap(vals_[index], vals_.back());\n        vals_.pop_back();\n        return true;\n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n        int index = rand() % vals_.size();\n        return vals_[index];\n    }\nprivate: \n    //val->index in the array.\n    unordered_map<int,int> m_;\n    vector<int> vals_;\n};\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */","compare_result":"111111111111111111","title_slug":"insert-delete-getrandom-o1","has_notes":false,"flag_type":1}