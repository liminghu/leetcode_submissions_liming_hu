{"id":406714246,"question_id":210,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1602283912,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/406714246/","is_pending":"Not Pending","title":"Course Schedule II","memory":"14.4 MB","code":"\nclass Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n       vector<vector<int>> graph(numCourses);\n       for(const auto& p:  prerequisites) {\n            graph[p[1]].push_back(p[0]);\n       } \n       //states: 0: unknown, 1:visiting, 2: visted\n       vector<int> v(numCourses,0);\n       vector<int> ans;\n       \n       for(int i=0; i<numCourses; i++) {\n            if( dfs(i, graph,v,ans) ) return {};\n       }    \n        std:reverse(ans.begin(), ans.end());\n        return ans;\n    }\n       \nprivate:\n    bool dfs(int cur, vector<vector<int>>& graph, vector<int>& v, vector<int>& ans) {\n        if(v[cur] == 1) return true; //there is a loop.\n        if(v[cur] == 2) return false; //visited, do not need to do anything.\n        \n        v[cur] = 1; //visiting\n        \n        for(const int t: graph[cur]) //[ai, bi] this means you must take the course bi before the course ai.\n            if(dfs(t, graph,v,ans)) return true;\n        \n        v[cur] = 2; //visited\n        ans.push_back(cur);\n        \n        return false; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}