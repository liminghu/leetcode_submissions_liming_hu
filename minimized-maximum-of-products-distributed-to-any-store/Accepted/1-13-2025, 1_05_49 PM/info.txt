{"id":1507686810,"question_id":2188,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1736802349,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1507686810/","is_pending":"Not Pending","title":"Minimized Maximum of Products Distributed to Any Store","memory":"88.3 MB","code":"class Solution {\npublic:\n//m product types of varying amounts, which are given as a 0-indexed integer array quantities, \n//where quantities[i] represents the number of products of the ith product type.\n    int minimizedMaximum(int n, vector<int>& quantities) {\n        int m = quantities.size();\n        //A store can only be given at most one product type but can be given any amount of it.\n        //After distribution, each store will have been given some number of products (possibly 0). \n        //Let x represent the maximum number of products given to any store. You want x to be as small \n        //as possible, i.e., you want to minimize the maximum number of products that are given to any store.\n        int lo = 1, hi = INT_MAX/2;\n        while(lo<hi) {\n            int mid = lo+(hi-lo)/2;\n            if(checkOK(quantities, n, mid))\n                hi = mid;\n            else\n                lo = mid+1;\n        }\n        return lo;\n    }\n    bool checkOK(vector<int>& quantities, int n, int limit) {\n        int count = 0;\n        for(int x: quantities) {\n            if(x%limit == 0)\n                count += x/limit;\n            else\n                count += x/limit+1;\n        }\n        return count<=n;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimized-maximum-of-products-distributed-to-any-store","has_notes":false,"flag_type":1}