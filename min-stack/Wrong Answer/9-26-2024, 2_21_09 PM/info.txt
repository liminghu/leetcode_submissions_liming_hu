{"id":1403366398,"question_id":155,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727385669,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1403366398/","is_pending":"Not Pending","title":"Min Stack","memory":"N/A","code":"/*\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\nYou must implement a solution with O(1) time complexity for each function.\n-231 <= val <= 231 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\n*/\nclass MinStack {\nprivate:\n    stack<pair<int,int>> st;\npublic:\n    MinStack() {//initializes the stack object.\n    }\n    \n    void push(int val) { //pushes the element val onto the stack.\n        if(st.empty()) {\n            st.push({val,val});\n        }\n        int currentMin = st.top().second;\n        st.push({val, min(val, currentMin)});\n    }\n    \n    void pop() { //removes the element on the top of the stack.\n        st.pop();\n    }\n    \n    int top() { //gets the top element of the stack.\n        return st.top().first;\n    }\n    \n    int getMin() { //retrieves the minimum element in the stack.\n        return st.top().second;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111110111111111101111101111","title_slug":"min-stack","has_notes":false,"flag_type":1}