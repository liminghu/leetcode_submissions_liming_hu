{"id":1301273646,"question_id":322,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719431640,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1301273646/","is_pending":"Not Pending","title":"Coin Change","memory":"N/A","code":"class Solution { //https://leetcode.com/problems/coin-change/solutions/778548/c-dp-solution-explained-100-time-100-space/\npublic:\n/*\nYou are given an integer array coins representing coins of different denominations and \nan integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of \nmoney cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n*/\n    int coinChange(vector<int>& coins, int amount) { //1 <= coins.length <= 12\n                                                    //1 <= coins[i] <= 231 - 1\n                                                    //0 <= amount <= 104\n        int sz = coins.size();\n\n        sort(coins.begin(), coins.end());\n        \n        int left = amount;\n        int num_coins = 0;\n        for(int i=sz-1; i>=0; i--) {\n            if(left == 0) \n                break;\n            else {\n                if( coins[i] <= left ) {\n                    num_coins += left / coins[i];\n                    left = left % coins[i]; \n                } else \n                    continue;\n            }\n        }\n\n        if (left == 0) \n            return num_coins;\n        else\n            return -1;\n        \n    }\n};","compare_result":"111111111111111111111111111111100000011001001000010000010000010001000100000000000000000000000000000000001000000011000000000000000000100000000000000001000000000000000000100000000000000110111","title_slug":"coin-change","has_notes":false,"flag_type":1}