{"id":1301281557,"question_id":322,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719432427,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1301281557/","is_pending":"Not Pending","title":"Coin Change","memory":"19.9 MB","code":"class Solution { //https://leetcode.com/problems/coin-change/solutions/778548/c-dp-solution-explained-100-time-100-space/\npublic:\n/*\nYou are given an integer array coins representing coins of different denominations and \nan integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of \nmoney cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n*/\n    int coinChange(vector<int>& coins, int amount) { //1 <= coins.length <= 12\n                                                    //1 <= coins[i] <= 231 - 1\n                                                    //0 <= amount <= 104\n        int sz = coins.size();\n        //dp[j]：凑足总额为j所需钱币的最少个数为dp[j]\n        vector<long> dp(amount+1, INT_MAX);\n        dp[0] = 0;\n        //凑足总额为j - coins[i]的最少个数为dp[j - coins[i]]，那么只需要加上一个钱币coins[i]即dp[j - coins[i]] + 1就是dp[j]（考虑coins[i]）\n        //所以dp[j] 要取所有 dp[j - coins[i]] + 1 中最小的。\n        //递推公式：dp[j] = min(dp[j - coins[i]] + 1, dp[j]);\n        for(int i=0; i<sz; i++) {\n            for( int j = coins[i]; j <= amount; j++ ) {\n                dp[j] = min( dp[j], dp[ j-coins[i] ] + 1 );\n            }\n        }\n\n        if(dp[amount] == INT_MAX )\n            return -1;\n        else\n            return dp[amount];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-change","has_notes":false,"flag_type":1}