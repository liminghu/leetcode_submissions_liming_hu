{"id":1370369087,"question_id":295,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724782387,"status":10,"status_display":"Accepted","runtime":"291 ms","url":"/submissions/detail/1370369087/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"122.2 MB","code":"/*The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nFor example, for arr = [2,3,4], the median is 3.\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\nImplement the MedianFinder class:\n\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n */\nclass MedianFinder {\n    priority_queue<int> lo;     //max heap.\n    priority_queue<int, vector<int>, greater<int>> hi;  //min healp.\n\npublic:\n    MedianFinder() {    \n    }\n    \n    void addNum(int num) {\n        lo.push(num);    //add to max heap.\n        hi.push(lo.top());   //balancing the two heaps.\n        lo.pop();\n\n        if(lo.size() < hi.size()) {\n            lo.push(hi.top());\n            hi.pop();\n        }\n    }\n    \n    double findMedian() {\n        \n        return lo.size() > hi.size()? lo.top(): (double)(lo.top()+hi.top())*0.5;\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}