{"id":1402351280,"question_id":2196,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727305643,"status":10,"status_display":"Accepted","runtime":"667 ms","url":"/submissions/detail/1402351280/","is_pending":"Not Pending","title":"Reverse Nodes in Even Length Groups","memory":"335.2 MB","code":"/*\nYou are given the head of a linked list.\n\nThe nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural \nnumbers (1, 2, 3, 4, ...). The length of a group is the number of nodes assigned to it. In other words,\n\nThe 1st node is assigned to the first group.\nThe 2nd and the 3rd nodes are assigned to the second group.\nThe 4th, 5th, and 6th nodes are assigned to the third group, and so on.\nNote that the length of the last group may be less than or equal to 1 + the length of the second to last group.\n\nReverse the nodes in each group with an even length, and return the head of the modified linked list.\nThe number of nodes in the list is in the range [1, 105].\n0 <= Node.val <= 105\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseEvenLengthGroups(ListNode* head) {\n        vector<ListNode*> heads;\n        vector<int> lens;\n\n        ListNode* p = head;\n        int len = 1;\n        while(1) {\n            heads.push_back(p);\n            int count = 1;\n            for(int i=0; i<len-1; i++) {\n                if(p->next == NULL)\n                    break;\n                p = p->next;\n                count++;\n            };\n            lens.push_back(count);\n            if(p->next == NULL)\n                break;\n            \n            ListNode* temp = p->next; \n            p->next = NULL; //break the list.\n            p = temp;\n            len++;\n        };\n\n        for(int i=0; i<heads.size(); i++) {\n           if(lens[i] % 2 == 0)\n                heads[i] = reverseLinkedList(heads[i]);\n        };\n        for(int i=0; i<heads.size()-1; i++) {\n            ListNode* h = heads[i];\n            while(h->next)\n                h = h->next;\n            h->next = heads[i+1];\n        }\n        return heads[0];\n    }\n\n   ListNode* reverseLinkedList(ListNode*  head) {\n        ListNode* last = NULL; //the head of reversed list.\n        ListNode* cur = head;\n        ListNode* nxt;\n        \n        while(cur) { //from head to end, add head to last (as stack.)\n            nxt = cur->next;\n            cur->next = last; //as stack.\n            last = cur; //update last.\n            cur = nxt; //next node.\n        }\n        return last;\n    }\n};\n ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-even-length-groups","has_notes":false,"flag_type":1}