{"id":1465605121,"question_id":1178,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1732864853,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1465605121/","is_pending":"Not Pending","title":"Valid Palindrome III","memory":"17.3 MB","code":"class Solution {\npublic:\n    bool isValidPalindrome(string s, int k) {//removing at most k characters from it.\n        int n = s.length();\n        if(k==n || k == n-1)\n            return true;\n        //dp[i][j]: minimum removal required to make string s[i~j] a palindrome.\n        vector<vector<int>> dp(n, vector<int>(n, 0));\n        //1, Clearly that if j-i+1<=1 (empty string or one character string) then dp[i][j] = 0. This becomes a base case of the problem.\n        //2, For dp[i][j] where j-i+1 >= 2, we can compare s[i] with s[j]. If s[i] = s[j], then we don't need to removal them.\n        // Otherwise, the answer is dp[i+1][j] or dp[i][j-1], whichever is smaller, plus 1 as a necessary removal to remove either s[i] or s[j].\n        //So here's the induction steps: dp[i][j] = min(dp[i+1][j], dp[i][j-1])+1\n        for(int j=0; j<n; j++) {\n            for(int i = j-1; i>=0; i--) {\n                if(j-i == 1)\n                    dp[i][j] = (s[i]==s[j]? 0: 1);\n                else {\n                    if(s[i]==s[j]) {\n                        dp[i][j] = dp[i+1][j-1];\n                    } else {\n                        dp[i][j]=min(dp[i+1][j], dp[i][j-1])+1;\n                    }\n                }\n            }\n        }\n        return dp[0][n-1] <= k;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome-iii","has_notes":false,"flag_type":1}