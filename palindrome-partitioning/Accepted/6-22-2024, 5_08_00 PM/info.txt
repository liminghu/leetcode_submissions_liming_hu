{"id":1297169630,"question_id":131,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719101280,"status":10,"status_display":"Accepted","runtime":"119 ms","url":"/submissions/detail/1297169630/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"87.5 MB","code":"class Solution {\npublic:\n    vector<vector<string>> ans = {};\n    vector<string> path = {};\n    vector<vector<string>> partition(string s) { //1 <= s.length <= 16; s contains only lowercase English letters.\n        backtrack(s,0);  //0: start location.\n        return ans;\n    }\n\n    void backtrack(string s,int start) {\n        if(start>=s.length()) {\n            ans.push_back(path);\n            return;\n        };\n\n        for(int i=start; i<s.length(); i++) {\n            if(isPalindrome(s, start, i)) {\n                string pal_str = s.substr(start, i+1-start);\n                path.push_back(pal_str);  \n            } else \n                continue;\n            backtrack(s, i+1);\n            path.pop_back();\n        }\n    }\n\n    bool isPalindrome(string s, int start, int end) {\n        if(end < start)\n            return false;\n        if(start==end)\n            return true;\n\n        while(start<end) {\n            if(s[start]==s[end]) {\n                start++;\n                end--;\n            } else\n                return false;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}