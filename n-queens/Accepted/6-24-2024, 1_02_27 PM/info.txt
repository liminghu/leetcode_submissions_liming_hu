{"id":1299149774,"question_id":51,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719259347,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1299149774/","is_pending":"Not Pending","title":"N-Queens","memory":"11.8 MB","code":"class Solution {\npublic:\n/*\nThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n*/\n    vector<vector<string>> ans = {};\n    vector<string> path = {};\n    vector<vector<string>> solveNQueens(int n) { //1 <= n <= 9\n        int start = 0;\n        vector<vector<char>> board(n, vector<char>(n, '.'));\n\n        backtrack(n, start, board);\n        return ans;\n        \n    }\n    void backtrack(int n, int row, vector<vector<char>>& board) {\n        if(row == n) {\n            ans.push_back(arraytoList(board));\n            return;\n        };\n\n        for(int col=0; col<n; col++) {\n            //place queen\n            if(!isValid(n, board, row, col))\n                continue;\n            board[row][col] = 'Q';\n            backtrack(n, row+1, board);\n            board[row][col] = '.';\n        }\n    }\n\n\n    bool isValid(int n, vector<vector<char>>& board, int row, int col) { //can we place the queen at (row, col)?\n\n        //we do not need to check the current row.\n\n        for(int i=0; i<n; i++) { //check the current col.\n            if(board[i][col] == 'Q')\n                return false;\n        };\n\n        //check diagonal\n        for(int i=row-1, j=col+1; i>=0 && j<n; i--, j++) {\n            if(board[i][j] == 'Q')\n                return false;\n        }\n\n        //check anti-dignonal\n        for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--) {\n            if(board[i][j] == 'Q')\n                return false;\n        }\n\n        return true;\n\n    }\n\n    vector<string> arraytoList(vector<vector<char>> board) {\n        vector<string> ans;\n\n        for(int row =0; row<board.size(); row++) {\n            string cur_row = \"\";\n            for(int col =0; col<board[0].size(); col++) {\n                cur_row= cur_row+board[row][col];\n            }\n            ans.push_back(cur_row);\n            cur_row = \"\";\n        }\n        return ans;\n    }\n};","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}