{"id":1408645302,"question_id":110,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727814339,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1408645302/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21.9 MB","code":"//Given a binary tree, determine if it is height-balanced.\n/*\nThe number of nodes in the tree is in the range [0, 5000].\n-104 <= Node.val <= 104\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        if(root == NULL)\n            return true;\n        if(root->left == NULL && root->right == NULL)\n            return true;\n        int l_height = height(root->left);\n        int r_height = height(root->right);\n        //cout << \"left height:\" << l_height << endl;\n        //cout << \"right height:\" << r_height << endl;        \n        return abs( l_height - r_height ) <= 1 && isBalanced(root->left) && isBalanced(root->right);\n    }\n    int height(TreeNode* root) {\n        if(root == NULL)\n            return 0;\n        if(root->left == NULL && root->right == NULL)\n            return 1; \n        int l_height = height(root->left);\n        int r_height = height(root->right);   \n        return max(l_height, r_height) + 1;      \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}