{"id":1408916869,"question_id":792,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727842728,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1408916869/","is_pending":"Not Pending","title":"Binary Search","memory":"30.2 MB","code":"/*\nGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to \nsearch target in nums. If target exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.\nConstraints:\n\n1 <= nums.length <= 104\n-104 < nums[i], target < 104\nAll the integers in nums are unique.\nnums is sorted in ascending order.\n*/\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {//All the integers in nums are unique. nums is sorted in ascending order.\n        int n = nums.size();\n        int left = 0;\n        int right = n-1;\n        int mid = 0;\n        while(left <=right) {\n            mid = (left+right)/2;\n            if(nums[mid] == target)\n                return mid;\n            else if(nums[mid] < target) \n                left = mid+1;\n            else \n                right = mid-1;\n        };\n        return -1;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"binary-search","has_notes":false,"flag_type":1}