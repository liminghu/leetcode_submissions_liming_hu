{"id":1398996917,"question_id":2236,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727042454,"status":10,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/1398996917/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"122.1 MB","code":"/*\nIn a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is \nknown as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.\nFor example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. \nThese are the only nodes with twins for n = 4.\nThe twin sum is defined as the sum of a node and its twin.\nGiven the head of a linked list with even length, return the maximum twin sum of the linked list.\nThe number of nodes in the list is an even integer in the range [2, 105].\n1 <= Node.val <= 105\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int pairSum(ListNode* head) {\n        int res = 0;\n        //i: 0.. n/2 -1\n        //twin i: n-1.. (n-1)-(n/2)+1\n        ListNode* cur = head;\n        ListNode* fast = cur;\n        if(head == NULL || head->next == NULL)\n            return -1;\n        while( fast ) {\n            cur = cur->next;\n            if(fast->next) \n                fast = fast->next->next;\n        };\n\n        //cur: it is the head of the second half.\n        stack<int> second;\n        while(cur) {\n            second.push(cur->val);\n            cur = cur->next;\n        }\n        while(!second.empty()) {\n            res = max(res, second.top() + head->val);\n            head = head->next;\n            second.pop();\n        };\n        return res;\n    }\n/*    ListNode* reverse(ListNode* head) {\n        if(head == NULL || head->next == NULL)\n            return head;\n        ListNode* newhead = reverse(head->next);\n        ListNode* tail = newhead;\n        while(tail->next)\n            tail = tail->next;\n        tail->next = head;\n        head -> next = NULL;\n        return newhead; \n    }*/\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}