{"id":399039215,"question_id":232,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1600749702,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/399039215/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"7.1 MB","code":"class MyQueue {\n\tstack<int> input, output;\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        input.push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        int p = peek();\n\t\toutput.pop();\n        return p;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        if(output.empty())\n\t\t\twhile(input.size())\n\t\t\t\toutput.push(input.top()), input.pop();\n\t\treturn output.top();\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return input.empty() && output.empty();\n    }\n};\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11111111111111111","title_slug":"implement-queue-using-stacks","has_notes":false,"flag_type":1}