{"id":1407554513,"question_id":3436,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727731252,"status":10,"status_display":"Accepted","runtime":"261 ms","url":"/submissions/detail/1407554513/","is_pending":"Not Pending","title":"Find Subarray With Bitwise OR Closest to K","memory":"95.7 MB","code":"/*You are given an array nums and an integer k. You need to find a subarray of nums such that the\n absolute difference between k and the bitwise OR of the subarray elements is as small as possible. \n In other words, select a subarray nums[l..r] such that |k - (nums[l] OR nums[l + 1] ... OR nums[r])| \n is minimum.\n\nReturn the minimum possible value of the absolute difference.\nA subarray is a contiguous non-empty sequence of elements within an array.\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= k <= 109\n*/\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) { //1 <= nums[i] <= 109 ; 1 <= k <= 109\n        int res = INT_MAX;\n        //for bitwise OR, result can not decrease.\n        // j, i two pointers, nums[j..i].\n        // j = i = 0;\n        //add nums[i] into total val (OR of nums[j..i])\n        //update j if val > k,  then the val will decrease..\n        //update i if val < k, then the val will increase.\n        //for any update, we calculate: diff = abs(val-k);\n        //return the min_diff.\n        vector<int> p(32, 0); //represent how many 1s on each bits.\n        for(int i=0, j=0; i<nums.size(); i++) {\n            update(p, nums[i]);\n            res = min( res, abs( k - get(p) ) );\n            if(res == 0)\n                return 0;\n            while(j<i && get(p) > k ) {\n                //subtract nums[j] from p.\n                for(int t=0; t<32; t++) {\n                    if(nums[j]>>t & 1)\n                        p[t]--;\n                }\n                int diff = abs(get(p)-k);\n                if(diff==0)\n                    return 0;\n                res = min(res, diff);\n                j++;\n            }\n        }\n        return res;\n    }\n    int get(vector<int>& p) {\n        int res = 0;\n        for(int t=0; t<32; t++) {\n            if(p[t]>0)\n                res |= (1<<t);\n        }\n        return res;\n    }\n\n    void update(vector<int>& p, int num) {\n        for(int t=0; t<32; t++) {\n            if(num>>t & 1)\n                p[t]++;\n        }\n    }    \n};","compare_resulttitle_slug":"find-subarray-with-bitwise-or-closest-to-k","has_notes":false,"flag_type":1}