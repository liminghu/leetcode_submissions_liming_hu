{"id":1355998429,"question_id":1762,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1723686235,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/1355998429/","is_pending":"Not Pending","title":"Furthest Building You Can Reach","memory":"58.1 MB","code":"/*You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\n\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\n\nWhile moving from building i to building i+1 (0-indexed),\n\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.\nIf the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.\n*/\nclass Solution {\npublic:\n    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {\n        //\n        int n = heights.size();\n        priority_queue<int, vector<int>, greater<>> posDiff; //diff,  min.      size: ladders+1.\n\n        //int res = 0;\n        for(int i=1; i<n; i++) {\n            int diff = heights[i] - heights[i-1];\n            if( diff <= 0 ) \n                continue;\n\n            if(posDiff.size() < ladders) {\n                posDiff.push(diff);\n            } else { //ladders posDiff.\n                posDiff.push(diff);\n                if(bricks < posDiff.top())\n                    return i-1;\n                bricks -= posDiff.top();\n                posDiff.pop();\n            }           \n        }\n\n        return n-1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"furthest-building-you-can-reach","has_notes":false,"flag_type":1}