{"id":1469555757,"question_id":1985,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1733254121,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1469555757/","is_pending":"Not Pending","title":"Maximum Subarray Min-Product","memory":"94.9 MB","code":"class Solution {\npublic:\n    int maxSumMinProduct(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> nextSmaller(n, n);\n        vector<int> prevSmaller(n, -1);\n        stack<int> st;\n        for(int i=0; i<n; i++) {\n            while(!st.empty() && arr[st.top()]>arr[i]) {\n                nextSmaller[st.top()] = i;\n                st.pop();\n            }\n            st.push(i);\n        }\n        while(!st.empty())\n            st.pop();\n        for(int i=n-1; i>=0; i--) {\n            while(!st.empty() && arr[st.top()]>=arr[i]) {\n                prevSmaller[st.top()] = i;\n                st.pop();\n            }\n            st.push(i);\n        }   \n        vector<long long> preSum(n, 0);\n        for(int i=0; i<n; i++) {\n            if(i==0)\n                preSum[i] = arr[i];\n            else\n                preSum[i] = preSum[i-1]+arr[i];\n        }\n\n        long long ret = 0;\n        long mod = 1e9+7;\n        for(int i=0; i<n; i++) {\n            int min = arr[i];\n            int right = nextSmaller[i];\n            int left = prevSmaller[i];\n            long long sum = preSum[right-1];\n            if(left != -1)\n                sum = sum - preSum[left];\n            long long prod = sum*(long long)min;\n            ret = max(ret, prod);\n        }     \n        return ret%mod;        \n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"maximum-subarray-min-product","has_notes":false,"flag_type":1}