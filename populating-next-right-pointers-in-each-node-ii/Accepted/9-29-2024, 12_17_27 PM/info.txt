{"id":1406418085,"question_id":117,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727637447,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1406418085/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"18.8 MB","code":"/*\nGiven a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, \nthe next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\n\nConstraints:\nThe number of nodes in the tree is in the range [0, 6000].\n-100 <= Node.val <= 100\n\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if(root==NULL)\n            return root;\n        queue<Node*> q;\n        q.push(root);\n        while(!q.empty()) {\n            int size = q.size();\n            for(int i=0; i<size; i++) {\n                Node* f = q.front();\n                q.pop();\n                if(i<size-1)\n                    f->next = q.front();\n                if(f->left)\n                    q.push(f->left);\n                if(f->right)\n                    q.push(f->right);\n            };\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false,"flag_type":1}