{"id":1520784590,"question_id":2246,"lang":"cpp","lang_name":"C++","time":"1 week, 5 days","timestamp":1737870742,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1520784590/","is_pending":"Not Pending","title":"Maximum Employees to Be Invited to a Meeting","memory":"93.2 MB","code":"class Solution {\npublic:\n    int maximumInvitations(vector<int>& favorite) {\n        int n = favorite.size();\n        int ret = 0;\n        //find the largest circle.\n        vector<int> inDegree(n, 0);\n        for(int i=0; i<n; i++) {\n            inDegree[favorite[i]]++;\n        };\n        queue<int> q;\n        for(int i=0; i<n; i++) {\n            if(inDegree[i]==0)\n                q.push(i);\n        };\n        vector<int> depth(n,1);\n        while(!q.empty()) {\n            int cur = q.front();\n            q.pop();\n            int next = favorite[cur];\n            depth[next] = max(depth[next], depth[cur]+1);\n            inDegree[next]--;\n            if(inDegree[next]==0)\n                q.push(next);\n        };\n        int longestCycle = 0;\n        int twoCycles = 0;\n        for(int i=0; i<n; i++) {\n            if(inDegree[i]==0)\n                continue;\n            int cur = i;\n            int cycleLength = 0;\n            while(inDegree[cur]!=0) {\n                inDegree[cur] = 0;\n                cycleLength++;\n                cur = favorite[cur];\n            };\n            if(cycleLength==2)\n                twoCycles += depth[i] + depth[favorite[i]];\n            else\n                longestCycle = max(longestCycle, cycleLength);\n        }\n        return max(longestCycle, twoCycles);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-employees-to-be-invited-to-a-meeting","has_notes":false,"flag_type":1}