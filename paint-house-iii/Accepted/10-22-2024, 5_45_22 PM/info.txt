{"id":1430953802,"question_id":1583,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1729644322,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/1430953802/","is_pending":"Not Pending","title":"Paint House III","memory":"13.7 MB","code":"/*\nThere is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n),\n some houses that have been painted last summer should not be painted again.\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\nFor example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].\nGiven an array houses, an m x n matrix cost and an integer target where:\nhouses[i]: is the color of the house i, and 0 if the house is not painted yet.\ncost[i][j]: is the cost of paint the house i with the color j + 1.\nReturn the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. \nIf it is not possible, return -1.\n\n Example 1:\nInput: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.\n\nExample 2:\nInput: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 11\nExplanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11.\n\nExample 3:\nInput: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\nOutput: -1\nExplanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.\n \nConstraints:\nm == houses.length == cost.length\nn == cost[i].length\n1 <= m <= 100\n1 <= n <= 20\n1 <= target <= m\n0 <= houses[i] <= n\n1 <= cost[i][j] <= 104\n*/\nclass Solution {\npublic:\n    int dp[101][101][21]; //the min cost when we paint the first i houses to form j neighborhood and the i-th house is painted with color k.\n    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {\n        //houses[i]: is the color of the house i, and 0 if the house is not painted yet.\n        //cost[i][j]: is the cost of paint the house i with the color j + 1.\n        houses.insert(houses.begin(), 0);\n        cost.insert(cost.begin(), {0});\n        for(int i=0; i<=m; i++) {\n            for(int j=0; j<=target; j++) {\n                for(int k=0; k<=n; k++) {\n                    dp[i][j][k] = INT_MAX/2;\n                }\n            }\n        }\n        if(houses[1] != 0) { //painted before.\n            dp[1][1][ houses[1] ] = 0;\n        } else {\n            for(int k=1; k<=n; k++) {\n                dp[1][1][k] = cost[1][k-1];\n            }\n        }\n\n        for(int i=2; i<=m; i++) {\n            if( houses[i] != 0 ) { //painted before.\n                for(int j=1; j<=target; j++) {\n                    int k = houses[i];\n                    for(int kk=1; kk<=n; kk++) {\n                        if(kk!=k) {\n                            dp[i][j][k] = min(dp[i][j][k], dp[i-1][j-1][kk]);\n                        } else {\n                            dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][kk]);\n                        }\n                    }\n                }\n            } else { //not painted\n                for(int j=1; j<=target; j++) {\n                    for(int k=1; k<=n; k++) {\n                        for(int kk=1; kk<=n; kk++) {\n                            if(kk!=k) {\n                                dp[i][j][k] = min(dp[i][j][k], dp[i-1][j-1][kk]+cost[i][k-1]);\n                            } else {\n                                dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][kk]+cost[i][k-1]);\n                            }\n                        }\n                    }  \n                }              \n            }\n        }\n        int ret = INT_MAX/2;\n        for(int k=1; k<=n; k++)\n            ret = min(ret, dp[m][target][k]);\n        if(ret == INT_MAX/2)\n            return -1;\n        else\n            return ret;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"paint-house-iii","has_notes":false,"flag_type":1}