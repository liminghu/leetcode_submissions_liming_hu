{"id":1308798300,"question_id":547,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1720051530,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1308798300/","is_pending":"Not Pending","title":"Number of Provinces","memory":"18.3 MB","code":"class UnionFindSet {\npublic:\n    UnionFindSet(int n) {\n        parents_ = vector<int>(n + 1, 0);\n        ranks_ = vector<int>(n + 1, 0);\n        \n        for (int i = 0; i < parents_.size(); ++i)\n            parents_[i] = i;\n    }\n    \n    bool Union(int u, int v) {\n        int pu = Find(u);\n        int pv = Find(v);\n        if (pu == pv) return false;\n        \n        if (ranks_[pu] > ranks_[pv]) {\n            parents_[pv] = pu;\n        } else if (ranks_[pv] > ranks_[pu]) {\n            parents_[pu] = pv;\n        } else {\n            parents_[pu] = pv;\n            ++ranks_[pv];\n        }\n \n        return true;\n    }\n    \n    int Find(int id) {        \n        if (id != parents_[id])\n            parents_[id] = Find(parents_[id]);       //compress the path. \n        return parents_[id];\n    }\n    \nprivate:\n    vector<int> parents_;\n    vector<int> ranks_;\n};\n\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& isConnected) {\n       int n = isConnected.size();\n        UnionFindSet s(n);\n        for (int i = 0; i < n; ++i)\n            for (int j = i + 1; j < n; ++j)\n                if (isConnected[i][j] == 1) s.Union(i, j);\n        \n        unordered_set<int> circles;\n        for (int i = 0; i < n; ++i)\n            circles.insert(s.Find(i));\n        \n        return circles.size();        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}