{"id":1490273717,"question_id":689,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1735353660,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1490273717/","is_pending":"Not Pending","title":"Maximum Sum of 3 Non-Overlapping Subarrays","memory":"27.5 MB","code":"class Solution {\npublic:\n    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> preSum(n, 0);\n        for(int i=0; i<n; i++) \n            preSum[i] = ( i==0? 0: preSum[i-1] ) + nums[i];\n        vector<int> leftMax(n, 0);\n        vector<int> leftIdx(n, 0);\n        int maxSum = 0;\n        int maxIdx = 0;\n        for(int i=k-1; i<n; i++) {\n            //[i-k+1, i]\n            int sum = preSum[i] - (i<k?0:preSum[i-k]);\n            if( sum > maxSum ) {\n                maxSum = sum;\n                maxIdx = i-k+1;\n            }\n            leftMax[i] = maxSum;\n            leftIdx[i] = maxIdx;\n        };\n        vector<int> rightMax(n, 0);\n        vector<int> rightIdx(n, 0);\n        maxSum = 0;\n        maxIdx = 0;\n        for(int i=n-k; i>=0; i--) {\n            //[i, i+k-1]\n            int sum = preSum[i+k-1] - (i==0?0:preSum[i-1]);\n            if( sum >= maxSum ) {\n                maxSum = sum;\n                maxIdx = i;\n            }\n            rightMax[i] = maxSum;\n            rightIdx[i] = maxIdx;\n        };      \n        vector<int> idx;\n        int ret = 0;\n        for(int i=k; i+2*k<=n; i++) {\n            //[i, i+k-1]\n            int sum = preSum[i+k-1] - preSum[i-1];\n            if(sum+leftMax[i-1]+rightMax[i+k] > ret) {\n                ret = sum + leftMax[i-1] + rightMax[i+k];\n                idx = {leftIdx[i-1], i, rightIdx[i+k]};\n            }\n        } \n        return idx; \n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-3-non-overlapping-subarrays","has_notes":false,"flag_type":1}