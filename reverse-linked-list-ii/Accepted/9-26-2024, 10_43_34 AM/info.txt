{"id":1403187252,"question_id":92,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727372614,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1403187252/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"10.3 MB","code":"/*\nGiven the head of a singly linked list and two integers left and right where \nleft <= right, reverse the nodes of the list from position left to position right, \nand return the reversed list.\nThe number of nodes in the list is n.\n1 <= n <= 500\n-500 <= Node.val <= 500\n1 <= left <= right <= n\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if(head == NULL || head->next == NULL)\n            return head;\n        if(left == right)\n            return head;\n        ListNode* leftNode = head;\n        ListNode* rightNode = head;\n        int count = 1;\n        ListNode* preleft = NULL;\n        while(count < left && leftNode) {\n            count++;\n            preleft = leftNode;\n            leftNode = leftNode->next;\n        }\n        if(count < left)\n            return head;\n        count = 1;\n       while(count < right && rightNode) {\n            count++;\n            rightNode = rightNode->next;\n        }\n        if(count < right)\n            return head;\n        ListNode* afterright = rightNode->next;\n\n        rightNode->next = NULL; //break the link.\n        \n        //reverse left to right.\n        ListNode* last = NULL;\n        ListNode* cur = leftNode;\n        ListNode* nxt;\n        while(cur) {\n            nxt = cur->next;\n            cur->next = last;\n            last = cur;\n            cur = nxt;\n        }\n        //return last.\n        if(preleft == NULL)\n            head = last;\n        else\n            preleft->next = last;\n\n        cur = head;\n        while(cur->next)\n            cur = cur->next;\n        cur->next = afterright;\n        return head;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1}