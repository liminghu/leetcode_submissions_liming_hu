{"id":1411980783,"question_id":119,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728075523,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1411980783/","is_pending":"Not Pending","title":"Pascal's Triangle II","memory":"N/A","code":"/*\nGiven an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\nExample 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]\n\nExample 2:\nInput: rowIndex = 0\nOutput: [1]\n\nExample 3:\nInput: rowIndex = 1\nOutput: [1,1]\n \n\nConstraints:\n0 <= rowIndex <= 33\n \nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\n*/\nclass Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n        if(rowIndex == 0)\n            return {1};\n        if(rowIndex == 1 )\n            return {1,1};\n        if(rowIndex == 2 )\n            return {1,2,1};\n        //2, 3, 4...\n        vector<int> aboveRow = getRow(rowIndex-1);   //size: rowIndex.\n        //need to add 1.\n        for(int i=1; i<(rowIndex+1)/2; i++) {\n            int first = aboveRow[i-1];  //1    1,2,1           \n            int second = aboveRow[i];   //2\n            //int third = aboveRow[i+1];\n            aboveRow[i] = first + second; //3\n            aboveRow[rowIndex-1-(i-1)] = aboveRow[i];\n        }\n        aboveRow.push_back(1);\n        return aboveRow;\n    }\n};","compare_result":"1111000000000000000000000000000000","title_slug":"pascals-triangle-ii","has_notes":false,"flag_type":1}