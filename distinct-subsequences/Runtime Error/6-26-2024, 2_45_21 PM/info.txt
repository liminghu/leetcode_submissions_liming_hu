{"id":1301334557,"question_id":115,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719438321,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1301334557/","is_pending":"Not Pending","title":"Distinct Subsequences","memory":"N/A","code":"class Solution {\npublic:\n/*\nGiven two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n*/\n    int numDistinct(string s, string t) { //1 <= s.length, t.length <= 1000; s and t consist of English letters.\n        int sz1 = s.length();\n        int sz2 = t.length();\n        if( sz2 > sz1 )\n            return 0;\n\n        //dp[i][j]：以i-1为结尾的s子序列中出现以j-1为结尾的t的个数为dp[i][j]。\n        vector<vector<long long >> dp(sz1+1, vector<long long>(sz2+1, 0));\n        for(int i=0; i<=sz1; i++)\n            dp[i][0] = 1;\n        for(int j=1; j<=sz2; j++)\n            dp[0][j] = 0;    \n\n        for(int i=1; i<=sz1; i++) {\n            for(int j=1; j<=sz2; j++) {\n                if( s[i-1] == t[j-1] ) {\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1];\n                } else {\n                    dp[i][j] = dp[i-1][j];\n                }\n            }\n        }\n\n        return dp[sz1][sz2];\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111110000","title_slug":"distinct-subsequences","has_notes":false,"flag_type":1}