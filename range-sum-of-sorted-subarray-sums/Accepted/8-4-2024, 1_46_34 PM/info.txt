{"id":1344693401,"question_id":1615,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1722804394,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/1344693401/","is_pending":"Not Pending","title":"Range Sum of Sorted Subarray Sums","memory":"27.2 MB","code":"/*\nYou are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array \nand then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer \ncan be a huge number return it modulo 109 + 7.\n*/\nclass Solution {\npublic:\n    int rangeSum(vector<int>& nums, int n, int left, int right) {\n        /*  n == nums.length\n            1 <= nums.length <= 1000\n            1 <= nums[i] <= 100\n            1 <= left <= right <= n * (n + 1) / 2\n        */\n        vector<int> sum; //(n*(n+1)/2, 0);\n        for(int i=0; i<n; i++) {\n            int s = 0;\n            for(int j=i; j<n; j++) {\n                s += nums[j];\n                sum.push_back(s);\n            }\n        }\n        sort(sum.begin(), sum.end());\n\n        int res = 0;\n        for(int i=left-1; i<=right-1; i++) {\n            res = (res+sum[i]) % (1000000007);\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"range-sum-of-sorted-subarray-sums","has_notes":false,"flag_type":1}