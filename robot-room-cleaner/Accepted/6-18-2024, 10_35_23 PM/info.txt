{"id":1293149363,"question_id":865,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718775323,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1293149363/","is_pending":"Not Pending","title":"Robot Room Cleaner","memory":"12.6 MB","code":"/**\n * // This is the robot's control interface.\n * // You should not implement it, or speculate about its implementation\n * class Robot {\n *   public:\n *     // Returns true if the cell in front is open and robot moves into the cell.\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\n *     bool move();\n *\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\n *     // Each turn will be 90 degrees.\n *     void turnLeft();\n *     void turnRight();\n *\n *     // Clean the current cell.\n *     void clean();\n * };\n */\n\nclass Solution {\nprivate:\n    vector<vector<int>> directions = {{-1, 0}, {0,1}, {1,0}, {0, -1}}; //0: up. 1:right  2: down, 3:left\n    unordered_set<string> visited; //pair<int, int>\n    //Robot robot;\npublic:\n    void goBack(Robot& robot) { //if possible move down one cell.\n        robot.turnRight();\n        robot.turnRight();\n        robot.move();\n        robot.turnRight();\n        robot.turnRight();\n        \n    }\n    void backtrack(int row, int col, int d, Robot& robot) { \n        string key = to_string(row) + '-' + to_string(col);\n        visited.insert(key); //visited.\n        robot.clean();\n        // going clockwise : 0: 'up', 1: 'right', 2: 'down', 3: 'left'\n        for(int i=0; i<4; i++) { //the order is important since the idea is always to turn right\n            int newD = (d+i) %4;\n            int newRow = row + directions[newD][0];\n            int newCol = col + directions[newD][1];\n            string new_key = to_string(newRow) + '-' + to_string(newCol);\n            if((visited.find(new_key)==visited.end()) && robot.move() ) { //not visited and can move.\n                backtrack(newRow, newCol, newD, robot);\n                goBack(robot);\n            }\n            robot.turnRight();\n        };\n    }\n\n    void cleanRoom(Robot& robot) { //backtracking. 1 represents an empty slot.\n        //this->robot = robot;\n        backtrack(0, 0, 0, robot); //row:0, col: 0, dir: 0, up\n    }\n};","compare_result":"11111111111111111111111111111","title_slug":"robot-room-cleaner","has_notes":false,"flag_type":1}