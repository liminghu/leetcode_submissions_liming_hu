{"id":1402130669,"question_id":61,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727286744,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1402130669/","is_pending":"Not Pending","title":"Rotate List","memory":"16.6 MB","code":"//Given the head of a linked list, rotate the list to the right by k places.\n/*\nThe number of nodes in the list is in the range [0, 500].\n-100 <= Node.val <= 100\n0 <= k <= 2 * 109\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if( k == 0)\n            return head;\n        if(head == NULL || head->next == NULL)\n            return head;\n\n        ListNode* tail = head;\n        int nodecount = 1;\n        while( tail->next ) {\n            nodecount++;\n            tail = tail->next;\n        };\n        //cout << \"nodecount: \" << nodecount << endl;\n        tail->next = head;\n        k = k % nodecount;\n        while( k > 0 ) {\n            k--;\n            head = tail;\n            int j=1;\n            while(j<nodecount) { \n                tail = tail->next;\n                j++;\n            }\n        };\n        tail->next = NULL;\n        return head;    \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}