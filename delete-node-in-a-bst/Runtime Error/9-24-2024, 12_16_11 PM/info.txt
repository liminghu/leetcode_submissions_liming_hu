{"id":1401119018,"question_id":450,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727205371,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1401119018/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/*\nGiven a root node reference of a BST and a key, delete the node with the given key in the BST. \nReturn the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:\nSearch for a node to remove.\nIf the node is found, delete the node.\nConstraints:\nThe number of nodes in the tree is in the range [0, 104].\n-105 <= Node.val <= 105\nEach node has a unique value.\nroot is a valid binary search tree.\n-105 <= key <= 105\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        //find node\n        TreeNode* node = findNode(root, key);\n        TreeNode* newroot;\n        if(node) { // //delete node\n            newroot = deletenode(root, node);\n            return newroot;\n        } else \n            return root;\n    }\n    TreeNode* findNode(TreeNode* root, int key) {\n        if(root==NULL)\n            return root;\n        if(root->val ==key)\n            return root;\n        if(root->val < key)\n            return findNode(root->right, key);\n        else\n            return findNode(root->left, key);\n    }\n\n    TreeNode* deletenode(TreeNode* root, TreeNode* node) {\n        if(root->val == node->val) {\n            //delete root\n            TreeNode* left = root->left;\n            TreeNode* right = root->right;\n            TreeNode* newroot = right;\n            while(right && right->left) {\n                right = right->left;\n            };\n            right->left = left;\n            return newroot;\n        } else if(root->val < node->val) {\n            TreeNode* right = deletenode(root->right, node);\n            root->right = right;\n        } else {\n            TreeNode* left = deletenode(root->left, node);\n            root->left = left;\n        }\n        return root;\n    }\n};","compare_result":"11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}