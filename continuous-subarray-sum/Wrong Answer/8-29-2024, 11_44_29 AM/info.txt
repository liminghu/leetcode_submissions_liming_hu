{"id":1372546626,"question_id":523,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724957069,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1372546626/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"N/A","code":"/*\nGiven an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\nits length is at least two, and\nthe sum of the elements of the subarray is a multiple of k.\nNote that:\nA subarray is a contiguous part of the array.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n*/\nclass Solution {\npublic:\n    bool checkSubarraySum(vector<int>& nums, int k) {\n        /*  1 <= nums.length <= 105\n            0 <= nums[i] <= 109\n            0 <= sum(nums[i]) <= 231 - 1\n            1 <= k <= 231 - 1\n        */\n        vector<int> prefixSum(nums.size()+1, 0);\n        unordered_map<int, int> mp;\n        \n        prefixSum[0] = 0;\n        mp[ 0 % k ] = 1;\n        \n        prefixSum[1] = nums[0] % k;\n        mp[ nums[0] % k ] = 1;\n        //cout << nums[0] % k << endl;\n        //cout << prefixSum[1] << endl;\n        //cout << 0 <<  \" prefixSum[i+1]%k= \" << prefixSum[0+1] << endl;\n        for(int i=1; i<nums.size(); i++) {\n            if(nums[i] != 0 ) {\n                prefixSum[i+1] = ( prefixSum[i] + nums[i] ) % k;\n                cout << i<<  \" prefixSum[i+1]%k= \" << prefixSum[i+1] << endl;\n                if( mp.find(prefixSum[i+1]) != mp.end() )\n                    return true;\n                else\n                    mp[prefixSum[i+1]] = 1;\n            } else {\n                prefixSum[i+1] = prefixSum[i];\n            }\n        };\n        return false;\n    }\n};","compare_result":"11111101011111001110011011111111111110111111111111111111111111111111111111001111111111111111111111101","title_slug":"continuous-subarray-sum","has_notes":false,"flag_type":1}