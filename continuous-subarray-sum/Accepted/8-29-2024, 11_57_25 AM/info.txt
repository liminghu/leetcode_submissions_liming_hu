{"id":1372558658,"question_id":523,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724957845,"status":10,"status_display":"Accepted","runtime":"202 ms","url":"/submissions/detail/1372558658/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"146.3 MB","code":"/*\nGiven an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\nits length is at least two, and\nthe sum of the elements of the subarray is a multiple of k.\nNote that:\nA subarray is a contiguous part of the array.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n*/\nclass Solution {\npublic:\n    bool checkSubarraySum(vector<int>& nums, int k) {\n        /*  1 <= nums.length <= 105\n            0 <= nums[i] <= 109\n            0 <= sum(nums[i]) <= 231 - 1\n            1 <= k <= 231 - 1\n        */\n        int prefixMod = 0;\n        unordered_map<int, int> mp;\n        mp[0] = -1;\n        for(int i=0; i<nums.size(); i++) {\n            prefixMod = (prefixMod + nums[i]) % k;\n            if(mp.find(prefixMod)!=mp.end()) {\n                if(i-mp[prefixMod] > 1) \n                    return true;\n            } else \n                mp[prefixMod] = i;\n        };\n        return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"continuous-subarray-sum","has_notes":false,"flag_type":1}