{"id":1445391943,"question_id":352,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730953235,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1445391943/","is_pending":"Not Pending","title":"Data Stream as Disjoint Intervals","memory":"9.4 MB","code":"class SummaryRanges {\nprivate:\n    map<int, int> intervals; //start, end, sorted according to start.\npublic:\n    SummaryRanges() {       \n    }\n    \n    void addNum(int value) {\n        int left = value; //default.\n        int right = value;\n        //Returns an iterator pointing to the first element in the range [first,last) which compares greater than val.\n        auto small_entry = intervals.upper_bound(value); //small_entry.first > value\n        \n        if(small_entry != intervals.begin() ) {\n            auto max_entry = small_entry;\n            max_entry--; //max_entry.first <= value\n            if( max_entry->second >= value ) //already in the set.\n                return;\n            if(max_entry->second == value - 1)\n                left = max_entry->first;   //merge.\n        }\n        if(small_entry != intervals.end() && small_entry->first == value + 1) {//small_entry.first > value\n            right = small_entry->second; //merge \n            intervals.erase(small_entry);\n        };\n        intervals[left] = right;\n\n    }\n    \n    vector<vector<int>> getIntervals() {\n        vector<vector<int>> rets;\n        for(auto p: intervals)\n            rets.push_back({p.first, p.second});\n        return rets;\n    }\n};\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges* obj = new SummaryRanges();\n * obj->addNum(value);\n * vector<vector<int>> param_2 = obj->getIntervals();\n */","compare_result":"1111111","title_slug":"data-stream-as-disjoint-intervals","has_notes":false,"flag_type":1}