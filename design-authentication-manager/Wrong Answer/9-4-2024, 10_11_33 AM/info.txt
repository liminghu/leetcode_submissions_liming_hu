{"id":1379049100,"question_id":1905,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1725469893,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1379049100/","is_pending":"Not Pending","title":"Design Authentication Manager","memory":"N/A","code":"/*\nThere is an authentication system that works with authentication tokens. For each session, \nthe user will receive a new authentication token that will expire timeToLive seconds after the \ncurrentTime. If the token is renewed, the expiry time will be extended to expire timeToLive \nseconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:\nAuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.\ngenerate(string tokenId, int currentTime) generates a new token with the given tokenId at the given\n currentTime in seconds.\nrenew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given\n currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, \n and nothing happens.\ncountUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.\nNote that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), \nthe expiration takes place before the other actions.\n*/\n/*\n1 <= timeToLive <= 108\n1 <= currentTime <= 108\n1 <= tokenId.length <= 5\ntokenId consists only of lowercase letters.\nAll calls to generate will contain unique values of tokenId.\nThe values of currentTime across all the function calls will be strictly increasing.\nAt most 2000 calls will be made to all functions combined.\n*/\nclass AuthenticationManager {\nprivate:\n    int timeToLive_;\n    unordered_map<string, int> mp_; //key, created time.\npublic:\n    AuthenticationManager(int timeToLive) {\n        timeToLive_ = timeToLive;\n        mp_.clear();\n        \n    }\n    \n    void generate(string tokenId, int currentTime) {\n        mp_[tokenId] = currentTime;\n        \n    }\n    \n    void renew(string tokenId, int currentTime) {\n        if(mp_.find(tokenId)!=mp_.end()) {\n            if(currentTime - mp_[tokenId] >= timeToLive_)\n                return;\n        };\n\n        mp_[tokenId] = currentTime;\n    }\n    \n    int countUnexpiredTokens(int currentTime) {\n        int ret = 0;\n        for(auto item:mp_) {\n            if(currentTime-item.second >= timeToLive_)\n                continue;\n            ret++;\n        };\n        return ret;\n    }\n};\n\n/**\n * Your AuthenticationManager object will be instantiated and called as such:\n * AuthenticationManager* obj = new AuthenticationManager(timeToLive);\n * obj->generate(tokenId,currentTime);\n * obj->renew(tokenId,currentTime);\n * int param_3 = obj->countUnexpiredTokens(currentTime);\n */","compare_result":"1101000110100010000011000000000100000100000000000010000000000000000000000000000001111111111","title_slug":"design-authentication-manager","has_notes":false,"flag_type":1}