{"id":1525708224,"question_id":2583,"lang":"cpp","lang_name":"C++","time":"1Â week","timestamp":1738261533,"status":10,"status_display":"Accepted","runtime":"119 ms","url":"/submissions/detail/1525708224/","is_pending":"Not Pending","title":"Divide Nodes Into the Maximum Number of Groups","memory":"60.4 MB","code":"class Solution {\n    vector<int> next[501];\npublic:\n    int magnificentSets(int n, vector<vector<int>>& edges) {\n        for(auto edge: edges) {\n            int a = edge[0], b = edge[1];\n            next[a].push_back(b);\n            next[b].push_back(a);\n        };\n        unordered_map<int, int> mp;\n        for(int start=1; start<=n; start++) {\n            int d = 0;\n            int smallestId = INT_MAX;\n            vector<int> level(501);\n            queue<int> q;\n            q.push(start);\n            level[start] = 1; //use it as visited.\n            while(!q.empty()) {\n                d++;\n                int sz = q.size();\n                for(int j=0; j<sz; j++) {\n                    int cur = q.front();\n                    q.pop();\n                    smallestId = min(smallestId, cur);\n                    for(int nxt: next[cur]) {\n                        if(level[nxt]==0) {\n                            level[nxt] = d+1;\n                            q.push(nxt);\n                        } else if(level[nxt]==d)\n                            return -1;\n                    }\n                }\n            }\n            mp[smallestId] = max(mp[smallestId], d);\n        }\n        int ret = 0;\n        for(auto [k,v]: mp) \n            ret += v; //add all the grps.\n        return ret;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"divide-nodes-into-the-maximum-number-of-groups","has_notes":false,"flag_type":1}