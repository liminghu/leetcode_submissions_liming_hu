{"id":1411859131,"question_id":109,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728065991,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1411859131/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"29.2 MB","code":"/*Given the head of a singly linked list where elements are sorted in ascending order, convert it to a \nheight-balanced\n binary search tree.\n Input: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\nExample 2:\n\nInput: head = []\nOutput: []\n\n Constraints:\nThe number of nodes in head is in the range [0, 2 * 104].\n-105 <= Node.val <= 105\n*/\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        if(head == NULL)\n            return NULL;\n        if(head->next == NULL) {\n            TreeNode* root = new TreeNode(head->val);\n            return root;\n        };\n        //we have at least two nodes.\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = head;\n        while(fast && fast->next) {\n            fast = fast->next->next;\n            prev = slow;\n            slow = slow->next;\n        };\n        //root: slow\n        TreeNode* root = new TreeNode(slow->val);\n        //right = (slow->next, fast)\n        TreeNode* right = sortedListToBST(slow->next);\n        //left = (head, prev)\n        prev->next = NULL; //break the linked list.\n        TreeNode* left = sortedListToBST(head);\n        root->left = left;\n        root->right = right;\n        return root;        \n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}