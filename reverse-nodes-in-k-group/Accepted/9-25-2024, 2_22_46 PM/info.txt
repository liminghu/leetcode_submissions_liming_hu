{"id":1402300040,"question_id":25,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727299366,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1402300040/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"16.5 MB","code":"/*\nGiven the head of a linked list, reverse the nodes of the list k at a time, and return \nthe modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If \nthe number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n*/\n \n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        vector<ListNode*> heads;\n        ListNode* p = head;\n        int flag = 1;\n        while(p) {\n            heads.push_back(p);\n            for(int i=0; i<k-1; i++) {\n                if(p->next)\n                    p = p->next;\n                else\n                    flag = 0; //there is a list has less than k nodes.\n            };\n            \n            ListNode* temp = p->next; //if flag ==0, no next.\n            p->next = NULL; //break the list.\n            p = temp;\n        };\n\n        for(int i=0; i<heads.size(); i++) {\n            if(i==heads.size()-1 && flag == 0)\n                continue;\n            heads[i] = reverseLinkedList(heads[i]);\n        }\n        for(int i=0; i<heads.size()-1; i++) {\n            ListNode* h = heads[i];\n            while(h->next)\n                h = h->next;\n            h->next = heads[i+1];\n        }\n        return heads[0];\n    }\n\n    ListNode* reverseLinkedList(ListNode*  head) {\n        ListNode* last = NULL; //the head of reversed list.\n        ListNode* cur = head;\n        ListNode* nxt;\n        \n        while(cur) { //from head to end, add head to last (as stack.)\n            nxt = cur->next;\n            cur->next = last; //as stack.\n            last = cur; //update last.\n            cur = nxt; //next node.\n        }\n        return last;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group","has_notes":false,"flag_type":1}