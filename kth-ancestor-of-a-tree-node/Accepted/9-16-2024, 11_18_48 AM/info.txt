{"id":1392427165,"question_id":1296,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1726510728,"status":10,"status_display":"Accepted","runtime":"288 ms","url":"/submissions/detail/1392427165/","is_pending":"Not Pending","title":"Kth Ancestor of a Tree Node","memory":"159.9 MB","code":"/*\nYou are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array \nparent where parent[i] is the parent of ith node. The root of the tree is node 0. Find the \nkth ancestor of a given node.\nThe kth ancestor of a tree node is the kth node in the path from that node to the root node.\nImplement the TreeAncestor class:\nTreeAncestor(int n, int[] parent) Initializes the object with the number of nodes in the \ntree and the parent array.\nint getKthAncestor(int node, int k) return the kth ancestor of the given node node. If there\n is no such ancestor, return -1.\n1 <= k <= n <= 5 * 104\nparent.length == n\nparent[0] == -1\n0 <= parent[i] < n for all 0 < i < n\n0 <= node < n\nThere will be at most 5 * 104 queries.\n*/\nclass TreeAncestor {\n    vector<vector<int>> ancester_;\npublic:\n    TreeAncestor(int n, vector<int>& parent) { //parent[i] is the parent of ith node\n       //parent[0] == -1 \n       vector<vector<int>> ancester(n, vector<int>(31, -1)); //ancester[i][j] the 2^j th ancester of node i. maximum: 31th.\n       for(int i=0; i<n; i++)\n            ancester[i][0] = parent[i];\n        for(int j=1; j<31; j++) {\n             for(int i=0; i<n; i++) {\n                int j_1th_anc = ancester[i][j-1];\n                if( j_1th_anc != -1 )\n                    ancester[i][j] = ancester[ j_1th_anc ][ j - 1 ];\n             }\n        } \n        this->ancester_ = ancester;\n    }\n    \n    int getKthAncestor(int node, int k) { //Find the kth ancestor of a given node.\n        for(int j=0; j<31; j++) {\n            if( (k>>j) & 1 ) {\n                node = ancester_[node][j];\n                if(node == -1 )\n                    break;\n            };\n        };\n        return node;\n    }\n};\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor* obj = new TreeAncestor(n, parent);\n * int param_1 = obj->getKthAncestor(node,k);\n */","compare_result":"11111111111111111","title_slug":"kth-ancestor-of-a-tree-node","has_notes":false,"flag_type":1}