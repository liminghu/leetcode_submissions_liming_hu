{"id":389783264,"question_id":145,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599022913,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/389783264/","is_pending":"Not Pending","title":"Binary Tree Postorder Traversal","memory":"10 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if(root==nullptr) return res;\n               \n        vector<int> left = postorderTraversal(root->left);\n        res.insert( res.end(), left.begin(), left.end() );\n        vector<int> right = postorderTraversal(root->right);\n        res.insert( res.end(), right.begin(), right.end() );\n        res.push_back(root->val); \n        \n        /*stack<TreeNode*> st;\n        st.push(root);\n        while (!st.empty()) {\n            TreeNode *n = st.top();\n            st.pop();\n            \n            res.push_back(n->val);\n            \n\n            if (n->left!=nullptr) \n                st.push(n->left);\n            if(n->right!=nullptr) \n                st.push(n->right);\n\n        }*/\n        return res;        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-postorder-traversal","has_notes":false,"flag_type":1}