{"id":1503425160,"question_id":2375,"lang":"cpp","lang_name":"C++","time":"4Â weeks","timestamp":1736457547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1503425160/","is_pending":"Not Pending","title":"Minimum Obstacle Removal to Reach Corner","memory":"N/A","code":"class Solution {\npublic:\n    int minimumObstacles(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        vector<vector<int>> obstacles(m, vector<int>(n, INT_MAX));\n        obstacles[0][0] = 0;\n        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq; //min heap: obstacles, x, y\n        pq.push({obstacles[0][0], 0, 0});\n        while(!pq.empty()) {\n            vector<int> t = pq.top();\n            pq.pop();\n            int obs = t[0], x = t[1], y = t[2];\n            if(x=m-1 && y == n-1)\n                return obs;\n            for(vector<int>& dir: dirs) {\n                int nx = x+dir[0], ny = y+dir[1];\n                if(nx<0 || ny <0 || nx>=m || ny>=n)\n                    continue;\n                int newobs = obs + grid[nx][ny];\n                if(newobs < obstacles[nx][ny]) {\n                    obstacles[nx][ny] = newobs;\n                    pq.push({newobs, nx, ny});\n                }\n            }\n        }\n        return obstacles[m-1][n-1];\n    }\n};","compare_result":"101110100000000000000000000000000000000000011111010000","title_slug":"minimum-obstacle-removal-to-reach-corner","has_notes":false,"flag_type":1}