{"id":1419412176,"question_id":867,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1728681681,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1419412176/","is_pending":"Not Pending","title":"New 21 Game","memory":"12.4 MB","code":"/*\nAlice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number \nof points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10-5 of the actual answer are considered accepted.\n\nExample 1:\nInput: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.\n\nExample 2:\nInput: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.\n\nExample 3:\nInput: n = 21, k = 17, maxPts = 10\nOutput: 0.73278\n \nConstraints:\n0 <= k <= n <= 104\n1 <= maxPts <= 104\n*/\nclass Solution {\npublic:\n    double new21Game(int N, int K, int W) { //Return the probability that Alice has n or fewer points.\n        //Alice starts with 0 points and draws numbers while she has less than k points.\n        //During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. \n        //Each draw is independent and the outcomes have equal probabilities.\n        //Alice stops drawing numbers when she gets k or more points.\n        /*point 0 initially\n        while (point < K) {\n            draw w  from [1, W] randomly \n            point += w\n        }\n        probability(point <= N) ?\n        */\n\n        /*  Before we reach point `i`, we draw `w`, i.e., our last point is `i - w` \n            probability to get i points = sum(probability to get i - w points * 1 / W) for w can be any of [1, W]\n            where 0 <= i - w < K\n        */\n        //target probability = sum of prabability to get points [K, N]\n\n        //corner case\n       /* if(K==0)\n            return 1;\n        int maxPoint = K + W - 1;\n        vector<double> prob(maxPoint+1, 0.0);\n        prob[0] = 1;\n        for(int i=1; i<=maxPoint; i++) {\n            for(int w=1; w<=W; w++) {\n                if(i-w>=0 && i-w < K ) \n                    prob[i] += prob[i-w]*1.0 / W; \n            }\n        }\n\n        double targetProb = 0;\n        for(int i=K; i<=N; i++) \n            targetProb += prob[i];\n        return targetProb;*/\n\n        vector<double> dp(K+W, 0.0);\n        for(int k=K; k<min(N+1, K+W); k++) {\n            dp[k] = 1.0;\n        }\n        double sum = min(N-K+1, W);\n        for(int k= K-1; k>=0; k--) {\n            dp[k] = sum/double(W);\n            sum += dp[k] - dp[k+W];\n        }\n        return dp[0];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"new-21-game","has_notes":false,"flag_type":1}