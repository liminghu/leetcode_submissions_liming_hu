{"id":1445049508,"question_id":333,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730916670,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1445049508/","is_pending":"Not Pending","title":"Largest BST Subtree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nclass Solution {\npublic:\n    struct nodeProp {\n        int maxValue; //The maximum value in the subtree\n        int minValue; //The minimum value in the subtree\n        int maxSize;  //Size of the subtree.\n    };\n\n    int largestBSTSubtree(TreeNode* root) {\n        return helper(root).maxSize;\n    }\n    nodeProp helper(TreeNode* root) { //postorder\n        if(root == NULL) { //// An empty tree is a BST of size 0.\n            nodeProp np;\n            np.maxValue = INT_MAX;\n            np.minValue = INT_MIN;\n            np.maxSize = 0;\n            return np;\n        };\n        // Get values from left and right subtree of current tree.\n        nodeProp leftProp = helper(root->left);\n        nodeProp rightProp = helper(root->right);\n        if(leftProp.maxValue < root->val && root->val < rightProp.minValue) { //// Current node is greater than max in left AND smaller than min in right, it is a BST.\n            nodeProp np;\n            np.maxValue = min(root->val, leftProp.minValue);\n            np.minValue = max(root->val, rightProp.maxValue);\n            np.maxSize = leftProp.maxSize + rightProp.maxSize + 1;\n            return np;            \n        }\n        nodeProp np;\n        np.maxValue = INT_MIN;\n        np.minValue = INT_MAX;\n        np.maxSize = max(leftProp.maxSize, rightProp.maxSize);\n        return np;            \n    }\n};","compare_result":"0110000100000000100000000010001011101101110100100001001101101001000000000","title_slug":"largest-bst-subtree","has_notes":false,"flag_type":1}