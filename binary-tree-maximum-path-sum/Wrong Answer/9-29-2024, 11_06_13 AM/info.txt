{"id":1406352846,"question_id":124,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727633173,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1406352846/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/*\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an \nedge connecting them. A node can only appear in the sequence at most once. Note that the path does not \nneed to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        int left  = maxPathSum(root->left);\n        int right = maxPathSum(root->right);\n        int res = 0;\n        res = max( res, left );\n        res = max( res, left+root->val);\n        res = max( res, left+root->val+right );\n        res = max( res, root->val);\n        res = max( res, root->val+right);\n        res = max( res, right);\n        return res;\n    }\n};","compare_result":"111101110011110111000011001111111111111101000010111101000100000001000110110010010000000000000010","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}