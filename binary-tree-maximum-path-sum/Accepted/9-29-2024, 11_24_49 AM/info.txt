{"id":1406371897,"question_id":124,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727634289,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1406371897/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"26.5 MB","code":"/*\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an \nedge connecting them. A node can only appear in the sequence at most once. Note that the path does not \nneed to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\npublic:\n    int max_sum = INT_MIN;\n    int maxPathSum(TreeNode* root) {\n        max_sum = INT_MIN;\n        maxgain(root);\n        return max_sum;\n    }\n    int maxgain(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        int gainleft = maxgain(root->left);\n        int gainright = maxgain(root->right);\n        gainleft  = max(gainleft, 0);\n        gainright = max(gainright, 0);\n        max_sum = max(max_sum, gainleft + gainright + root->val);\n        return max(gainleft + root->val, gainright + root->val);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}