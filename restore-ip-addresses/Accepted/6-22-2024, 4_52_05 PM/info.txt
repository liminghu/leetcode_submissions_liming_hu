{"id":1297164127,"question_id":93,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719100325,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1297164127/","is_pending":"Not Pending","title":"Restore IP Addresses","memory":"10 MB","code":"class Solution {\npublic:\n//Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. \n//You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n    vector<string> ans = {};\n    vector<string> path = {};//if we use global variables, it can run fastest.\n    int len = 0;\n    vector<string> restoreIpAddresses(string s) {\n        len = s.length();\n        if(len < 4 || len > 12) //edge cases.\n            return ans;\n        backtrack(s, 0, 4);  //0: start. 4: residue.\n\n        return ans;\n    }\n\n    void  backtrack(string s, int start, int residue) {\n        if(start == len && residue == 0) {  //to the end of the string. and we got 4 segments.\n            //path to IP addr.\n            string ip = path[0]+'.'+path[1]+'.'+path[2]+'.'+path[3];\n            ans.push_back(ip);\n            return;\n        };\n\n        for(int i=start; i<start+3; i++) { //start from the current string pos.and got max 3 chars.\n            if( i >= len) //exceed the end of the string.\n                break;\n            if( residue * 3 < len - i ) //3*3 < residual string length : prune.    \n                continue;\n            if(isIpSegment(s,start, i)) { //is a valid number?\n                string curSeg = s.substr(start, i+1-start);\n                path.push_back(curSeg);\n                backtrack(s, i+1, residue-1); //got to next char. and segments -1.\n                path.pop_back();\n            }\n        }\n\n    };\n    bool isIpSegment(string s,int start, int end) {\n        if( end-start+1 > 1 && s[start] == '0' ) //if first char is 0.\n            return false;        \n\n        int num = 0;\n        for(int i=start; i<=end; i++) {\n            num= num*10+s[i]-'0';\n        }\n        return num>=0 && num<=255;\n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"restore-ip-addresses","has_notes":false,"flag_type":1}