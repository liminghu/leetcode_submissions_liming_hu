{"id":1351412594,"question_id":2884,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1723328124,"status":10,"status_display":"Accepted","runtime":"1827 ms","url":"/submissions/detail/1351412594/","is_pending":"Not Pending","title":"Length of the Longest Valid Substring","memory":"484.2 MB","code":"/*You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\n*/\nusing LL = long long;\nclass Solution {\npublic:\n    unordered_set<LL> st;\n    unordered_map<int, vector<int>> mp;  //int: left bound. vector<int>: right bound. sorted from left to right.\n\n    int longestValidSubstring(string word, vector<string>& forbidden) {\n        /*  1 <= word.length <= 105\n            word consists only of lowercase English letters.\n            1 <= forbidden.length <= 105\n            1 <= forbidden[i].length <= 10\n            forbidden[i] consists only of lowercase English letters.\n            */\n\n            //encode all the forbidden strings.\n            for(auto& s: forbidden) {\n                LL code = 0;\n                for(auto ch:s) { //1 <= forbidden[i].length <= 10\n                    code = (code << 5) + (ch -'a') + 1; //must start from 1, otherwise we can not tell 'aaa' from 'a'.\n                }\n                st.insert(code);                \n            }\n\n            //sliding window.\n            for(int len = 1; len<=10; len++)\n                slide(word, len);\n\n            int w_sz = word.length();\n            int rightBound = w_sz;\n            int ret = 0;\n            for(int i=w_sz-1; i>=0; i--) {  //from right to left.\n                if(mp.find(i) != mp.end()) { //i as the left bound.\n                    for(int j: mp[i]) //j as the right bound.\n                        rightBound = min(rightBound, j);\n                }\n                ret = max(ret, rightBound-i); //j-i\n            }\n            return ret;\n    }\n\n    void slide(string word, int len) { //brute force: len: 1~10.\n        int sz = word.length();\n        LL code = 0;\n        //check all the sliding window start from i for window size: len.\n        for(int i=0; i<sz; i++) {\n            if( i >= len ) //just keep the code length until len-1.\n                code = code & ( ( 1ll << ( 5*(len-1) ) ) - 1 );    \n            code = (code << 5) + word[i] - 'a' + 1; //final code length len, until i.\n\n            if( i >= len-1 && st.find(code) != st.end() ) //only when i>=len-1, we can have len forbidden string.  \n                mp[ i- len + 1 ].push_back( i );  //[i-len+1, i], length: len.\n        }\n    }\n};","compare_resulttitle_slug":"length-of-the-longest-valid-substring","has_notes":false,"flag_type":1}