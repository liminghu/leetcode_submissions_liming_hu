{"id":1445223204,"question_id":337,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730933857,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1445223204/","is_pending":"Not Pending","title":"House Robber III","memory":"21 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) { //level \n        pair<int, int> ret = helper(root);\n        return max(ret.first, ret.second);\n    };\n    pair<int, int> helper(TreeNode* root) {\n        if(root == NULL) {\n            return {0, 0};  //{rob this node, not rob this node};\n        }\n        pair<int, int> left = helper(root->left);\n        pair<int, int> right = helper(root->right);\n        //if we rob this node, we can not rob its children.\n        int rob = root->val + left.second + right.second;\n        //else we free to choose rob its children or not.\n        int notRob = max(left.first, left.second) + max(right.first, right.second);\n        return {rob, notRob};\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}