{"id":1445217801,"question_id":337,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1730933121,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1445217801/","is_pending":"Not Pending","title":"House Robber III","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) { //level \n        if(root == NULL) \n            return 0;\n        int res1 = 0, res2 = 0;\n        queue<TreeNode*> q;\n        q.push(root);\n        bool first_turn = true;\n        while(!q.empty()) {\n            int sz = q.size();\n            for(int i=0; i<sz; i++) {\n                TreeNode* f = q.front();\n                q.pop();\n                if(first_turn)\n                    res1 += f->val;\n                else\n                    res2 += f->val;\n                if(f->left)\n                    q.push(f->left);\n                if(f->right)\n                    q.push(f->right);\n            }\n            first_turn = !first_turn;\n        };\n        return max(res1, res2);\n    }\n};","compare_result":"1111111111101101110111101111111101110111111111011111110110111111111001010000000000000000000000000000000000000000000000000000","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}