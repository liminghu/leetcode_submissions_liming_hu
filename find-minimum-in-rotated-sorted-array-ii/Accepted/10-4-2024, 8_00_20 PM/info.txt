{"id":1412142771,"question_id":154,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728097220,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1412142771/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array II","memory":"15 MB","code":"/*Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\n\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n\nYou must decrease the overall operation steps as much as possible.\n\n \n\nExample 1:\n\nInput: nums = [1,3,5]\nOutput: 1\nExample 2:\n\nInput: nums = [2,2,2,0,1]\nOutput: 0\n \n\nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nnums is sorted and rotated between 1 and n times.\n \n\nFollow up: This problem is similar to Find Minimum in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?\n\n*/\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {        \n        int left=0, right= nums.size()-1;\n        while(left<right) {\n            int mid = (left+right)/2;\n            if(nums[mid] < nums[right]) {\n                right = mid;\n            } else if(nums[mid] > nums[right]) {\n                left = mid+1;\n            } else //nums[mid] == nums[right]\n                right--;\n        };\n        return nums[left];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1}