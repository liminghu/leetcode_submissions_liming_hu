{"id":1275786624,"question_id":1586,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1717374268,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1275786624/","is_pending":"Not Pending","title":"Longest Subarray of 1's After Deleting One Element","memory":"58.6 MB","code":"class Solution {\npublic:\n    int longestSubarray(vector<int>& nums) { //longest subarray contains at most one 0.\n        //Maintain a sliding window where there is at most one zero on it.\n    \n        //int number of zero's in the window\n        int zeroCount = 0;\n        int longestWindow =0;\n        //left of the window\n        int start = 0;\n        \n        for(int i=0; i<nums.size(); i++) {\n            zeroCount += (nums[i]==0);\n\n            //shrink the window until the zero counts under the limit\n            while(zeroCount>1) {\n                zeroCount -= (nums[start]==0);\n                start++;\n            }\n            longestWindow = max(longestWindow, i-start);\n        } \n\n        return longestWindow;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"flag_type":1}