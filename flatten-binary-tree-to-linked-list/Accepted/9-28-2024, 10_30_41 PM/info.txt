{"id":1405755211,"question_id":114,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727587841,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1405755211/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"16.8 MB","code":"/*\nGiven the root of a binary tree, flatten the tree into a \"linked list\":\n\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next \nnode in the list and the left child pointer is always null.\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\nConstraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\n Follow up: Can you flatten the tree in-place (with O(1) extra space)?\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        if(root == NULL)\n            return;\n\n        flatten(root->left);\n        flatten(root->right);\n        \n        TreeNode* temp = root->right;\n        root->right = root->left;\n        root->left = NULL;\n\n        TreeNode* right_end = root;\n        while(right_end->right)\n            right_end = right_end->right;\n        right_end->right = temp;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}