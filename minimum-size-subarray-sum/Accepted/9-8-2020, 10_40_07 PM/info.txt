{"id":393143126,"question_id":209,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599630007,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/393143126/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"10.7 MB","code":"class Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        //two pointers.\n\t\t//Maintain a sliding window [l, r) such that sum(nums[l:r)) >= s, then move l to l + 1, and move r accordingly\n\t\t//to make the window valid.\n\n\t\t//Time complexity: O(n)\n\t\t//Space complexity: O(1)\n\t\tint l = 0;\n\t\tint r = 0;\n\t\tint t = 0;\n\t\tint ans = INT_MAX;\n\t\t\n\t\twhile(l < nums.size() ) {\n\t\t\twhile( t < s && r < nums.size()) {\n\t\t\t\tt += nums[r];\n\t\t\t\tr++;\n\t\t\t};\n\t\t\tif(t < s) \n\t\t\t\tbreak;\n\t\t\tans = min( ans, r-l);\n\t\t\tt -= nums[l];\n\t\t\tl++;\n\t\t};\n\t\treturn ans == INT_MAX? 0 : ans;\n\t\t\t\n    }\n};","compare_result":"111111111111111","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1}