{"id":1300172234,"question_id":368,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719341900,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1300172234/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"N/A","code":"class Solution {\npublic:\n/*\nGiven a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\nanswer[i] % answer[j] == 0, or\nanswer[j] % answer[i] == 0\nIf there are multiple solutions, return any of them.\n*/\n    vector<int> largestDivisibleSubset(vector<int>& nums) {//1 <= nums.length <= 1000; 1 <= nums[i] <= 2 * 109; All the integers in nums are unique.\n        sort(nums.begin(), nums.end());\n        int sz = nums.size();\n\n        if(sz == 1)\n            return nums;\n\n        vector<int> dp(sz, 1);\n        vector<vector<int>> max_subset(sz, vector<int>());\n        max_subset[0] = {nums[0]};\n        for(int i=1; i<sz; i++) {\n            for(int j=0; j<i; j++) {\n                if(nums[i]%nums[j]==0) {\n                    dp[i] = max(dp[i], dp[j]+1);\n                    max_subset[i] = max_subset[j];\n                    max_subset[i].push_back(nums[i]);\n                }\n            }\n        }\n\n        int max_length = 0;\n        int index = 0;\n        for(int i=0; i<sz; i++) {\n            if(dp[i]> max_length) {\n                index = i;\n                max_length = dp[i];\n            };\n        }\n\n        return max_subset[index];\n         \n    }\n};","compare_result":"1111111110101011000110111000101111111111011111111","title_slug":"largest-divisible-subset","has_notes":false,"flag_type":1}