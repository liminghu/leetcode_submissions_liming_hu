{"id":1419536364,"question_id":1144,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1728700413,"status":10,"status_display":"Accepted","runtime":"137 ms","url":"/submissions/detail/1419536364/","is_pending":"Not Pending","title":"Optimize Water Distribution in a Village","memory":"53.6 MB","code":"/*\nThere are n houses in a village. We want to supply water for all the houses by building wells and laying pipes.\nFor each house i, we can either build a well inside it directly with cost wells[i - 1] (note the -1 due to 0-indexing), \nor pipe in water from another well to it. The costs to lay pipes between houses are given by the array pipes where each \npipes[j] = [house1j, house2j, costj] represents the cost to connect house1j and house2j together using a pipe. \nConnections are bidirectional, and there could be multiple valid connections between the same two houses with different costs.\n\nReturn the minimum total cost to supply water to all houses.\nExample 1:\nInput: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]\nOutput: 3\nExplanation: The image shows the costs of connecting houses using pipes.\nThe best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.\n\nExample 2:\nInput: n = 2, wells = [1,1], pipes = [[1,2,1],[1,2,2]]\nOutput: 2\nExplanation: We can supply water with cost two using one of the three options:\nOption 1:\n  - Build a well inside house 1 with cost 1.\n  - Build a well inside house 2 with cost 1.\nThe total cost will be 2.\nOption 2:\n  - Build a well inside house 1 with cost 1.\n  - Connect house 2 with house 1 with cost 1.\nThe total cost will be 2.\nOption 3:\n  - Build a well inside house 2 with cost 1.\n  - Connect house 1 with house 2 with cost 1.\nThe total cost will be 2.\nNote that we can connect houses 1 and 2 with cost 1 or with cost 2 but we will always choose the cheapest option. \n \nConstraints:\n2 <= n <= 104\nwells.length == n\n0 <= wells[i] <= 105\n1 <= pipes.length <= 104\npipes[j].length == 3\n1 <= house1j, house2j <= n\n0 <= costj <= 105\nhouse1j != house2j\n*/\n\n class Solution {\n    class DSU {\n        vector<int> size;\n        vector<int> root;\n    public:\n        DSU(int n) {\n            size = vector(n+1, 1);\n            root = vector(n+1, 0);\n            for(int i=1; i<=n; i++)\n                root[i] = i;\n        } \n        int Find(int x) {\n            if(root[x] != x) {\n                root[x] = Find(root[x]); \n            }\n            return root[x];\n        }\n        bool Union(int x, int y) {\n            int rootX = Find(x);\n            int rootY = Find(y);\n            if(rootX == rootY)\n                return false;\n            if(size[rootX] < size[rootY]) {\n                root[rootX] = rootY;\n                size[rootY] += size[rootX];\n            } else {\n                root[rootY] = rootX;\n                size[rootX] += size[rootY];                \n            }\n            return true;\n        }\n    };\npublic:\n    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {//n houses in a village\n        DSU dsu = DSU(n);\n        priority_queue<vector<int>, vector<vector<int>>, greater<>> pq;\n        for(int i=0; i<wells.size(); i++) {\n            pq.push({wells[i], 0, i+1}); //cost, 0, i+1\n        }\n        for(int i=0; i<pipes.size(); i++) {\n            pq.push({pipes[i][2], pipes[i][0], pipes[i][1]});\n        }\n        int res = 0;\n        while(!pq.empty()) {\n            vector<int> t = pq.top();\n            pq.pop();\n            if(dsu.Union(t[1], t[2])) { //if they can be unioned.\n                res += t[0];\n            }\n        }\n        return res;\n    }\n};   \n/*class Solution {\n    class DSU {\n        vector<int> size;\n        vector<int> root;\n    public:\n        DSU(int n) {\n            size = vector(n+1, 1);\n            root = vector(n+1, 0);\n            for(int i=1; i<=n; i++)\n                root[i] = i;\n        } \n        int Find(int x) {\n            if(root[x] != x) {\n                root[x] = Find(root[x]); \n            }\n            return root[x];\n        }\n        bool Union(int x, int y) {\n            int rootX = Find(x);\n            int rootY = Find(y);\n            if(rootX == rootY)\n                return false;\n            if(size[rootX] < size[rootY]) {\n                root[rootX] = rootY;\n                size[rootY] += size[rootX];\n            } else {\n                root[rootY] = rootX;\n                size[rootX] += size[rootY];                \n            }\n            return true;\n        }\n    };\npublic:\n    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {//n houses in a village\n        //cost wells[i - 1] (note the -1 due to 0-indexing), or pipe in water from another well to it. The costs\n        // to lay pipes between houses are given by the array pipes where each pipes[j] = [house1j, house2j, costj] \n        //represents the cost to connect house1j and house2j together using a pipe. Connections are bidirectional, and \n        //there could be multiple valid connections between the same two houses with different costs.\n        //Return the minimum total cost to supply water to all houses.\n        DSU dsu = DSU(n);\n        priority_queue<vector<int>, vector<vector<int>>, greater<>> pq;\n        for(int i=0; i<wells.size(); i++) {\n            pq.push({wells[i], 0, i+1}); //cost, 0, i+1\n        }\n        for(int i=0; i<pipes.size(); i++) {\n            pq.push({pipes[i][2], pipes[i][0], pipes[i][1]});\n        }\n        int res = 0;\n        while(!pq.empty()) {\n            vector<int> t = pq.top();\n            pq.pop();\n            if(dsu.Union(t[1], t[2])) { //if they can be unioned.\n                res += t[0];\n            }\n        }\n        return res;\n    }\n};*/","compare_result":"1111111111111111111111111111111111111111","title_slug":"optimize-water-distribution-in-a-village","has_notes":false,"flag_type":1}