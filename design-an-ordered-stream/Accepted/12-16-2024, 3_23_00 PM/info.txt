{"id":1480645326,"question_id":1775,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1734391380,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1480645326/","is_pending":"Not Pending","title":"Design an Ordered Stream","memory":"90.4 MB","code":"class OrderedStream {\nvector<string> s;\nint ptr = 1;\npublic:\n//n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.\n    OrderedStream(int n) {\n        s.resize(n+1, \"\");\n    };\n    \n    vector<string> insert(int idKey, string value) {\n      s[idKey] = value;\n      vector<string> res;\n      while(ptr<s.size() && !s[ptr].empty())\n            res.push_back(s[ptr++]);\n      return res;        \n    }\n};\n\n/**\n * Your OrderedStream object will be instantiated and called as such:\n * OrderedStream* obj = new OrderedStream(n);\n * vector<string> param_1 = obj->insert(idKey,value);\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-an-ordered-stream","has_notes":false,"flag_type":1}