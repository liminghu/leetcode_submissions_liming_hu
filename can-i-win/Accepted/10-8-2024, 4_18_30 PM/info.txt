{"id":1416392173,"question_id":464,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728429510,"status":10,"status_display":"Accepted","runtime":"627 ms","url":"/submissions/detail/1416392173/","is_pending":"Not Pending","title":"Can I Win","memory":"93.4 MB","code":"/*\nIn the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\nWhat if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n\nExample 1:\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n\nExample 2:\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n\nExample 3:\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n \nConstraints:\n1 <= maxChoosableInteger <= 20\n0 <= desiredTotal <= 300\n*/\nclass Solution {\npublic:\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\n        int sum = maxChoosableInteger * (maxChoosableInteger + 1)/2;\n        if(sum < desiredTotal)\n            return false;\n        if(desiredTotal <= 0)\n            return true;\n        unordered_map<int, bool> mp;\n        long state = 0;\n        return helper(maxChoosableInteger, desiredTotal, state, mp); //0: state: no number chosen.\n    }\n    bool helper(int maxNum, int target, long state, unordered_map<int, bool>& mp) {\n        if( target <= 0 )\n            return false;\n        if(mp.find(state) != mp.end() )\n            return mp[state];\n        \n        for(int i=0; i<maxNum; i++) {\n            if( ( state & ( 1 << i ) ) != 0 ) //this number used before.\n                continue;\n            if(!helper(maxNum, target - (i+1), state | ( 1 << i ), mp) ) {\n                mp[state] = true;\n                return true;\n            }\n\n        }\n        //all lose\n        mp[state] = false;\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"can-i-win","has_notes":false,"flag_type":1}