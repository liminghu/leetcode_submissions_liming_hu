{"id":1437886389,"question_id":244,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1730264328,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1437886389/","is_pending":"Not Pending","title":"Shortest Word Distance II","memory":"25.9 MB","code":"class WordDistance {\nprivate:\n    unordered_map<string, vector<int>> mp;\npublic:\n    WordDistance(vector<string>& wordsDict) {\n        for(int i=0; i<wordsDict.size(); i++)\n            mp[wordsDict[i]].push_back(i);\n    }\n    \n    int shortest(string word1, string word2) {\n        vector<int> idx1Set = mp[word1]; \n        vector<int> idx2Set = mp[word2];\n        int min_dist = INT_MAX;\n        for(int i=0; i<idx1Set.size(); i++) { //this part can be optimized.\n            for(int j=0; j<idx2Set.size(); j++) {\n                min_dist = min(min_dist, abs(idx1Set[i]- idx2Set[j]));\n            }\n        } \n        return min_dist;\n    }\n};\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance* obj = new WordDistance(wordsDict);\n * int param_1 = obj->shortest(word1,word2);\n */","compare_result":"111111111111","title_slug":"shortest-word-distance-ii","has_notes":false,"flag_type":1}