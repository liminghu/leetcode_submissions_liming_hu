{"id":1352471273,"question_id":1691,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1723407743,"status":10,"status_display":"Accepted","runtime":"157 ms","url":"/submissions/detail/1352471273/","is_pending":"Not Pending","title":"Minimum Number of Days to Disconnect Island","memory":"20.4 MB","code":"/*You are given an m x n binary grid grid where 1 represents land and 0 represents water. \nAn island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\nIn one day, we are allowed to change any single land cell (1) into a water cell (0).\nReturn the minimum number of days to disconnect the grid.*/\nclass Solution {\npublic:\n   const vector<vector<int>> DIRECTIONS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    int minDays(vector<vector<int>>& grid) {\n        /*  m == grid.length\n            n == grid[i].length\n            1 <= m, n <= 30\n            grid[i][j] is either 0 or 1\n            */\n        int rows = grid.size();\n        int cols = grid[0].size();\n\n        // Count initial islands\n        int initialIslandCount = countIslands(grid);\n\n        // Already disconnected or no land\n        if (initialIslandCount != 1) {\n            return 0;\n        }\n\n        // Try removing each land cell\n        for (int row = 0; row < rows; row++) {\n            for (int col = 0; col < cols; col++) {\n                if (grid[row][col] == 0) continue;  // Skip water\n\n                // Temporarily change to water\n                grid[row][col] = 0;\n                int newIslandCount = countIslands(grid);\n\n                // Check if disconnected\n                if (newIslandCount != 1) return 1;\n\n                // Revert change\n                grid[row][col] = 1;\n            }\n        }\n\n        return 2;\n/*\n        //check the number of islands.\n        int m = grid.size();\n        int n = grid[0].size();\n       // visited.resize(m, vector<int>(n));\n        int num = numIslands(grid);\n        if(num>1 || num==0)\n            return 0;\n\n        int res = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {   \n                if(grid[i][j]>=1) {\n                    grid[i][j] = 0;\n                    //grid[i][j] neighbors.\n                    // i-1, j\n                    // i+1, j\n                    // i j-1\n                    // i j+1\n                    //if they are land, are they still connected?\n                    num = numIslands(grid);\n                    if(num >= 2 || num == 0)\n                        return 1;\n                    grid[i][j] = 1;\n                } \n            }\n        }\n        return 2;*/\n    }\n\n    int countIslands(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        vector<vector<bool>> visited(rows, vector<bool>(cols, false));\n        int islandCount = 0;\n\n        // Iterate through all cells\n        for (int row = 0; row < rows; row++) {\n            for (int col = 0; col < cols; col++) {\n                // Found new island\n                if (!visited[row][col] && grid[row][col] == 1) {\n                    exploreIsland(grid, row, col, visited);\n                    islandCount++;\n                }\n            }\n        }\n        return islandCount;\n    }\n\n    // Helper method to explore all cells of an island\n    void exploreIsland(vector<vector<int>>& grid, int row, int col,\n                       vector<vector<bool>>& visited) {\n        visited[row][col] = true;\n\n        // Check all adjacent cells\n        for (const auto& direction : DIRECTIONS) {\n            int newRow = row + direction[0];\n            int newCol = col + direction[1];\n            // Explore if valid land cell\n            if (isValidLandCell(grid, newRow, newCol, visited)) {\n                exploreIsland(grid, newRow, newCol, visited);\n            }\n        }\n    }\n\n    bool isValidLandCell(const vector<vector<int>>& grid, int row, int col,\n                         const vector<vector<bool>>& visited) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        // Check bounds, land, and not visited\n        return row >= 0 && col >= 0 && row < rows && col < cols &&\n               grid[row][col] == 1 && !visited[row][col];\n    }\n\n    int numIslands(vector<vector<int>>& grid) {\n        /*  m == grid.length\n            n == grid[i].length\n            1 <= m, n <= 30\n            grid[i][j] is either 0 or 1\n            */\n\n        //check the number of islands.\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> visited(m, vector<int>(n,0));\n\n        int num = 0;\n        queue<pair<int,int>> q;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(grid[i][j]==1 && !visited[i][j]) {\n                    q.push(pair{i,j});\n                    num++;\n                }\n                while(!q.empty()) {\n                    pair<int,int> cur = q.front();\n                    int x = cur.first;\n                    int y = cur.second;                    \n                    q.pop();\n                    visited[x][y] = num;\n                    //four neighbors.\n                    if(x-1>=0 && !visited[x-1][y] && grid[x-1][y]==1)\n                        q.push(pair{x-1, y});\n                    if(x+1<m && !visited[x+1][y] && grid[x+1][y]==1)\n                        q.push(pair{x+1, y});                   \n                    if(y-1>=0 && !visited[x][y-1] && grid[x][y-1]==1)\n                        q.push(pair{x, y-1});                   \n                    if(y+1<n && !visited[x][y+1] && grid[x][y+1]==1)\n                        q.push(pair{x, y+1});\n                }\n            }\n        }\n        return num;\n    }\n\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-days-to-disconnect-island","has_notes":false,"flag_type":1}