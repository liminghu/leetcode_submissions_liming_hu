{"id":1352447558,"question_id":1691,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1723405680,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1352447558/","is_pending":"Not Pending","title":"Minimum Number of Days to Disconnect Island","memory":"N/A","code":"/*You are given an m x n binary grid grid where 1 represents land and 0 represents water. \nAn island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\nIn one day, we are allowed to change any single land cell (1) into a water cell (0).\nReturn the minimum number of days to disconnect the grid.*/\nclass Solution {\npublic:\n    int minDays(vector<vector<int>>& grid) {\n        /*  m == grid.length\n            n == grid[i].length\n            1 <= m, n <= 30\n            grid[i][j] is either 0 or 1\n            */\n\n        //check the number of islands.\n        int m = grid.size();\n        int n = grid[0].size();\n        int num = numIslands(grid);\n        if(num>1 || num==0)\n            return 0;\n\n        int res = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {   \n                if(grid[i][j]>=1) {\n                    grid[i][j] = 0;\n                    //grid[i][j] neighbors.\n                    // i-1, j\n                    // i+1, j\n                    // i j-1\n                    // i j+1\n                    //if they are land, are they still connected?\n                    num = numIslands(grid);\n                    if(num >= 2)\n                        return 1;\n                    grid[i][j] = 1;\n                } \n            }\n        }\n        return 2;\n    }\n\n    int numIslands(vector<vector<int>>& grid) {\n        /*  m == grid.length\n            n == grid[i].length\n            1 <= m, n <= 30\n            grid[i][j] is either 0 or 1\n            */\n\n        //check the number of islands.\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> visited(m, vector<int>(n, 0));\n        int num = 0;\n        queue<pair<int,int>> q;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(grid[i][j]==1 && !visited[i][j]) {\n                    q.push(pair{i,j});\n                    num++;\n                }\n                while(!q.empty()) {\n                    pair<int,int> cur = q.front();\n                    int x = cur.first;\n                    int y = cur.second;                    \n                    q.pop();\n                    visited[x][y] = num;\n                    //four neighbors.\n                    if(x-1>=0 && !visited[x-1][y] && grid[x-1][y]==1)\n                        q.push(pair{x-1, y});\n                    if(x+1<m && !visited[x+1][y] && grid[x+1][y]==1)\n                        q.push(pair{x+1, y});                   \n                    if(y-1>=0 && !visited[x][y-1] && grid[x][y-1]==1)\n                        q.push(pair{x, y-1});                   \n                    if(y+1<n && !visited[x][y+1] && grid[x][y+1]==1)\n                        q.push(pair{x, y+1});\n                }\n            }\n        }\n        return num;\n    }\n\n};","compare_result":"111111111011111111111111111111111111111111111111111111111111111111000000000000000000000000000000000","title_slug":"minimum-number-of-days-to-disconnect-island","has_notes":false,"flag_type":1}