{"id":1445138974,"question_id":335,"lang":"cpp","lang_name":"C++","time":"3 months","timestamp":1730923854,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1445138974/","is_pending":"Not Pending","title":"Self Crossing","memory":"28.7 MB","code":"class Solution {\npublic:\n    bool isSelfCrossing(vector<int>& distance) {\n        distance.insert(distance.begin(), 4, 0);\n        int n = distance.size();\n        int i = 4;\n        for(; i<n && distance[i] > distance[i-2]; i++); //outer spiral\n        if(i==n)\n            return false;\n        //check border\n        if(distance[i] + distance[i-4] >= distance[i-2] ) {\n            distance[i-1] -= distance[i-3];\n        }\n        //inner spiral\n        i++;\n        for(; i<n && distance[i]<distance[i-2]; i++);\n        if( i != n)\n            return true;\n        return false;\n    };\n    bool isSelfCrossing1(vector<int>& distance) {\n        int n = distance.size();\n        if(n<=3)\n            return false;\n        \n        int i = 3;\n/*               i-2\n    case 1 : i-1┌─┐\n                └─┼─>i\n                 i-3\n                 \n                    i-2\n    case 2 : i-1 ┌────┐\n                 └─══>┘i-3\n                 i  i-4      (i overlapped i-4)\n\n    case 3 :    i-4\n               ┌──┐ \n               │i<┼─┐\n            i-3│ i-5│i-1\n               └────┘\n                i-2\n\n*/\n        while( i<n ) {\n/*               i-2\n    case 1 : i-1┌─┐\n                └─┼─>i\n                 i-3\n*/                 \n            if( distance[i] >= distance[i-2] && distance[i-1] <= distance[i-3] ) //4th line crossing.\n                return true;\n/*\n                    i-2\n    case 2 : i-1 ┌────┐\n                 └─══>┘i-3\n                 i  i-4      (i overlapped i-4)\n*/\n            if( i >= 4 ) {\n                if(distance[i-1] == distance[i-3] && distance[i] + distance[i-4] >= distance[i-2] ) //5th line meets the 1st line.\n                    return true;\n            };\n/*\n    case 3 :    i-4\n               ┌──┐ \n               │i<┼─┐\n            i-3│ i-5│i-1\n               └────┘\n                i-2\n\n*/\n            if( i >= 5) {               //6th line crosses 1th line.      i         i-5\n                if( distance[i-2] >= distance[i-4]  && \n                    distance[i]   + distance[i-4] >= distance[i-2]  && \n                    distance[i-1] + distance[i-5] >= distance[i-3]  && \n                    distance[i-1] <= distance[i-3] )\n                    return true;\n            }\n            \n            i++;\n        }\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"self-crossing","has_notes":false,"flag_type":1}