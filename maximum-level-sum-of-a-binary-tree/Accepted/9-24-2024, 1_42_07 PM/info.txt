{"id":1401189853,"question_id":1116,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1727210527,"status":10,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/1401189853/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"104.5 MB","code":"/*\nGiven the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.\nReturn the smallest level x such that the sum of all the values of nodes at level x is maximal.\nThe number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int, int> sum_level; //level, sum\n    int maxLevelSum(TreeNode* root) {\n        helper(root, 0); //level;\n        \n        int max_sum = INT_MIN;\n        int level = INT_MAX;\n        for(auto sum_i: sum_level) {\n            if(sum_i.second > max_sum) {\n                max_sum = sum_i.second;\n                level = sum_i.first;\n            } else if(sum_i.second == max_sum && sum_i.first < level) {\n                level = sum_i.first;\n            };\n        }\n        return level+1;\n    }\n    void helper(TreeNode* root, int level) {\n        if(root == NULL)\n            return;       \n        sum_level[level] += root->val;\n        helper(root->left, level+1);\n        helper(root->right, level+1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false,"flag_type":1}