{"id":397625775,"question_id":1009,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1600468158,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/397625775/","is_pending":"Not Pending","title":"Pancake Sorting","memory":"11.4 MB","code":"class Solution {\npublic:\n    vector<int> pancakeSort(vector<int>& A) {\n    /*\n    Find the index i of the next maximum number x.\n    Reverse i + 1 numbers, so that the x will be at A[0]\n    Reverse x numbers, so that x will be at A[x - 1].\n    Repeat this process N times.\n\n    Update:\n    Actually, I didn't use the condition permutation of [1,2,..., A.length].\n    I searched in the descending order of A.\n\n    Time Complexity:\n    O(N^2)\n    */\n        vector<int> res;\n        int x, i;\n        for(x = A.size(); x>0; --x) {  //simlary to bubble sort. \n            for(i=0; A[i] !=x; i++); //Find the index i of the next maximum number x.\n            reverse(A.begin(), A.begin() + i + 1); //Reverse i + 1 numbers, so that the x will be at A[0]\n            res.push_back(i+1);\n            reverse(A.begin(), A.begin()+x); //Reverse x numbers, so that x will be at A[x - 1].\n            res.push_back(x);\n        }\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pancake-sorting","has_notes":false,"flag_type":1}