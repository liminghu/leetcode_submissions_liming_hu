{"id":1530732835,"question_id":3024,"lang":"cpp","lang_name":"C++","time":"3 days, 9 hours","timestamp":1738653297,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1530732835/","is_pending":"Not Pending","title":"String Transformation","memory":"38.9 MB","code":"class Solution {\n    int M = 1e9+7;\npublic:\n/*You are given two strings s and t of equal length n. You can perform the following operation on the string s:\n        Remove a suffix of s of length l where 0 < l < n and append it at the start of s.\n        For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.\n        You are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.\n        Since the answer can be large, return it modulo 109 + 7.\n        */\n    int numberOfWays(string s, string t, long long k) {//2 <= s.length <= 5 * 105\n        int n= s.length();\n        string ss = s+s;\n        auto found1 = ss.find(t);\n        if(found1 == string::npos)\n            return 0;\n        long long base = power_mod(n-1, k);\n        int diff = k%2==0?1:-1;\n        base =(base-diff)*power_mod(n, M-2)%M;\n        auto found2 = ss.find(t, found1+1);\n        if(found2==string::npos)\n            return base;\n        else if(found2-found1 == n) {\n            return (base+diff)%M;\n        } else {\n            int d = found2-found1;\n            int ans_diff =found1==0? diff:0;\n            return (n/d*base+ans_diff)%M;\n        };\n        return 0;\n    }\n    long long power_mod(long long a, long long b) {\n        if(b<2) {\n            if(b==1)\n                return a%M;\n            return 1;\n        };\n        long long temp = power_mod(a, b/2);\n        if(b%2==0)\n            return temp*temp%M;\n        else\n            return temp*temp%M * a %M;\n    }\n};","compare_resulttitle_slug":"string-transformation","has_notes":false,"flag_type":1}