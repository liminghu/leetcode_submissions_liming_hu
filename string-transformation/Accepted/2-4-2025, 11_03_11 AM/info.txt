{"id":1531442924,"question_id":3024,"lang":"cpp","lang_name":"C++","time":"2 days, 22 hours","timestamp":1738695791,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/1531442924/","is_pending":"Not Pending","title":"String Transformation","memory":"89.4 MB","code":"using LL = long long;\nLL M = 1e9+7;\nclass Solution {\npublic:\n    int numberOfWays(string s, string t, long long k) {\n        string ss = s+s;\n        ss.pop_back(); //2 <= s.length <= 5 * 105\n        long long p = strStr(ss, t);\n        long long n = s.length();\n        vector<LL> T = {n-p-1LL, n-p, p, p-1ll};\n        vector<LL> Tk = quickMul(T, k);\n        if(s==t)\n            return Tk[3]; //Tk*(0, 1)'\n        else\n            return Tk[2]; // Tk*(1, 0)'\n    }\n    vector<LL> multiply(vector<LL> mat1, vector<LL> mat2) {\n        //a1 b1                     a2 b2\n        //c1 d1                     c2 d2\n        LL a1=mat1[0],b1=mat1[1], c1=mat1[2], d1=mat1[3]; \n        LL a2=mat2[0],b2=mat2[1], c2=mat2[2], d2=mat2[3];\n        return{(a1*a2+b1*c2)%M, (a1*b2+b1*d2)%M, (c1*a2+d1*c2)%M, (c1*b2+d1*d2)%M}; \n    }\n    vector<LL> quickMul(vector<LL> mat, LL N) {\n        if(N==0)\n            return {1, 0, 0, 1};\n        vector<LL> mat2 = quickMul(mat, N/(long long)2);\n        if(N%2==0)\n            return multiply(mat2, mat2);\n        else\n            return multiply(multiply(mat2, mat2), mat);\n    }\n    int strStr(string haystack, string needle) {\n        int count = 0;\n\n        int n = haystack.size();\n        int m = needle.size();\n        \n        vector<int> suf = preprocess(needle);\n        \n        vector<int>dp(n,0);\n        dp[0] = (haystack[0]==needle[0]);\n        if (m==1 && dp[0]==1)\n            count++;\n\n        for (int i=1; i<n; i++){\n            int j = dp[i-1];\n            while (j>0 && haystack[i]!=needle[j])\n                j = suf[j-1];\n            dp[i] = j + (haystack[i]==needle[j]);\n            if (dp[i]==needle.size())\n                count++;\n        }\n        return count;\n    }\n\n    vector<int> preprocess(string s){\n        int n = s.size();\n        vector<int>dp(n,0);\n        for (int i=1; i<n; i++){\n            int j = dp[i-1];                       \n            while (j>=1 && s[j]!=s[i]){\n                j = dp[j-1];\n            }          \n            dp[i] = j + (s[j]==s[i]);\n        }\n        return dp;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-transformation","has_notes":false,"flag_type":1}