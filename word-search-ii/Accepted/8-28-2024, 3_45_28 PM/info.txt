{"id":1371642011,"question_id":212,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724885128,"status":10,"status_display":"Accepted","runtime":"712 ms","url":"/submissions/detail/1371642011/","is_pending":"Not Pending","title":"Word Search II","memory":"18.7 MB","code":"/*\nGiven an m x n board of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells \nare horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n*/\nclass Solution {\n    class trieNode {\n        public:\n            trieNode* children[26];\n            bool isWord;\n            trieNode() {\n                for(int i=0; i<26; i++) \n                    children[i] = NULL;\n                isWord = false;\n            }\n    };\npublic:\n    trieNode* root;\n    int m,n;\n    bool visited[12][12];\n    unordered_set<string> rets;\n\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        /*  \n            m == board.length\n            n == board[i].length\n            1 <= m, n <= 12\n            board[i][j] is a lowercase English letter.\n            1 <= words.length <= 3 * 104\n            1 <= words[i].length <= 10\n            words[i] consists of lowercase English letters.\n            All the strings of words are unique.\n        */\n        root = new trieNode();\n        for(auto word: words) {\n            trieNode* node = root;\n            for(auto ch:word) {\n                if( node->children[ch-'a'] == NULL ) \n                    node->children[ch-'a'] = new trieNode();\n                node = node->children[ch-'a'];\n            }\n            node->isWord = true;\n        }\n\n        m = board.size();\n        n = board[0].size();\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                trieNode* node = root;\n                string word;\n                visited[i][j] = 1;\n                dfs(board, i,j, node, word);\n                visited[i][j] = 0;\n            }\n        } \n        vector<string> ans(rets.begin(), rets.end());\n        return ans;\n    }\n\n    vector<pair<int,int>> dirs{{1, 0}, {-1, 0},{0, 1},{0, -1}};\n    void dfs(vector<vector<char>>& board, int i, int j, trieNode* node, string& word) {\n        //cout << \"board[i][j]= \" << board[i][j] << endl; \n        if( node->children[ board[i][j] - 'a' ] == NULL ) \n            return;\n        node = node->children[ board[i][j] - 'a' ];\n        \n        word.push_back(board[i][j]);\n        \n        if( node->isWord )\n            rets.insert(word);\n        \n        for(int k=0; k<4; k++) {\n            int x = i + dirs[k].first;\n            int y = j + dirs[k].second;\n            \n            if(x<0 || y<0 || x>=m || y>=n)\n                continue;\n            if( visited[x][y] == 1 )\n                continue;\n\n            visited[x][y] = 1;\n            dfs(board, x, y, node, word);\n            visited[x][y] = 0;\n        }\n\n        word.pop_back();\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}