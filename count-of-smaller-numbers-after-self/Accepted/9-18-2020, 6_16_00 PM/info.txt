{"id":397662457,"question_id":315,"lang":"cpp","lang_name":"C++","time":"4 years, 4 months","timestamp":1600478160,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/397662457/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"20.7 MB","code":"struct BSTNode {\n    int val;\n    int count;\n    int left_count;\n    BSTNode* left;\n    BSTNode* right;    \n    BSTNode(int val): val(val), count(1), left_count(0), left{nullptr}, right{nullptr} {}\n    ~BSTNode() { delete left; delete right; }\n    int less_or_equal() const { return count + left_count; }\n};\nclass Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        if (nums.empty()) return {};\n        std::reverse(nums.begin(), nums.end());\n        std::unique_ptr<BSTNode> root(new BSTNode(nums[0]));\n        vector<int> ans{0};\n        for (int i = 1; i < nums.size(); ++i)\n            ans.push_back(insert(root.get(), nums[i]));\n        std::reverse(ans.begin(), ans.end());\n        return ans;\n    }\nprivate:\n    // Returns the number of elements smaller than val under root.\n    int insert(BSTNode* root, int val) {\n        if (root->val == val) {\n            ++root->count;\n            return root->left_count;\n        } else if (val < root->val) {\n            ++root->left_count;\n            if (root->left == nullptr) {\n                root->left = new BSTNode(val);            \n                return 0;\n            } \n            return insert(root->left, val);\n        } else  {\n            if (root->right == nullptr) {\n                root->right = new BSTNode(val);\n                return root->less_or_equal();\n            }\n            return root->less_or_equal() + insert(root->right, val);\n        }\n    }\n};","compare_result":"1111111111111111","title_slug":"count-of-smaller-numbers-after-self","has_notes":false,"flag_type":1}