{"id":1414356324,"question_id":1304,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1728274592,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1414356324/","is_pending":"Not Pending","title":"Longest Happy String","memory":"7.7 MB","code":"/*A string s is called happy if it satisfies the following conditions:\n\ns only contains the letters 'a', 'b', and 'c'.\ns does not contain any of \"aaa\", \"bbb\", or \"ccc\" as a substring.\ns contains at most a occurrences of the letter 'a'.\ns contains at most b occurrences of the letter 'b'.\ns contains at most c occurrences of the letter 'c'.\nGiven three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. \nIf there is no such string, return the empty string \"\".\n\nA substring is a contiguous sequence of characters within a string.\n\n \n\nExample 1:\n\nInput: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.\nExample 2:\n\nInput: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It is the only correct answer in this case.\n \n\nConstraints:\n\n0 <= a, b, c <= 100\na + b + c > 0\n*/\nclass Solution {\npublic:\n    string longestDiverseString(int a, int b, int c) {\n        /*\n        A string s is called happy if it satisfies the following conditions:\n        s only contains the letters 'a', 'b', and 'c'.\n        s does not contain any of \"aaa\", \"bbb\", or \"ccc\" as a substring.\n        s contains at most a occurrences of the letter 'a'.\n        s contains at most b occurrences of the letter 'b'.\n        s contains at most c occurrences of the letter 'c'.\n        */\n        priority_queue<pair<int,int>> pq; //pair: freq, char\n        if( a > 0 )\n            pq.push({a, 'a'});\n        if( b > 0 )\n            pq.push({b, 'b'});\n        if( c > 0 )\n            pq.push({c, 'c'});  \n\n        string ret;\n        while(!pq.empty()) {\n            if( pq.size() == 1 ) {\n                int k = min( pq.top().first, 2);\n                for(int i=0; i<k; i++)\n                    ret.push_back(pq.top().second);\n                return ret;\n            }\n            auto x = pq.top();\n            pq.pop();\n            auto y = pq.top();\n            pq.pop();\n\n            int k= min( 1 + x.first - y.first, 2);\n            for(int i=0; i<k; i++)\n                ret.push_back(x.second);\n            ret.push_back(y.second);\n            x.first -= k;\n            y.first -= 1;\n            if(x.first > 0 )\n                pq.push(x);\n            if(y.first > 0)\n                pq.push(y);\n        }                  \n        return ret;\n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"longest-happy-string","has_notes":false,"flag_type":1}