{"id":1404495264,"question_id":954,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727494274,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1404495264/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"N/A","code":"/*\nGiven a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of \nnums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], \nnums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\n*/\nclass Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& nums) {\n        //the next element of nums[i] is nums[(i + 1) % n] and \n        //the previous element of nums[i] is nums[(i - 1 + n) % n]\n        int ans = INT_MIN;\n        int n = nums.size();\n        vector<int> presum(n+1, 0);\n        presum[0] = 0;\n        for(int i=0; i<n; i++)\n            presum[i+1] = presum[i] + nums[i];\n        for(int i=0; i<n; i++) {\n            for(int j=0; j<n; j++) {\n                int subsum_i_j = 0;\n                if(j>=i) {\n                    subsum_i_j = presum[j+1]-presum[i];\n                } else { //j<i\n                    if( j+1 < i)\n                        subsum_i_j = presum[n]-(presum[i]- presum[j+1]);\n                    else\n                        subsum_i_j = presum[n];\n                }\n                ans = max(ans, subsum_i_j);\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000","title_slug":"maximum-sum-circular-subarray","has_notes":false,"flag_type":1}