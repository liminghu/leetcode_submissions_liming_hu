{"id":1429980390,"question_id":930,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1729568650,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1429980390/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"32.1 MB","code":"/*\nGiven an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\nA full binary tree is a binary tree where each node has exactly 0 or 2 children.\n\n Example 1:\nInput: n = 7\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n\nExample 2:\nInput: n = 3\nOutput: [[0,0,0]]\n \n\nConstraints:\n1 <= n <= 20\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int, vector<TreeNode*>> memo;\n    vector<TreeNode*> allPossibleFBT(int n) {\n        if( n%2 == 0)\n            return {};\n        if(n==1)\n            return {new TreeNode(0)};\n        if(memo.find(n)!=memo.end())\n            return memo[n];\n        \n        vector<TreeNode*> res;\n        for(int i=1; i<n; i+=2) {\n            vector<TreeNode*> left = allPossibleFBT(i);\n            vector<TreeNode*> right = allPossibleFBT(n-i-1);\n            for(auto l: left) {\n                for(auto r: right) {\n                    TreeNode* root = new TreeNode(0,l,r);\n                    res.push_back(root);\n                }\n            }\n        }\n        memo[n] = res;\n        return memo[n];        \n    }\n};","compare_result":"11111111111111111111","title_slug":"all-possible-full-binary-trees","has_notes":false,"flag_type":1}