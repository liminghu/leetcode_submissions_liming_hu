{"id":1314867667,"question_id":12,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1720509951,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1314867667/","is_pending":"Not Pending","title":"Integer to Roman","memory":"12 MB","code":"class Solution {\n/*\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman \nnumeral has the following rules:\n\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, \nsubtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than \n5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or \n500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.\nGiven an integer, convert it to a Roman numeral.\n*/\npublic:\n    string intToRoman(int num) { //1 <= num <= 3999\n        /*\n        I\t1\n        V\t5\n        X\t10\n        L\t50\n        C\t100\n        D\t500\n        M\t1000\n        */\n        unordered_map<int, char> romanDict;\n        romanDict[1] = 'I';\n        romanDict[5] = 'V';\n        romanDict[10] = 'X';\n        romanDict[50] = 'L';\n        romanDict[100] = 'C';\n        romanDict[500] = 'D';\n        romanDict[1000] = 'M';\n\n        string res;\n        if(num >= 1000) {\n            int num_m = num /1000;\n            num = num % 1000; //0~999\n            while( num_m > 0 ) {\n                res.push_back(romanDict[1000]);\n                num_m--;\n            }\n        };\n        \n        //1~1000: 500~899, 900~999,  400~499, 100~399, 1~99\n        if(num >= 900) { //900~999,\n            num = num - 900; //0~99\n            res.push_back(romanDict[100]);\n            res.push_back(romanDict[1000]);\n        } else if(num >= 500) {  //500~899\n            num = num - 500;  //0~399\n            int num_c = num /100;\n            res.push_back(romanDict[500]);\n             while( num_c > 0 ) {\n                res.push_back(romanDict[100]);\n                num = num - 100;\n                num_c--;\n            }\n        } else if( num >= 400 ) { //400~499\n            num = num - 400; //0~99\n            res.push_back(romanDict[100]);\n            res.push_back(romanDict[500]);\n        } \n        // num: 0~399\n        //1~39,40~49, 50~99, 100~399\n        if( num >= 100 ) { //100~399\n            int num_c = num /100;\n            num = num % 100; //0~99\n             while( num_c > 0 ) {\n                res.push_back(romanDict[100]);\n                num_c--;\n            }\n        }\n\n        //1~39,40~49, 50~89, 90~99, \n        if (num >= 90) {\n            num = num - 90; //0~9\n            res.push_back(romanDict[10]);\n            res.push_back(romanDict[100]); \n        } else if(num >= 50 ) { //50~89\n            num = num - 50;  //0~39\n            int num_x = num / 10;\n            res.push_back(romanDict[50]);\n             while( num_x > 0 ) {\n                res.push_back(romanDict[10]);\n                num = num -10;\n                num_x--;\n            }\n        } else if(num >= 40 ) { //40~49\n            num = num - 40; //0~9\n            res.push_back(romanDict[10]);\n            res.push_back(romanDict[50]);\n        }\n        \n        //1~39: 0~9 10~39\n        if(num>=10) { //10~39\n            int num_x = num /10;\n            num = num % 10; //0~9\n             while( num_x > 0 ) {\n                res.push_back(romanDict[10]);\n                num_x--;\n            }\n        }\n        //0~9: 1~3, 4, 5~9\n        if(num==9) {\n            num = num - 9; //0\n            res.push_back(romanDict[1]);\n            res.push_back(romanDict[10]);     \n        } else if(num>=5) {\n            num = num - 5;  //0~3\n            int num_i = num;\n            res.push_back(romanDict[5]);\n             while( num_i > 0 ) {\n                res.push_back(romanDict[1]);\n                num_i--;\n            }           \n        } else if(num==4) {\n             num = num - 4; //0\n            res.push_back(romanDict[1]);\n            res.push_back(romanDict[5]);           \n        } else if(num >=1) {\n            while( num > 0 ) {\n                res.push_back(romanDict[1]);\n                num--;\n            }           \n        }\n\n        return res;\n        \n    }\n};","compare_resulttitle_slug":"integer-to-roman","has_notes":false,"flag_type":1}