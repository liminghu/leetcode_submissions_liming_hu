{"id":1288634362,"question_id":250,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718420161,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1288634362/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"17.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isUnivalSubtrees(TreeNode* root) {\n        if(root == nullptr)\n            return true;\n        \n        if(root->left == nullptr && root->right ==nullptr)\n            return true;\n        \n        if(root->left == nullptr && root->right !=nullptr && root->val == root->right->val && isUnivalSubtrees(root->right))\n            return true;\n        if(root->left != nullptr && root->right ==nullptr && root->val == root->left->val && isUnivalSubtrees(root->left))\n            return true;\n        if(root->left != nullptr && root->right !=nullptr && root->val == root->left->val && isUnivalSubtrees(root->left) \n                                                          && root->val == root->right->val && isUnivalSubtrees(root->right))\n            return true;\n        \n        return false;     \n        \n    }\n    \n    int countUnivalSubtrees(TreeNode* root) { //A uni-value subtree means all nodes of the subtree have the same value.\n        int ans = 0;\n        if(root == nullptr)\n            return 0;\n        if(root->left == nullptr && root->right ==nullptr)\n            return 1;\n        \n        if(root->left == nullptr && root->right !=nullptr && root->val == root->right->val && isUnivalSubtrees(root->right))\n            return countUnivalSubtrees(root->right)+1;\n        if(root->left != nullptr && root->right ==nullptr && root->val == root->left->val && isUnivalSubtrees(root->left))\n            return countUnivalSubtrees(root->left)+1;\n        if(root->left != nullptr && root->right !=nullptr && root->val == root->left->val && isUnivalSubtrees(root->left) \n                                                          && root->val == root->right->val && isUnivalSubtrees(root->right))\n            return countUnivalSubtrees(root->left)+countUnivalSubtrees(root->right)+1;\n        \n        return countUnivalSubtrees(root->left)+countUnivalSubtrees(root->right);\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees","has_notes":false,"flag_type":1}