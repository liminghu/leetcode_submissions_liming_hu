{"id":1300249181,"question_id":1196,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1719348723,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1300249181/","is_pending":"Not Pending","title":"Filling Bookcase Shelves","memory":"10.7 MB","code":"class Solution {\npublic:\n/*\nYou are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.\n\nWe want to place these books in order onto bookcase shelves that have a total width shelfWidth.\n\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf \nof the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are \nno more books to place.\n\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\n\nFor example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the \nfourth and fifth book on the last shelf.\nReturn the minimum possible height that the total bookshelf can be after placing shelves in this manner.\n*/\n    int minHeightShelves(vector<vector<int>>& books, int shelfWidth) { //1 <= books.length <= 1000\n                                                                       //1 <= thicknessi <= shelfWidth <= 1000\n                                                                       //1 <= heighti <= 1000\n        //dp[i] => 将数组S[1:i]分成若干个subarray，最小化“每个subarray的最大值之和”，保存该值\n        int sz = books.size();\n        vector<int> dp(sz+1, 0);\n        dp[0] = 0; //height\n        for(int i=0; i<sz; i++) { \n            dp[i+1] = dp[i] + books[i][1]; //on the new layer.\n            int totalWidth = 0;\n            int maxHeight = 0;\n            for(int j=i; j>=0; j--) {      \n                totalWidth += books[j][0];       \n                if(totalWidth <=shelfWidth) {\n                    maxHeight = max(maxHeight, books[j][1]);  \n                    dp[i+1] = min(dp[i+1], dp[j]+maxHeight);\n                } else\n                    break;\n            }\n        }\n        return dp[sz];\n    }\n};","compare_result":"11111111111111111111","title_slug":"filling-bookcase-shelves","has_notes":false,"flag_type":1}