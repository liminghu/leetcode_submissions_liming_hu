{"id":1392486448,"question_id":1300,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1726514142,"status":10,"status_display":"Accepted","runtime":"454 ms","url":"/submissions/detail/1392486448/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"198.4 MB","code":"/*\nThere are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections \nforming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. \nAny server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach \nsome other server.\nReturn all critical connections in the network in any order.\n2 <= n <= 105\nn - 1 <= connections.length <= 105\n0 <= ai, bi <= n - 1\nai != bi\nThere are no repeated connections.\n*/\nclass Solution {\n    vector<vector<int>>rets;\n    vector<vector<int>>next;\n    int time = 0;\npublic:\n    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n        next.resize(n);\n        for (auto x:connections) {\n            next[x[0]].push_back(x[1]);\n            next[x[1]].push_back(x[0]);\n        }\n            \n        vector<bool>visited(n);\n        vector<int>dfn(n,0);\n        vector<int>low(n,0);\n        vector<int>parent(n,-1);\n        \n        for (int i = 0; i < n; i++)  {            \n            if (visited[i] == false) \n                DFS(i, visited, dfn, low, parent); \n        }\n        \n        return rets;\n    }\n    \n    \n    void DFS(int u, vector<bool>&visited, vector<int>&dfn, vector<int>&low, vector<int>&parent) {  \n        visited[u] = true; \n        time++;\n        dfn[u] = low[u] = time; \n              \n        for (int v : next[u]) { \n            if (v == parent[u])\n                continue;\n            \n            if (!visited[v]) { \n                parent[v] = u; \n                DFS(v, visited, dfn, low, parent); \n                if (low[v] > dfn[u]) rets.push_back({v,u}); // critical edge               \n                // if(low[v] >= dfn[u]), then u is a critical vertex               \n                low[u]  = min(low[u], low[v]); \n            } else             \n                low[u]  = min(low[u], dfn[v]); \n        } \n    } \n};","compare_result":"11111111111111111","title_slug":"critical-connections-in-a-network","has_notes":false,"flag_type":1}