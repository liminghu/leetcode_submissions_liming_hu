{"id":1370583074,"question_id":802,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1724801108,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1370583074/","is_pending":"Not Pending","title":"K-th Smallest Prime Fraction","memory":"N/A","code":"/*\nYou are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. \nYou are also given an integer k.\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\nReturn the kth smallest fraction considered. Return your answer as an array of integers of size 2, \nwhere answer[0] == arr[i] and answer[1] == arr[j].\n*/\nclass Solution {\npublic:\n    vector<int> kthSmallestPrimeFraction(vector<int>& nums, int k) {\n        /*  2 <= arr.length <= 1000\n            1 <= arr[i] <= 3 * 104\n            arr[0] == 1\n            arr[i] is a prime number for i > 0.\n            All the numbers of arr are unique and sorted in strictly increasing order.\n            1 <= k <= arr.length * (arr.length - 1) / 2\n        */\n        //arr[i] / arr[j]\n        double left = 0;\n        double right = 1;\n        double mid;\n        while( left < right ) {\n            mid = (left+right)/2;\n            int count = 0; //number of nums[i]/nums[j] <= mid.\n            for(int i=0; i<nums.size(); i++) {\n                auto pos = lower_bound(nums.begin(), nums.end(), nums[i]*1.0/mid);    //nums[i]/nums[j] <=mid -> nums[j] >=nums[i]*mid;\n                count += nums.end() - pos; //nums[j] .....    greater.\n            }\n            if(count < k)\n                left = mid; \n            else if(count > k )\n                right = mid;\n            else\n                break;\n        }\n\n        vector<int> ret;\n        double ans = 0;\n        for(int i=0; i<nums.size(); i++) {\n            auto pos = lower_bound(nums.begin(), nums.end(), nums[i]*1.0/mid);    //nums[i]/nums[j] <=mid -> nums[j] >=nums[i]*mid;\n            int j = pos - nums.begin();\n            if( pos != nums.end() && nums[i]*1.0 > ans) {\n                ans = nums[i]*1.0/nums[j];\n                ret = {nums[i], nums[j]};\n            }\n        }\n        return ret;\n    }\n};","compare_result":"11110110110111100110000010100000000101100100010100000000110","title_slug":"k-th-smallest-prime-fraction","has_notes":false,"flag_type":1}