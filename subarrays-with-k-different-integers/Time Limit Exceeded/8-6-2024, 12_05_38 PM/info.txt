{"id":1346971432,"question_id":1034,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1722971138,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1346971432/","is_pending":"Not Pending","title":"Subarrays with K Different Integers","memory":"N/A","code":"/*\nGiven an integer array nums and an integer k, return the number of good subarrays of nums.\nA good array is an array where the number of different integers in that array is exactly k.\nFor example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.\nA subarray is a contiguous part of an array.\n*/\nclass Solution {\npublic:\n    int subarraysWithKDistinct(vector<int>& nums, int k) {\n        /*  1 <= nums.length <= 2 * 104\n            1 <= nums[i], k <= nums.length\n        */\n        unordered_map<int, int> mp; //num, count\n        int sz = nums.size();\n        int win_st = 0;\n        int win_end = 0;\n        int count = 0;\n        int res = 0;  //found the first good array.\n        int i = 0;\n        while(i < sz && win_end < sz) {\n            win_st = i;   //remove nums[i]\n            win_end = i;\n            count = 0;\n            mp.clear();\n            while(count < k && win_end < sz) {\n                if( mp[nums[win_end]] == 0 ) {\n                    count++;\n                } \n                mp[nums[win_end]] += 1;\n                win_end++;\n            }\n            if(count < k && win_end == sz)\n                return res;\n            if(count == k)\n                res += 1;\n            while(win_end < sz && mp[nums[win_end]] >= 1) { //count == k\n                mp[nums[win_end]]++;\n                win_end++;\n                res++;\n            }\n            win_end--;\n            i++;\n        };\n\n        return res;        \n    }\n};","compare_result":"111111111111111111111111111111111111111111100000000000000","title_slug":"subarrays-with-k-different-integers","has_notes":false,"flag_type":1}