{"id":1403424559,"question_id":100,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727393219,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1403424559/","is_pending":"Not Pending","title":"Same Tree","memory":"12.1 MB","code":"/*\nGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\nThe number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if( p == NULL)\n            return  (q == NULL);\n        \n        //p is not null\n        if(q == NULL)\n            return false;\n        \n        //p q not null\n        if(p->val != q->val)\n            return false;\n        \n        //p q have the same val.\n         return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"same-tree","has_notes":false,"flag_type":1}