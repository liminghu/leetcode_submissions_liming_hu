{"id":1294222652,"question_id":341,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1718859625,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1294222652/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"16.6 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\nprivate:\n    vector<int> IntList;\n    vector<NestedInteger> nestedList;\n    int cur = 0;\n   \n    \npublic:      \n    NestedIterator(vector<NestedInteger> &nestedList) { //Initializes the iterator with the nested list nestedList.\n        this->nestedList = nestedList;\n        flatten(nestedList);\n    }\n    \n    void flatten(vector<NestedInteger> &nestedList) {\n        int sz = nestedList.size();\n        for(int i=0; i<sz; i++) {\n            if(nestedList[i].isInteger()) {\n                IntList.push_back(nestedList[i].getInteger());\n            } else {\n                flatten(nestedList[i].getList());                 \n            }\n        }\n\n    }\n    \n    int next() { //Returns the next integer in the nested list.\n            int res = IntList[cur];    \n            cur++;\n            return res;\n    }\n        \n    \n    bool hasNext() { //Returns true if there are still some integers in the nested list and false otherwise.\n        if(cur <IntList.size())\n            return true;\n        else\n            return false;\n        \n    }\n};\n\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator","has_notes":false,"flag_type":1}