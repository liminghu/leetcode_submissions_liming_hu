{"id":1339873236,"question_id":1653,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1722449817,"status":10,"status_display":"Accepted","runtime":"268 ms","url":"/submissions/detail/1339873236/","is_pending":"Not Pending","title":"Number of Good Leaf Nodes Pairs","memory":"118.5 MB","code":"/*\nYou are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is \nsaid to be good if the length of the shortest path between them is less than or equal to distance.\n\nReturn the number of good leaf node pairs in the tree.\n*/\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int countPairs(TreeNode* root, int distance) {\n        /*The number of nodes in the tree is in the range [1, 210].\n            1 <= Node.val <= 100\n            1 <= distance <= 10 \n        */\n\n        int res = 0;      \n        unordered_map< TreeNode*, vector<TreeNode*> > graph;\n        unordered_set<TreeNode*> leafNodes;   \n        findChildren(root, nullptr, graph, leafNodes);\n        if(leafNodes.size() < 2 )\n            return 0;\n        \n        for(auto leaf: leafNodes) {\n            queue<TreeNode*> q;\n            unordered_set<TreeNode*> seen;\n            q.push(leaf);\n            seen.insert(leaf);\n            for(int i=0; i<=distance; i++) {\n                int size = q.size();\n                for(int j=0; j<size; j++) {\n                    TreeNode* cur = q.front();\n                    q.pop();\n                    if(leafNodes.count(cur) && cur != leaf) \n                        res++;\n                    if(graph.count(cur)) {\n                        for(auto neighbor: graph[cur]) {\n                            if(!seen.count(neighbor)) {\n                                q.push(neighbor);\n                                seen.insert(neighbor);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return res/2;\n    }\n\n    //transform the tree to undirected graph, and find all the leafs.\n    void findChildren(TreeNode* cur, TreeNode* parent, unordered_map< TreeNode*, vector<TreeNode*> >& graph, unordered_set<TreeNode*>& leaf ) {\n        if(cur == nullptr)\n            return;\n        if(cur->left == nullptr && cur->right == nullptr) {\n            leaf.insert(cur);\n        }\n\n        if(parent) {\n            graph[parent].push_back(cur);\n            graph[cur].push_back(parent);\n        }\n\n        findChildren(cur->left, cur, graph, leaf);\n        findChildren(cur->right, cur, graph, leaf); \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-good-leaf-nodes-pairs","has_notes":false,"flag_type":1}