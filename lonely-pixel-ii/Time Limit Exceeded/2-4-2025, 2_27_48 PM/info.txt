{"id":1531583647,"question_id":533,"lang":"cpp","lang_name":"C++","time":"2 days, 18 hours","timestamp":1738708068,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1531583647/","is_pending":"Not Pending","title":"Lonely Pixel II","memory":"N/A","code":"class Solution {\npublic:\n    int findBlackPixel(vector<vector<char>>& picture, int target) {//1 <= m, n <= 200\n        int m = picture.size();\n        int n = picture[0].size();\n        unordered_map<int, set<int>> rows;\n        unordered_map<int, set<int>> cols;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(picture[i][j] == 'B') {\n                    rows[i].insert(j);\n                    cols[j].insert(i);\n                }\n            }\n        }\n        int ret = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n && rows.count(i); j++) {\n                if(picture[i][j] == 'B' && rows[i].size()==target && cols[j].size()==target ) {\n                    bool lonely = true;\n                    for(int r:cols[j]) { //for rows which have B pixel.\n                        if(rows[r]!=rows[i]) {\n                            lonely = false;\n                            break;\n                        }\n                    }\n                    ret += lonely;\n                }\n            }\n        }\n        return ret;        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"lonely-pixel-ii","has_notes":false,"flag_type":1}