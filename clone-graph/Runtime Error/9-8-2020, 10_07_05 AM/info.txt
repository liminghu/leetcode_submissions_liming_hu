{"id":392883415,"question_id":133,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599584825,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/392883415/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    \n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n\t\tif(node == nullptr) return nullptr;\n\t\t\n\t\t//BFS. \n\t\tunordered_map<Node*, Node*> mc;\n\t\tunordered_set<Node*> done;\n        \n        queue<Node*> q;\n        q.push(node);\n        \n        while(!q.empty()) {\n            Node* s = q.front(); \n            q.pop();\n            if(done.count(s)) continue;  //we have seen t before.\n            done.insert(s);\n            \n            if(mc.find(s) != mc.end() ) {\n                mc[s] = new Node(s->val);                \n            }\n            Node* t = mc[s];\n            for(Node* ss : s->neighbors) {\n                if(mc.find(ss) != mc.end() ) \n                    mc[ss] = new Node( ss->val );\n                q.push(ss);\n                t->neighbors.push_back( mc[ss] );\n            }                      \n        }\n        return mc[node];      \n    }\n};","compare_result":"000000000000000000000","title_slug":"clone-graph","has_notes":false,"flag_type":1}