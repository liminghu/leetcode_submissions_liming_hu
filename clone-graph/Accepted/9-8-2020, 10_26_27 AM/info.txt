{"id":392890323,"question_id":133,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599585987,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/392890323/","is_pending":"Not Pending","title":"Clone Graph","memory":"9.2 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    \n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n\t\tif(node == nullptr) return nullptr;\n\t\t\n\t\t//DFS. \n\t\tif(mc.find(node) == mc.end()) { \t\t\t\n\t\t\tNode* copy = new Node(node->val, {});\n\t\t\tmc[node] = copy;\n\t\t\tfor ( Node* neighbor: node->neighbors) {\n\t\t\t\tcopy->neighbors.push_back(cloneGraph(neighbor));\n\t\t    }\n        }\n        return mc[node];\n    }\nprivate:\n\tunordered_map<Node*, Node*> mc;\n};","compare_result":"111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}