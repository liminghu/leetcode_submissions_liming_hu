{"id":392894346,"question_id":133,"lang":"cpp","lang_name":"C++","time":"4 years, 5 months","timestamp":1599586636,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/392894346/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    \n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n\t\tif(node == nullptr) return nullptr;\n\t\t\n\t\tNode* copy = new Node(node -> val, {});\n\t\tmc[node] = copy;\n\t\t\n\t\t//BFS. \n        queue<Node*> todo; //to do.\n        todo.push(node);\n        \n        while(!todo.empty()) {\n            Node* s = todo.front(); \n            todo.pop();\n            \n            for(Node* ss : s->neighbors) {\n                if(mc.find(ss) == mc.end() ) {\n                    mc[ss] = new Node( ss->val, {} );\n\t\t\t\t\ttodo.push(ss);\n\t\t\t\t}\n                mc[s]->neighbors.push_back( mc[ss] );\n            }                      \n        }\n        return mc[node];      \n    }\nprivate:\n\tunordered_map<Node*, Node*> mc;\n};","compare_result":"111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}