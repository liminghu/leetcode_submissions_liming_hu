{"id":1251079699,"question_id":133,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1715017704,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1251079699/","is_pending":"Not Pending","title":"Clone Graph","memory":"12 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\nprivate:\n    unordered_map<Node*, Node*> visited;\n\npublic:\n    Node* cloneGraph(Node* node) {\n        if(node == NULL) \n            return node;\n\n        // If the node was already visited before.\n        // Return the clone from the visited dictionary.\n        if(visited.find(node)!= visited.end())\n            return visited[node];\n\n        // Create a clone for the given node.\n        // Note that we don't have cloned neighbors as of now, hence [].\n        Node* cloneNode = new Node(node->val, {});\n        // The key is original node and value being the clone node.      \n        visited[node] = cloneNode;\n        // Iterate through the neighbors to generate their clones\n        // and prepare a list of cloned neighbors to be added to the cloned\n        // node.\n        for(Node* neighbor:node->neighbors) {\n            Node* cn = cloneGraph(neighbor);\n            cloneNode->neighbors.push_back(cn);\n        }  \n        return cloneNode;                        \n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}