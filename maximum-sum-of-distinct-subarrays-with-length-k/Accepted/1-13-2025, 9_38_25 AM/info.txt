{"id":1507509479,"question_id":2552,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1736789905,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1507509479/","is_pending":"Not Pending","title":"Maximum Sum of Distinct Subarrays With Length K","memory":"98.4 MB","code":"class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        long long ret = 0;\n        int n = nums.size();\n        if(n<k)\n            return 0;\n        unordered_map<int, int> num2index;\n        long long cur_sum = 0;\n        int left = 0, right = 0;\n        for(int right=0; right<n; right++) {\n            int curNum = nums[right];\n            int lastIndx = num2index.count(curNum)? num2index[curNum]: -1;\n            while(left <= lastIndx || right-left+1 > k ) {\n                cur_sum -= nums[left];\n                left++;\n            }\n            num2index[curNum] = right;\n            cur_sum += nums[right];\n            if(right-left+1==k)\n                ret = max(ret, cur_sum);\n        }\n        return ret;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-distinct-subarrays-with-length-k","has_notes":false,"flag_type":1}