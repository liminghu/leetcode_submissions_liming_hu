{"id":1353662351,"question_id":2527,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1723500726,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/1353662351/","is_pending":"Not Pending","title":"Count Subarrays With Fixed Bounds","memory":"82.9 MB","code":"/*You are given an integer array nums and two integers minK and maxK.\n\nA fixed-bound subarray of nums is a subarray that satisfies the following conditions:\n\nThe minimum value in the subarray is equal to minK.\nThe maximum value in the subarray is equal to maxK.\nReturn the number of fixed-bound subarrays.\n\nA subarray is a contiguous part of an array.\n*/\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int minK, int maxK) {\n        /*  2 <= nums.length <= 105\n            1 <= nums[i], minK, maxK <= 106\n         */\n        //Divide the array into multiple subarrays such that each number in each subarray is between minK and maxK inclusive, \n        //solve the previous problem for each subarray, and sum all the answers.\n        int sz = nums.size();\n        int prevMin = -1;\n        int prevMax = -1;\n        int bound = -1;\n        long long  res = 0;\n\n        for(int i=0; i<sz; i++) {\n            if(nums[i]<minK || nums[i]>maxK) {\n                bound = i;\n                continue; \n            }\n\n            if(nums[i] ==minK) \n                prevMin = i;\n            if(nums[i] ==maxK) \n                prevMax = i;\n            res += max(0, min(prevMin, prevMax)-bound); \n        }\n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"count-subarrays-with-fixed-bounds","has_notes":false,"flag_type":1}