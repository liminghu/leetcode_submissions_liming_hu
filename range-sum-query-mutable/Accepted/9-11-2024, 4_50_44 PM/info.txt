{"id":1387094956,"question_id":307,"lang":"cpp","lang_name":"C++","time":"4 months, 4 weeks","timestamp":1726098644,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1387094956/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"215.7 MB","code":"/*\nGiven an integer array nums, handle multiple queries of the following types:\n\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n*/\n/*class BIT {\npublic:\n    BIT(int n): sums_(n+1, 0) {\n    }\n    void update(int i, int delta) {\n        while( i <sums_.size()) {\n            sums_[i] += delta;\n            i += lowbit(i);\n        }\n    }\n    int query(int i) const {\n        int sum = 0;\n        while( i > 0 ) {\n            sum += sums_[i];\n            i-= lowbit(i);\n        }\n        return sum;\n    }\nprivate:\n    vector<int> sums_;\n    static inline int lowbit(int x) {\n        return x & (-x);\n    }\n};\nclass NumArray {\npublic:\n    NumArray(vector<int>& nums) { //1 <= nums.length <= 3 * 104\n                                    //-100 <= nums[i] <= 100\n                                    //0 <= index < nums.length\n                                    //-100 <= val <= 100\n                                    //0 <= left <= right < nums.length\n                                    //At most 3 * 104 calls will be made to update and sumRange.\n        nums_ = nums;\n        tree_ = new BIT(nums.size());\n        for(int i=0; i<nums_.size(); i++) {\n            tree_->update(i+1, nums_[i]);\n        }\n\n  }\n \n  void update(int i, int val) {\n    tree_->update(i+1, val-nums_[i]);\n    nums_[i] = val;\n  }\n \n  int sumRange(int i, int j) {\n    return tree_->query(j+1) - tree_->query(i);\n  }\nprivate:\n    vector<int> nums_;\n    BIT *tree_;\n};*/\n\nclass SegmentTreeNode {\npublic:\n  SegmentTreeNode(int start, int end, int sum,\n                  SegmentTreeNode* left = nullptr,\n                  SegmentTreeNode* right = nullptr): \n    start(start),\n    end(end),\n    sum(sum),\n    left(left),\n    right(right){}      \n  ~SegmentTreeNode() {\n    delete left;\n    delete right;\n    left = right = nullptr;\n  }\n  \n  int start;\n  int end;\n  int sum;\n  SegmentTreeNode* left;\n  SegmentTreeNode* right;\n};\n\nclass NumArray {\nprivate:\n  vector<int> nums_; //to make memory more efficient for recursive function.\n  SegmentTreeNode* root_ =  new SegmentTreeNode(0, 0, 0); //unique_ptr<SegmentTreeNode>\n  \n  SegmentTreeNode* buildTree(int start, int end) {  \n    if (start == end) {      \n      return new SegmentTreeNode(start, end, nums_[start]);\n    }\n    int mid = start + (end - start) / 2; //floor\n    auto left = buildTree(start, mid);\n    auto right = buildTree(mid + 1, end);\n    auto node = new SegmentTreeNode(start, end, left->sum + right->sum, left, right);    //sum\n    return node;\n  }\n  \n  void updateTree(SegmentTreeNode* root, int i, int val) {\n    if (root->start == i && root->end == i) { //just one node.\n      root->sum = val;\n      return;\n    }\n    int mid = root->start + ( root->end - root->start ) / 2; //floor\n    if (i <= mid) { //in the left side.\n      updateTree(root->left, i, val);\n    } else {      //in the right side.\n      updateTree(root->right, i, val);\n    }\n    root->sum = root->left->sum + root->right->sum;\n  }\n  \n  int sumRange(SegmentTreeNode* root, int i, int j) {    \n    if (i == root->start && j == root->end) { //one node.\n      return root->sum;\n    }\n    int mid = root->start + (root->end - root->start) / 2; //floor\n    if (j <= mid) { //on the left side.\n      return sumRange(root->left, i, j);\n    } else if (i > mid) { //on the right side.\n      return sumRange(root->right, i, j);\n    } else { //in the middle\n      return sumRange(root->left, i, mid) + sumRange(root->right, mid + 1, j);\n    }\n  }\n\npublic:\n    NumArray(vector<int>& nums) { //1 <= nums.length <= 3 * 104\n                                    //-100 <= nums[i] <= 100\n                                    //0 <= index < nums.length\n                                    //-100 <= val <= 100\n                                    //0 <= left <= right < nums.length\n                                    //At most 3 * 104 calls will be made to update and sumRange.\n    nums_ = nums;\n    if (!nums.empty())\n      root_ = buildTree(0, nums.size() - 1); \n  }\n \n  void update(int i, int val) {\n    updateTree(root_, i, val); \n  }\n \n  int sumRange(int i, int j) {\n    return sumRange(root_, i, j); \n  }\n};\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */\n\n/*class SegmentTreeNode {\npublic:\n  SegmentTreeNode(int start, int end, int sum,\n                  SegmentTreeNode* left = nullptr,\n                  SegmentTreeNode* right = nullptr): \n    start(start),\n    end(end),\n    sum(sum),\n    left(left),\n    right(right){}      \n  ~SegmentTreeNode() {\n    delete left;\n    delete right;\n    left = right = nullptr;\n  }\n  \n  int start;\n  int end;\n  int sum;\n  SegmentTreeNode* left;\n  SegmentTreeNode* right;\n};\n\nclass NumArray {\nprivate:\n  vector<int> nums_; //to make memory more efficient for recursive function.\n  SegmentTreeNode* root_ =  new SegmentTreeNode(0, 0, 0); //unique_ptr<SegmentTreeNode>\n  \n  SegmentTreeNode* buildTree(int start, int end) {  \n    if (start == end) {      \n      return new SegmentTreeNode(start, end, nums_[start]);\n    }\n    int mid = start + (end - start) / 2; //floor\n    auto left = buildTree(start, mid);\n    auto right = buildTree(mid + 1, end);\n    auto node = new SegmentTreeNode(start, end, left->sum + right->sum, left, right);    //sum\n    return node;\n  }\n  \n  void updateTree(SegmentTreeNode* root, int i, int val) {\n    if (root->start == i && root->end == i) { //just one node.\n      root->sum = val;\n      return;\n    }\n    int mid = root->start + ( root->end - root->start ) / 2; //floor\n    if (i <= mid) { //in the left side.\n      updateTree(root->left, i, val);\n    } else {      //in the right side.\n      updateTree(root->right, i, val);\n    }\n    root->sum = root->left->sum + root->right->sum;\n  }\n  \n  int sumRange(SegmentTreeNode* root, int i, int j) {    \n    if (i == root->start && j == root->end) { //one node.\n      return root->sum;\n    }\n    int mid = root->start + (root->end - root->start) / 2; //floor\n    if (j <= mid) { //on the left side.\n      return sumRange(root->left, i, j);\n    } else if (i > mid) { //on the right side.\n      return sumRange(root->right, i, j);\n    } else { //in the middle\n      return sumRange(root->left, i, mid) + sumRange(root->right, mid + 1, j);\n    }\n  }\n\npublic:\n    NumArray(vector<int>& nums) { //1 <= nums.length <= 3 * 104\n                                    //-100 <= nums[i] <= 100\n                                    //0 <= index < nums.length\n                                    //-100 <= val <= 100\n                                    //0 <= left <= right < nums.length\n                                    //At most 3 * 104 calls will be made to update and sumRange.\n    nums_ = nums;\n    if (!nums.empty())\n      root_ = buildTree(0, nums.size() - 1); \n  }\n \n  void update(int i, int val) {\n    updateTree(root_, i, val); \n  }\n \n  int sumRange(int i, int j) {\n    return sumRange(root_, i, j); \n  }\n};*/\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */","compare_result":"1111111111111111","title_slug":"range-sum-query-mutable","has_notes":false,"flag_type":1}