{"id":1511998905,"question_id":3720,"lang":"cpp","lang_name":"C++","time":"2 weeks, 6 days","timestamp":1737162679,"status":10,"status_display":"Accepted","runtime":"210 ms","url":"/submissions/detail/1511998905/","is_pending":"Not Pending","title":"Minimize the Maximum Edge Weight of Graph","memory":"288.9 MB","code":"class Solution {\npublic:\n    int minMaxWeight(int n, vector<vector<int>>& edges, int threshold) {\n        // where edges[i] = [Ai, Bi, Wi] indicates that there is an edge going from node Ai to node Bi with weight Wi.\n        vector<vector<pair<int, int>>> reverse_al(n); //reverse adj list\n\n        for(auto& edge: edges) {\n            reverse_al[edge[1]].push_back({edge[0], edge[2]});\n        }\n        int l =1, r = 1000001;\n        while(l<r) {\n            int mid = (l+r)/2;\n            vector<int> visited(n);\n            if( dfs(0, mid, reverse_al, visited) == n) //start from node 0.\n                r = mid;\n            else\n                l = mid+1;\n        }\n        return l == 1000001? -1: l;\n    }\n    int dfs(int i, int mid, vector<vector<pair<int, int>>>& reverse_al, vector<int>& visited) {\n        int res = 1;\n        visited[i] = 1;\n\n        for(auto [j, w]: reverse_al[i]) {\n            if( w<=mid && !visited[j])\n                res += dfs(j, mid, reverse_al, visited);\n        }\n        return res;\n    }\n};","compare_resulttitle_slug":"minimize-the-maximum-edge-weight-of-graph","has_notes":false,"flag_type":1}