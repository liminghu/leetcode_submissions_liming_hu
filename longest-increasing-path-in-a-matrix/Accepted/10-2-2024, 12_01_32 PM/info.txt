{"id":1409729898,"question_id":329,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727895692,"status":10,"status_display":"Accepted","runtime":"166 ms","url":"/submissions/detail/1409729898/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"20.2 MB","code":"/*\nGiven an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not \nmove diagonally or move outside the boundary (i.e., wrap-around is not allowed).\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 231 - 1\n*/\n/*class Solution {\n    vector<pair<int,int>> dirs = { {0,1},{0,-1},{1,0},{-1,0} };\n    int m, n;\n    vector<vector<int>> memo;\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) \n    {\n        m = matrix.size();\n        n = matrix[0].size();\n        memo = vector(m, vector(n,0));\n\n        int ret = 0;\n        for (int i=0; i<m; i++) {\n            for (int j=0; j<n; j++) {\n                ret = max(ret, dfs(matrix, i, j) );                    \n            }\n        }\n        return ret;\n    }\n    \n    int dfs(vector<vector<int>>& matrix, int i, int j)\n    {\n        if ( memo[i][j] != 0 ) \n            return memo[i][j];\n        int ret = 0;\n        for (int k=0; k<4; k++) {\n            int x = i + dirs[k].first;\n            int y = j + dirs[k].second;\n            if ( x<0 || x>=m || y<0 || y>=n ) \n                continue;\n            if ( matrix[x][y] <= matrix[i][j] ) \n                continue;\n            ret = max(ret, dfs(matrix, x, y) );\n        }\n        memo[i][j] = 1 + ret;\n        return memo[i][j];\n    }\n};*/\nclass Solution {\n    vector<pair<int,int>> dirs = {{0,1}, {0,-1}, {1,0}, {-1,0}};\n    int m,n;\n    vector<vector<int>> memo;\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        m = matrix.size();\n        n = matrix[0].size();\n        memo = vector(m, vector(n,-1));\n        \n        int ret = 0;\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                ret = max(ret, dfs(matrix, i, j) );\n            }\n        };\n        return ret;\n    }\n\n    int dfs(vector<vector<int>>& matrix, int i, int j) {\n        if( memo[i][j] > 0 )\n            return memo[i][j];\n        \n        int ret = 0;\n        for(int k=0; k<4; k++) {\n            int x = i + dirs[k].first;\n            int y = j + dirs[k].second;\n            if(x<0 || x>=m || y<0 || y>=n )\n                continue;\n            if( matrix[x][y] <= matrix[i][j] ) //cannot increase.\n                continue;\n            ret = max( ret, dfs(matrix, x, y) );\n        };\n        cout << i << \" \" << j << \" \" << ret+1 << endl;\n        memo[i][j] = ret + 1;\n        return memo[i][j];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}