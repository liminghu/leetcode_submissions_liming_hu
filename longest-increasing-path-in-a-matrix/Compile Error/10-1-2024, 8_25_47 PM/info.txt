{"id":1408877826,"question_id":329,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1727839547,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1408877826/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"/*\nGiven an m x n integers matrix, return the length of the longest increasing path in matrix.\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 231 - 1\n*/\nclass Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        \n    }\n};","compare_result":null,"title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}