{"id":1396846133,"question_id":28,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1726865405,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1396846133/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"8 MB","code":"/*\nGiven two strings needle and haystack, return the index \nof the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n1 <= haystack.length, needle.length <= 104\nhaystack and needle consist of only lowercase English characters.\n*/\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        string s = haystack;\n        string p = needle;\n        int n = s.size();\n        int m = p.size();\n\n        if( m == 0 ) \n            return 0;\n        if( n == 0)\n            return -1;\n        vector<int> dp(n,0);\n        dp[0] = (s[0] == p[0]);\n        if( m == 1 && s[0] == p[0])\n            return 0;\n        vector<int> suffix = preprocess(p);\n        for(int i=1; i<n; i++) {\n            int j = dp[i-1];\n            while(j>=1 && s[i] != p[j]) {\n                j = suffix[j-1];\n            }\n            dp[i] = j+ (s[i] == p[j]);\n            if(dp[i] == p.size()) \n                return i-p.size()+1; \n        }\n        return -1;\n    }\n\n    vector<int> preprocess(string s) {\n        int n = s.size();\n        vector<int> dp(n, 0);\n        dp[0] = 0;\n\n        for(int i=1; i<n; i++) {\n            int j = dp[i-1];\n            while(j>=1 && s[j] != s[i]) {\n                j = dp[j-1];\n            }\n            dp[i] = j+ (s[j] == s[i]);\n        }\n        return dp;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1}