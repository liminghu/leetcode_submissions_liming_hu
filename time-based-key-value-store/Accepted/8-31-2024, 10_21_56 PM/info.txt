{"id":1375001050,"question_id":1023,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1725168116,"status":10,"status_display":"Accepted","runtime":"286 ms","url":"/submissions/detail/1375001050/","is_pending":"Not Pending","title":"Time Based Key-Value Store","memory":"133.7 MB","code":"/*Design a time-based key-value data structure that can store multiple values for the same key at different time stamps \nand retrieve the key's value at a certain timestamp.\n\nImplement the TimeMap class:\n\nTimeMap() Initializes the object of the data structure.\nvoid set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.\nString get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. \nIf there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \"\".\n*/\n//static auto cmp = [](pair<int, int> a, pair<int, int> b){ return a.first < b.first;};\n\n/*1 <= key.length, value.length <= 100\nkey and value consist of lowercase English letters and digits.\n1 <= timestamp <= 107\nAll the timestamps timestamp of set are strictly increasing.\nAt most 2 * 105 calls will be made to set and get.\n*/\n\nclass TimeMap {\n    //unordered_map<string, map<int, string>> mp;\n    unordered_map<string, vector<pair<int, string>>> mp;\npublic:\n    TimeMap() {\n        \n    }\n    \n    void set(string key, string value, int timestamp) {\n\n        //mp[key][timestamp] = value;\n        mp[key].push_back({timestamp, value});\n    }\n    \n    string get(string key, int timestamp) {\n       /* if( mp.find(key) == mp.end())\n            return \"\";\n        else {\n            map<int, string> vs = mp[key];\n            map<int, string>::iterator it = vs.upper_bound(timestamp);\n            if(it == vs.begin())\n                return \"\";\n            it--;\n            return it->second;\n        }*/\n\n        if(mp.find(key)== mp.end())\n            return \"\";\n        if(timestamp < mp[key][0].first)\n            return \"\";\n\n        int left = 0;\n        int right = mp[key].size();\n\n        while(left < right) {\n            int mid = (left+right)/2;\n            if(mp[key][mid].first <= timestamp) \n                left = mid+1;\n            else\n                right = mid;                \n        }\n        if(right == 0)\n            return \"\";\n            return mp[key][right-1].second;\n\n    }\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"time-based-key-value-store","has_notes":false,"flag_type":1}