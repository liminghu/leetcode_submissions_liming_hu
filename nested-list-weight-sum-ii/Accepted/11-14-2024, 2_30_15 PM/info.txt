{"id":1453002853,"question_id":364,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1731623415,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1453002853/","is_pending":"Not Pending","title":"Nested List Weight Sum II","memory":"11.8 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass Solution {\npublic:\n    int depthSumInverse(vector<NestedInteger>& nestedList) {\n        queue<NestedInteger> q;\n        for(int i=0; i<nestedList.size(); i++)\n            q.push(nestedList[i]);\n        int depth = 1;\n        int sum = 0;\n        int extra = 0;\n        while(!q.empty()) {\n            int sz = q.size();\n            for(int i=0; i<sz; i++) {\n                NestedInteger t = q.front();\n                q.pop();\n                if(t.isInteger()) {\n                    sum += t.getInteger();\n                    extra += t.getInteger() * depth;\n                } else {\n                    vector<NestedInteger> v_t = t.getList();\n                    for(int j=0; j<v_t.size(); j++)\n                        q.push(v_t[j]);\n                }\n            }\n            depth++;\n        }\n        return sum*depth - extra;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"nested-list-weight-sum-ii","has_notes":false,"flag_type":1}