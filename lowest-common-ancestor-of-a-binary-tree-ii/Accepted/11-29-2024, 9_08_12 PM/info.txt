{"id":1466250391,"question_id":1780,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1732943292,"status":10,"status_display":"Accepted","runtime":"118 ms","url":"/submissions/detail/1466250391/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree II","memory":"62 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* ans = LCA(root, p, q);\n        if(ans == p) \n            return dfs(p,q)? p:NULL;\n        else if(ans == q)\n            return dfs(q,p)? q:NULL;\n        return ans;\n    }\n\n    TreeNode* LCA(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root==NULL || root == p || root == q)\n            return root;\n        TreeNode* left = LCA(root->left, p, q);\n        TreeNode* right = LCA(root->right, p, q);  \n        if(left && right)\n            return root;\n        else if(left)\n            return left;\n        else\n            return right;      \n    }\n\n    bool dfs(TreeNode* node, TreeNode* target) {\n        if(node == target)\n            return true;\n        if(node == NULL)\n            return false;\n        return dfs(node->left, target) || dfs(node->right, target);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree-ii","has_notes":false,"flag_type":1}