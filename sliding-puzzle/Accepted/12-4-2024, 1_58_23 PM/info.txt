{"id":1470523425,"question_id":787,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1733349503,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1470523425/","is_pending":"Not Pending","title":"Sliding Puzzle","memory":"11.7 MB","code":"class Solution {\npublic:\n    int slidingPuzzle(vector<vector<int>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n        string goal;\n        string start;\n        for(int r=0; r<rows; r++) {\n            for(int c=0; c<cols; c++) {\n                start += ( board[r][c] + '0' );\n                goal  += ( (r*cols+c+1)%(rows*cols)+'0' ); //12345.......0\n            }\n        }\n        if(start==goal)\n            return 0;\n        vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        unordered_set<string> visited;\n        visited.insert(start);\n        int steps = 0;\n        queue<string> q;\n        q.push(start);\n        while(!q.empty()) {\n            steps++;\n            int sz = q.size();\n            while(sz-->0) {\n                string s = q.front();\n                q.pop();\n                int p = s.find('0');\n                int y = p / cols;\n                int x = p % cols;\n                for(auto dir: dirs) {\n                    int nx = x + dir[0];\n                    int ny = y + dir[1];\n                    if(nx<0 || ny<0 || nx>=cols || ny >= rows)\n                        continue;\n                    int pp = ny * cols + nx;\n                    string t(s);\n                    swap(t[p], t[pp]);\n                    if(visited.count(t))\n                        continue;\n                    if(t==goal)\n                        return steps;\n                    visited.insert(t);\n                    q.push(t);\n                }\n            }\n        }\n        return -1;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"sliding-puzzle","has_notes":false,"flag_type":1}