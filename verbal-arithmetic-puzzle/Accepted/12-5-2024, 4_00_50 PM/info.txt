{"id":1471412127,"question_id":1429,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1733443250,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1471412127/","is_pending":"Not Pending","title":"Verbal Arithmetic Puzzle","memory":"10.4 MB","code":"class Solution {\n    int map[256];\n    int visited[10];\npublic:\n    bool isSolvable(vector<string>& words, string result) {\n        for(int i=0; i<256; i++)\n            map[i] = -1;\n        reverse(result.begin(), result.end());\n        for(auto& word: words) {\n            if(word.size()>result.size())\n                return false;\n            reverse(word.begin(), word.end());\n        }\n        return dfs(words, result, 0, 0, 0);\n    }\n    bool dfs(vector<string>& words, string result, int j, int i, int sum) {\n        if( j == result.size() ) {\n            if( sum != 0 )\n                return false;\n            if(result.size()>1 && map[result.back()]==0) //result has leading zero.\n                return false;\n            return true;\n        };\n        if( i == words.size() ) { //result row\n            if(map[ result[j] ] != -1) {//already mapped.\n                if(map[ result[j] ] != sum%10)\n                    return false;\n                else\n                    return dfs(words, result, j+1, 0, sum/10);\n            } else {\n                if(visited[sum%10] == 1)\n                    return false;\n                map[result[j]] = sum%10;\n                visited[sum%10] = 1;\n                if(dfs(words, result, j+1, 0, sum/10))\n                    return true;\n                map[result[j]] = -1;\n                visited[sum%10] = 0;\n                return false;\n            }\n        };\n\n        if( j >= words[i].length() )\n            return dfs(words, result, j, i+1, sum);\n        char ch = words[i][j];\n        if(map[ch]!=-1) {\n            if(words[i].size()>1 && j==words.size()-1 && map[ch]==0) //leading zero\n                return false;\n            return dfs(words, result, j, i+1, sum+map[ch]);\n        } else {\n            for(int d=0; d<=9; d++) {\n                if(visited[d])\n                    continue;\n                if(d==0 && words[i].size()>1 && j==words[i].size()-1)\n                    continue;\n                map[ch] = d;\n                visited[d] = 1;\n                if(dfs(words, result, j, i+1, sum+d))\n                    return true;\n                map[ch] = -1;\n                visited[d] = 0;\n            }\n            return false;\n        }\n        return true;\n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"verbal-arithmetic-puzzle","has_notes":false,"flag_type":1}